{"/facturotas.docs/api/":{"data":{"":"","introducción#Introducción":"Introducción Nuestra API de timbrado se especializa en la emisión e integración de Comprobantes Fiscales Digitales por Internet (CFDI). Sus principales cualidades son:\nCualidades Técnicas Seguridad y Escalabilidad: Utiliza infraestructura de Amazon Web Services (AWS) con servicios EC2 para alta seguridad y escalabilidad, garantizando un 99.5% de disponibilidad y un Plan de Recuperación de Desastres (DRP). Los PACs están autorizados por el SAT y cumplen con ISO 27001, con comunicaciones SSL seguras. Actualizaciones: Mantenimiento constante para tecnologías fiscales, incluyendo CFDI 4.0, Complemento Carta Porte 2.0, Nuevo Esquema Cancelación 2.0, Complemento de Pagos 2.0 y Retenciones 2.0, disponibles desde enero de 2022. Métodos de Integración: Soporta timbrado vía XML, JSON y TXT. También ofrece un Conector Ejecutable en Java para timbrar y cancelar CFDI. Librerías: Proporciona bibliotecas gratuitas con ejemplos en PHP, Java, .Net, COM (VB6, Delphi, FoxPro) para integrar los servicios XML, JSON y TXT. Rendimiento: Capacidad mensual de hasta 130,000,000 de CFDI’s con un tiempo máximo de respuesta de 0.6 segundos. Respaldo y Generación: Respaldo de CFDI’s por al menos 5 años y capacidad de generación de PDF. Integraciones: Soporta métodos SOAP y REST. Cualidades No Técnicas Beneficios al Cliente: Timbres sin vigencia, actualizaciones y cancelaciones gratuitas, y soporte técnico especializado sin costo adicional. Soporte Técnico: Atención personalizada por ingenieros especialistas, con soporte por niveles (básico, técnico, desarrollo, VIP) a través de Skype, e-mail, videollamada, conexión remota y WhatsApp. Herramientas de Gestión: Panel administrativo Multi-RFC sin costo para controlar operaciones, consultar CFDI’s, timbres y cancelaciones, y gestionar subcuentas. Ambiente de Pruebas: Disponibilidad de un ambiente de pruebas con soporte. Asesoría: Asesoría profesional para el proceso de integración. Validador de XML: Servicio adicional que valida CFDI timbrados, confirmando su registro en el SAT y revisando parámetros como redacción y sintaxis. Bóveda Web Service: Descarga automática de CFDI desde el portal del SAT, con respaldo seguro en múltiples centros de datos. Permite cargar FIEL, configurar descargas y generar reportes. Timbrado MultiPAC: Balanceador de carga que redirige el timbrado entre PACs para evitar intermitencias, de forma transparente para el cliente. Todas las solicitudes son seguras vía HTTPS. Endpoints"},"title":"_index"},"/facturotas.docs/api/endpoints_timbrado/":{"data":{"endpoints-timbrado#Endpoints Timbrado":"","timbrar#timbrar":"Endpoints TimbradoEsta sección detalla la operación del servicio de timbrado, permitiendo procesar y obtener el XML timbrado de un Comprobante Fiscal Digital (CFDI).\ntimbrar Descripción de la Operación Esta operación permite timbrar un CFDI en sus versiones 3.3 o 4.0 y retornar el XML timbrado completo del comprobante fiscal.\nParámetros de Entrada (Input) Parámetro Tipo de Dato Descripción apikey string Credencial de acceso al servicio (32 caracteres). xmlCFDI string Contenido del documento XML del CFDI v3.3 o v4.0. Parámetros de Salida (Output) - RespuestaTimbrado Atributo Tipo de Dato Descripción code string Código de respuesta de la operación. message string Mensaje detallado de la respuesta. data string XML del CFDI timbrado en caso de éxito. Ejemplo de Código A continuación se presenta un ejemplo de cómo construir la solicitud y procesar la respuesta utilizando el servicio Web.\nSolicitud (Request) C#JavaPythonPHP Herramienta svcutil Descarga e instala la herramienta svcutil\nEjecuta el comando siguiente (DESARROLLO)\nsvcutil.exe https://dev.facturaloplus.com/ws/servicio.do?wsdl /out:ServicioTimbradoClient.cs /config:app.config Esto genera dos archivos: ServicioTimbradoClient.cs y la configuración en app.config\nImplementación /// Agregar los parámetros necesarios /// \u003csummary\u003e /// Genera un XML de ejemplo para un CFDI 4.0. /// En una aplicación real, este XML se construiría dinámicamente. /// \u003c/summary\u003e /// \u003creturns\u003eUn string con el contenido del CFDI.\u003c/returns\u003e private static string TimbrarCfdi() =\u003e \"\"\" \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" Version=\"4.0\" Serie=\"F\" Folio=\"123\" Fecha=\"2025-07-02T12:00:00\" SubTotal=\"100.00\" Moneda=\"MXN\" Total=\"116.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" FormaPago=\"01\" LugarExpedicion=\"64000\"\u003e \u003ccfdi:Emisor Rfc=\"ABC010101XYZ\" Nombre=\"Empresa Ejemplo\" RegimenFiscal=\"601\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Publico en General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" UsoCFDI=\"G03\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ClaveProdServ=\"84111506\" Cantidad=\"1\" ClaveUnidad=\"ACT\" Descripcion=\"Servicio de Ejemplo\" ValorUnitario=\"100.00\" Importe=\"100.00\"\u003e \u003ccfdi:Impuestos\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003c/cfdi:Concepto\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Impuestos TotalImpuestosTrasladados=\"16.00\"\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003c/cfdi:Comprobante\u003e \"\"\"; /// \u003csummary\u003e /// Invoca al servicio web para timbrar un CFDI de forma asíncrona. /// \u003c/summary\u003e /// \u003cparam name=\"apiKey\"\u003eLa credencial de acceso al servicio.\u003c/param\u003e /// \u003cparam name=\"xmlCfdi\"\u003eEl contenido del CFDI a timbrar.\u003c/param\u003e /// \u003creturns\u003eUn objeto RespuestaTimbrado con el resultado de la operación.\u003c/returns\u003e public async Task\u003cRespuestaTimbrado\u003e TimbrarAsync(string apiKey) { using var client = new ServicioTimbradoWSPortTypeClient(\"ServicioTimbradoWSPort\"); try { var response = await client.timbrarAsync(apiKey, TimbrarCfdi()); return new RespuestaTimbrado { Code = response.code, Message = response.message, Data = response.data }; } catch (FaultException\u003cRespuestaTimbrado\u003e ex) { _logger.LogError(ex, \"Error SOAP: {Code} - {Message}\", ex.Detail.code, ex.Detail.message); throw; } catch (CommunicationException ex) { _logger.LogError(ex, \"Error de comunicación con el servicio\"); throw; } catch (TimeoutException ex) { _logger.LogError(ex, \"Timeout en la comunicación\"); throw; } } /// \u003csummary\u003e /// Define la estructura del objeto de respuesta para mayor claridad. /// \u003c/summary\u003e public class RespuestaTimbrado { public string? Code { get; set; } public string? Message { get; set; } public string? Data { get; set; } } Herramienta wsimport Java incluye la herramienta wsimport en el JDK para generar las clases cliente a partir de un WSDL.\nEjecuta el siguiente comando en tu terminal para el ambiente de DESARROLLO:\nwsimport -keep -p com.facturaloplus.cliente https://dev.facturaloplus.com/ws/servicio.do?wsdl -keep: Conserva los archivos fuente .java generados.\n-p: Especifica el paquete (package) donde se guardarán las clases.\nImplementación // --- Archivo: RespuestaTimbrado.java --- package com.facturaloplus.cliente; // POJO (Plain Old Java Object) para encapsular la respuesta. public class RespuestaTimbrado { private String code; private String message; private String data; // Getters y Setters public String getCode() { return code; } public void setCode(String code) { this.code = code; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public String getData() { return data; } public void setData(String data) { this.data = data; } } // --- Archivo: TimbradoService.java --- package com.facturaloplus.cliente; import javax.xml.ws.Service; import javax.xml.ws.WebServiceException; import javax.xml.ws.soap.SOAPFaultException; import java.time.LocalDateTime; import java.time.format.DateTimeFormatter; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.logging.Level; import java.util.logging.Logger; public class TimbradoService { private static final Logger logger = Logger.getLogger(TimbradoService.class.getName()); // Se recomienda un ExecutorService para manejar los hilos de las tareas asíncronas. private final ExecutorService executor = Executors.newFixedThreadPool(5); public String generarXmlCfdiEjemplo() { // Usar la fecha y hora actual en formato UTC, requerido por el SAT. String fechaActual = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss\")); // Uso de Text Blocks (Java 15+) para el XML. // Nota: Se agregó ObjetoImp=\"02\" en el concepto, requerido en CFDI 4.0. return \"\"\" \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" Version=\"4.0\" Serie=\"F\" Folio=\"123\" Fecha=\"%s\" SubTotal=\"100.00\" Moneda=\"MXN\" Total=\"116.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" FormaPago=\"01\" LugarExpedicion=\"64000\"\u003e \u003ccfdi:Emisor Rfc=\"ABC010101XYZ\" Nombre=\"Empresa Ejemplo\" RegimenFiscal=\"601\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Publico en General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" UsoCFDI=\"G03\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ClaveProdServ=\"84111506\" Cantidad=\"1\" ClaveUnidad=\"ACT\" ObjetoImp=\"02\" Descripcion=\"Servicio de Ejemplo\" ValorUnitario=\"100.00\" Importe=\"100.00\"\u003e \u003ccfdi:Impuestos\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003c/cfdi:Concepto\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Impuestos TotalImpuestosTrasladados=\"16.00\"\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003c/cfdi:Comprobante\u003e \"\"\".formatted(fechaActual); } public CompletableFuture\u003cRespuestaTimbrado\u003e timbrarAsync(String apiKey, String xmlCfdi) { return CompletableFuture.supplyAsync(() -\u003e { try { // Las clases ServicioTimbradoWS y ServicioTimbradoWSPortType son generadas por wsimport. ServicioTimbradoWS service = new ServicioTimbradoWS(); ServicioTimbradoWSPortType port = service.getServicioTimbradoWSPort(); logger.info(\"Iniciando timbrado para CFDI.\"); Respuesta response = port.timbrar(apiKey, xmlCfdi); // 'Respuesta' es la clase generada por wsimport. RespuestaTimbrado resultado = new RespuestaTimbrado(); resultado.setCode(response.getCode()); resultado.setMessage(response.getMessage()); resultado.setData(response.getData()); return resultado; } catch (SOAPFaultException ex) { logger.log(Level.SEVERE, \"Error SOAP (SOAPFaultException): \" + ex.getFault().getFaultString(), ex); throw new RuntimeException(\"Error del servicio: \" + ex.getFault().getFaultString(), ex); } catch (WebServiceException ex) { logger.log(Level.SEVERE, \"Error de comunicación con el servicio de timbrado.\", ex); throw new RuntimeException(\"Error de comunicación.\", ex); } }, executor); } public void shutdown() { executor.shutdown(); } } // --- Archivo: Main.java (Ejemplo de uso) --- package com.facturaloplus.cliente; import java.util.concurrent.CompletableFuture; public class Main { public static void main(String[] args) { TimbradoService timbradoService = new TimbradoService(); // El API Key debe obtenerse de una fuente segura, no estar en el código. String miApiKey = \"TU_API_KEY_AQUI\"; String xmlParaTimbrar = timbradoService.generarXmlCfdiEjemplo(); System.out.println(\"--- Intentando timbrar el siguiente CFDI: ---\"); System.out.println(xmlParaTimbrar); System.out.println(\"------------------------------------------\"); CompletableFuture\u003cRespuestaTimbrado\u003e future = timbradoService.timbrarAsync(miApiKey, xmlParaTimbrar); future.whenComplete((resultado, ex) -\u003e { if (ex != null) { System.err.println(\"\\nOcurrió una excepción no controlada: \" + ex.getMessage()); } else { if (\"200\".equals(resultado.getCode())) { System.out.println(\"\\n¡Timbrado Exitoso!\"); System.out.println(\"Mensaje: \" + resultado.getMessage()); System.out.println(\"\\n--- XML Timbrado ---\"); System.out.println(resultado.getData()); } else { System.err.println(\"\\nError durante el timbrado:\"); System.err.println(\"Código: \" + resultado.getCode()); System.err.println(\"Mensaje: \" + resultado.getMessage()); } } // Es importante cerrar el ExecutorService cuando la aplicación termina. timbradoService.shutdown(); }); // Mantiene el programa principal vivo mientras se completa la tarea asíncrona. // En una aplicación real (ej. un servidor de aplicaciones), esto no sería necesario. future.join(); } } Herramienta Zeep Para interactuar con servicios SOAP en Python, la librería zeep es una excelente opción. Proporciona una interfaz limpia y moderna.\nInstala la librería usando pip:\npip install zeep Implementación El siguiente código muestra una implementación robusta utilizando zeep y asyncio para realizar llamadas asíncronas al servicio web.\n# --- Archivo: timbrado_service.py --- import asyncio import logging from datetime import datetime from zeep import Client from zeep.asyncio import AsyncClient from zeep.exceptions import Fault, TransportError from dataclasses import dataclass # Configuración básica de logging logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s') WSDL_URL_DESARROLLO = \"https://dev.facturaloplus.com/ws/servicio.do?wsdl\" @dataclass class RespuestaTimbrado: \"\"\"Clase de datos para encapsular la respuesta del servicio.\"\"\" code: str = None message: str = None data: str = None class TimbradoService: \"\"\"Clase que encapsula la lógica para interactuar con el servicio de timbrado.\"\"\" def __init__(self, wsdl_url: str): self.wsdl_url = wsdl_url # El cliente asíncrono se crea al momento de usarlo self.async_client = AsyncClient(self.wsdl_url) def generar_xml_cfdi_ejemplo(self) -\u003e str: \"\"\" Genera un XML de ejemplo para un CFDI 4.0. En una aplicación real, este XML se construiría dinámicamente. \"\"\" # Usar la fecha y hora actual en formato UTC, requerido por el SAT. fecha_actual = datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S') # Uso de f-strings para formatear el XML. # Nota: Se agregó ObjetoImp=\"02\" en el concepto, requerido en CFDI 4.0. return f\"\"\" \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" Version=\"4.0\" Serie=\"F\" Folio=\"123\" Fecha=\"{fecha_actual}\" SubTotal=\"100.00\" Moneda=\"MXN\" Total=\"116.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" FormaPago=\"01\" LugarExpedicion=\"64000\"\u003e \u003ccfdi:Emisor Rfc=\"ABC010101XYZ\" Nombre=\"Empresa Ejemplo\" RegimenFiscal=\"601\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Publico en General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" UsoCFDI=\"G03\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ClaveProdServ=\"84111506\" Cantidad=\"1\" ClaveUnidad=\"ACT\" ObjetoImp=\"02\" Descripcion=\"Servicio de Ejemplo\" ValorUnitario=\"100.00\" Importe=\"100.00\"\u003e \u003ccfdi:Impuestos\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003c/cfdi:Concepto\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Impuestos TotalImpuestosTrasladados=\"16.00\"\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003c/cfdi:Comprobante\u003e \"\"\" async def timbrar_async(self, api_key: str, xml_cfdi: str) -\u003e RespuestaTimbrado: \"\"\"Invoca al servicio web para timbrar un CFDI de forma asíncrona.\"\"\" try: logging.info(\"Iniciando timbrado para CFDI.\") # El nombre del servicio 'ServicioTimbradoWSPort' y la operación 'timbrar' # son definidos por el WSDL. response = await self.async_client.service.timbrar(apikey=api_key, xmlCFDI=xml_cfdi) # Zeep convierte la respuesta en un objeto similar a un diccionario. return RespuestaTimbrado( code=response.code, message=response.message, data=response.data ) except Fault as ex: logging.error(f\"Error SOAP (Fault): Code={ex.code}, Message={ex.message}\") raise ConnectionError(f\"Error del servicio: {ex.message}\") from ex except TransportError as ex: logging.error(f\"Error de comunicación con el servicio de timbrado: {ex}\") raise # --- Archivo: main.py (Ejemplo de uso) --- async def main(): \"\"\"Función principal para ejecutar el ejemplo.\"\"\" service = TimbradoService(WSDL_URL_DESARROLLO) # El API Key debe obtenerse de una fuente segura, no estar en el código. mi_api_key = \"TU_API_KEY_AQUI\" xml_para_timbrar = service.generar_xml_cfdi_ejemplo() print(\"--- Intentando timbrar el siguiente CFDI: ---\") print(xml_para_timbrar) print(\"------------------------------------------\") try: resultado = await service.timbrar_async(mi_api_key, xml_para_timbrar) if resultado.code == \"200\": print(\"\\033[92m\\n¡Timbrado Exitoso!\\033[0m\") # Color verde print(f\"Mensaje: {resultado.message}\") print(\"\\n--- XML Timbrado ---\") print(resultado.data) else: print(\"\\033[91m\\nError durante el timbrado:\\033[0m\") # Color rojo print(f\"Código: {resultado.code}\") print(f\"Mensaje: {resultado.message}\") except Exception as ex: print(f\"\\033[91m\\nOcurrió una excepción no controlada: {ex}\\033[0m\") if __name__ == \"__main__\": asyncio.run(main()) Herramienta SoapClient PHP tiene soporte nativo para SOAP a través de la extensión SOAP. Asegúrate de que la extensión php-soap esté habilitada en tu archivo php.ini.\nImplementación El siguiente código muestra una implementación orientada a objetos para consumir el servicio de timbrado.\n\u003c?php // --- Archivo: Timbrado.php --- // Habilitar la visualización de errores para depuración ini_set('display_errors', 1); error_reporting(E_ALL); /** * Clase DTO (Data Transfer Object) para encapsular la respuesta del servicio. */ class RespuestaTimbrado { public ?string $code = null; public ?string $message = null; public ?string $data = null; } /** * Clase que encapsula la lógica para interactuar con el servicio de timbrado. */ class TimbradoService { private string $wsdlUrl; public function __construct(string $wsdlUrl) { $this-\u003ewsdlUrl = $wsdlUrl; } /** * Genera un XML de ejemplo para un CFDI 4.0. */ public function generarXmlCfdiEjemplo(): string { // Usar la fecha y hora actual en formato UTC, requerido por el SAT. $fechaActual = gmdate('Y-m-d\\TH:i:s'); // Nota: Se agregó ObjetoImp=\"02\" en el concepto, requerido en CFDI 4.0. return \u003c\u003c\u003cXML \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" Version=\"4.0\" Serie=\"F\" Folio=\"123\" Fecha=\"{$fechaActual}\" SubTotal=\"100.00\" Moneda=\"MXN\" Total=\"116.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" FormaPago=\"01\" LugarExpedicion=\"64000\"\u003e \u003ccfdi:Emisor Rfc=\"ABC010101XYZ\" Nombre=\"Empresa Ejemplo\" RegimenFiscal=\"601\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Publico en General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" UsoCFDI=\"G03\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ClaveProdServ=\"84111506\" Cantidad=\"1\" ClaveUnidad=\"ACT\" ObjetoImp=\"02\" Descripcion=\"Servicio de Ejemplo\" ValorUnitario=\"100.00\" Importe=\"100.00\"\u003e \u003ccfdi:Impuestos\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003c/cfdi:Concepto\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Impuestos TotalImpuestosTrasladados=\"16.00\"\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003c/cfdi:Comprobante\u003e XML; } /** * Invoca al servicio web para timbrar un CFDI. */ public function timbrar(string $apiKey, string $xmlCfdi): RespuestaTimbrado { $respuesta = new RespuestaTimbrado(); try { // Opciones para el cliente SOAP. 'trace' es útil para depurar. $options = [ 'trace' =\u003e 1, 'exceptions' =\u003e true, // Lanza SoapFault en caso de error 'cache_wsdl' =\u003e WSDL_CACHE_NONE ]; // Crear el cliente SOAP $soapClient = new SoapClient($this-\u003ewsdlUrl, $options); // Los parámetros deben estar en un array asociativo $params = [ 'apikey' =\u003e $apiKey, 'xmlCFDI' =\u003e $xmlCfdi ]; // Llamar a la operación 'timbrar' del servicio $response = $soapClient-\u003etimbrar($params); $respuesta-\u003ecode = $response-\u003ereturn-\u003ecode ?? null; $respuesta-\u003emessage = $response-\u003ereturn-\u003emessage ?? null; $respuesta-\u003edata = $response-\u003ereturn-\u003edata ?? null; } catch (SoapFault $e) { // Capturar errores específicos de SOAP error_log(\"Error SOAP (SoapFault): \" . $e-\u003egetMessage()); $respuesta-\u003ecode = \"FAULT\"; $respuesta-\u003emessage = \"Error en la comunicación SOAP: \" . $e-\u003egetMessage(); } catch (Exception $e) { // Capturar otros errores error_log(\"Error general: \" . $e-\u003egetMessage()); $respuesta-\u003ecode = \"EXCEPTION\"; $respuesta-\u003emessage = \"Ocurrió una excepción: \" . $e-\u003egetMessage(); } return $respuesta; } } // --- Archivo: index.php (Ejemplo de uso) --- // Incluir la clase del servicio // require_once 'Timbrado.php'; $wsdlDesarrollo = \"https://dev.facturaloplus.com/ws/servicio.do?wsdl\"; $timbradoService = new TimbradoService($wsdlDesarrollo); // El API Key debe obtenerse de una fuente segura, como una variable de entorno. $miApiKey = getenv('TIMBRADO_API_KEY') ?: \"TU_API_KEY_AQUI\"; $xmlParaTimbrar = $timbradoService-\u003egenerarXmlCfdiEjemplo(); // Imprimir en formato de texto plano para una mejor visualización en consola o web header('Content-Type: text/plain; charset=utf-8'); echo \"--- Intentando timbrar el siguiente CFDI: ---\\n\"; echo $xmlParaTimbrar; echo \"\\n------------------------------------------\\n\\n\"; $resultado = $timbradoService-\u003etimbrar($miApiKey, $xmlParaTimbrar); if ($resultado-\u003ecode === '200') { echo \"¡Timbrado Exitoso!\\n\"; echo \"Mensaje: {$resultado-\u003emessage}\\n\"; echo \"\\n--- XML Timbrado ---\\n\"; echo $resultado-\u003edata; } else { echo \"Error durante el timbrado:\\n\"; echo \"Código: {$resultado-\u003ecode}\\n\"; echo \"Mensaje: {$resultado-\u003emessage}\\n\"; } ?\u003e "},"title":"endpoints_timbrado"},"/facturotas.docs/api/schemas/":{"data":{"schemas#Schemas":"SchemasDetailed information about the data structures used in the API."},"title":"schemas"},"/facturotas.docs/guias/":{"data":{"guías#Guías":"GuíasThis section contains step-by-step guides to help you use the External API effectively.\nGetting Started Authentication "},"title":"_index"},"/facturotas.docs/guias/authentication/":{"data":{"authentication#Authentication":"AuthenticationUnderstand how to authenticate with the External API using API keys or OAuth."},"title":"authentication"},"/facturotas.docs/guias/getting-started/":{"data":{"getting-started#Getting Started":"Getting StartedLearn how to make your first API call and set up your environment."},"title":"getting-started"}}