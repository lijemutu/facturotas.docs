{"/facturotas.docs/api/":{"data":{"":"","introducción#Introducción":"Introducción Nuestra API de timbrado se especializa en la emisión e integración de Comprobantes Fiscales Digitales por Internet (CFDI). Sus principales cualidades son:\nCualidades Técnicas Seguridad y Escalabilidad: Utiliza infraestructura de Amazon Web Services (AWS) con servicios EC2 para alta seguridad y escalabilidad, garantizando un 99.5% de disponibilidad y un Plan de Recuperación de Desastres (DRP). Los PACs están autorizados por el SAT y cumplen con ISO 27001, con comunicaciones SSL seguras. Actualizaciones: Mantenimiento constante para tecnologías fiscales, incluyendo CFDI 4.0, Complemento Carta Porte 2.0, Nuevo Esquema Cancelación 2.0, Complemento de Pagos 2.0 y Retenciones 2.0, disponibles desde enero de 2022. Métodos de Integración: Soporta timbrado vía XML, JSON y TXT. También ofrece un Conector Ejecutable en Java para timbrar y cancelar CFDI. Librerías: Proporciona bibliotecas gratuitas con ejemplos en PHP, Java, .Net, COM (VB6, Delphi, FoxPro) para integrar los servicios XML, JSON y TXT. Rendimiento: Capacidad mensual de hasta 130,000,000 de CFDI’s con un tiempo máximo de respuesta de 0.6 segundos. Respaldo y Generación: Respaldo de CFDI’s por al menos 5 años y capacidad de generación de PDF. Integraciones: Soporta métodos SOAP y REST. Cualidades No Técnicas Beneficios al Cliente: Timbres sin vigencia, actualizaciones y cancelaciones gratuitas, y soporte técnico especializado sin costo adicional. Soporte Técnico: Atención personalizada por ingenieros especialistas, con soporte por niveles (básico, técnico, desarrollo, VIP) a través de Skype, e-mail, videollamada, conexión remota y WhatsApp. Herramientas de Gestión: Panel administrativo Multi-RFC sin costo para controlar operaciones, consultar CFDI’s, timbres y cancelaciones, y gestionar subcuentas. Ambiente de Pruebas: Disponibilidad de un ambiente de pruebas con soporte. Asesoría: Asesoría profesional para el proceso de integración. Validador de XML: Servicio adicional que valida CFDI timbrados, confirmando su registro en el SAT y revisando parámetros como redacción y sintaxis. Bóveda Web Service: Descarga automática de CFDI desde el portal del SAT, con respaldo seguro en múltiples centros de datos. Permite cargar FIEL, configurar descargas y generar reportes. Timbrado MultiPAC: Balanceador de carga que redirige el timbrado entre PACs para evitar intermitencias, de forma transparente para el cliente. Todas las solicitudes son seguras vía HTTPS. Endpoints"},"title":"_index"},"/facturotas.docs/api/cancelar/":{"data":{"":"Esta sección detalla la operación del servicio de cancelación de CFDI\nCancelar "},"title":"_index"},"/facturotas.docs/api/cancelar/cancelar2/":{"data":{"#":"cancelar2Esta sección detalla la operación para solicitar la cancelación de un CFDI utilizando los Certificados de Sello Digital (CSD) del emisor.\nDescripción de la Operación Esta operación permite realizar la solicitud de cancelación de un CFDI (versión 3.3 o 4.0) directamente ante el SAT. A diferencia de otros métodos, esta operación requiere el envío de los archivos del Certificado de Sello Digital (.key y .cer) y su contraseña, además de la información del comprobante a cancelar.\nSe debe especificar uno de los motivos de cancelación definidos por el SAT. Opcionalmente, si el motivo es “Comprobante emitido con errores con relación” (clave 01), se debe proporcionar el folio fiscal (UUID) del CFDI que sustituye al cancelado.\nParámetros de Entrada (Input) Parámetro Tipo de Dato Descripción apikey string Credencial de acceso al servicio (Solicita aquí). keyCSD string Contenido del archivo de la llave privada (.key) del emisor, codificado en Base64. Conversor Base 64 cerCSD string Contenido del archivo del certificado de llave pública (.cer) del emisor, codificado en Base64. Conversor Base 64 passCSD string Contraseña de la llave privada (CSD) del emisor. uuid string Folio Fiscal (UUID) del CFDI que se desea cancelar. rfcEmisor string RFC del contribuyente emisor del CFDI. rfcReceptor string RFC del contribuyente receptor del CFDI. total double Monto total exacto del CFDI a cancelar. motivo string Clave del motivo de la cancelación. Valores válidos: 01, 02, 03, 04. folioSustitucion string (Opcional) Folio Fiscal (UUID) del CFDI que sustituye al comprobante cancelado. En otros casos, enviar vacío. Parámetros de Salida (Output) - RespuestaCancelar Atributo Tipo de Dato Descripción code string Código de respuesta de la operación. message string Mensaje detallado de la respuesta. data string Acuse de cancelación en formato XML, devuelto por el SAT. status string Indica el estado de la solicitud. Puede ser success (éxito) o error (fallido). Ejemplo de Código Solicitud (Request) C#JavaPythonPHP Implementación Herramienta y Configuración: Se utiliza la herramienta svcutil de .NET para generar el cliente a partir del WSDL.\nDesarrollo: dotnet svcutil https://dev.facturaloplus.com/ws/servicio.do?wsdl Producción: dotnet svcutil https://app.facturaloplus.com/ws/servicio.do?wsdl using System; using System.IO; using System.Threading.Tasks; public class CancelarRequest { public string Apikey { get; set; } public string KeyCSD { get; set; } public string CerCSD { get; set; } public string PassCSD { get; set; } public string Uuid { get; set; } public string RfcEmisor { get; set; } public string RfcReceptor { get; set; } public double Total { get; set; } public string Motivo { get; set; } public string FolioSustitucion { get; set; } } public async Task\u003cRespuestaCancelar\u003e CancelarCfdiAsync(CancelarRequest request) { using var client = new ServicioTimbradoWSPortTypeClient(\"ServicioTimbradoWSPort\"); try { var response = await client.cancelar2Async( request.Apikey, request.KeyCSD, request.CerCSD, request.PassCSD, request.Uuid, request.RfcEmisor, request.RfcReceptor, request.Total, request.Motivo, request.FolioSustitucion ); return new RespuestaCancelar { Code = response.code, Message = response.message, Data = response.data, Status = response.status }; } catch (Exception ex) { Console.WriteLine($\"Error al cancelar CFDI: {ex.Message}\"); throw; } } // Ejemplo de uso public async Task EjemploUsoCancelarAsync() { var request = new CancelarRequest { Apikey = \"TU_API_KEY_AQUI\", KeyCSD = Convert.ToBase64String(File.ReadAllBytes(\"ruta/al/csd.key\")), CerCSD = Convert.ToBase64String(File.ReadAllBytes(\"ruta/al/csd.cer\")), PassCSD = \"tu_contraseña\", Uuid = \"5FD4E09E-52F4-4A0E-8E4D-39E6B8E47168\", RfcEmisor = \"ABC010101XYZ\", RfcReceptor = \"XAXX010101000\", Total = 116.00, Motivo = \"02\", // 02: Comprobante emitido con errores sin relación. FolioSustitucion = \"\" }; var resultado = await CancelarCfdiAsync(request); if (resultado?.Status == \"success\") { Console.WriteLine(\"¡Cancelación Exitosa!\"); Console.WriteLine($\"Mensaje: {resultado.Message}\"); Console.WriteLine(\"Acuse:\"); Console.WriteLine(resultado.Data); } else { Console.WriteLine($\"Error: {resultado?.Code} - {resultado?.Message}\"); } } Implementación Herramienta y Configuración: Se utiliza la herramienta wsimport del JDK para generar las clases de cliente.\nDesarrollo: wsimport -keep -verbose https://dev.facturaloplus.com/ws/servicio.do?wsdl Producción: wsimport -keep -verbose https://app.facturaloplus.com/ws/servicio.do?wsdl import java.nio.file.Files; import java.nio.file.Paths; import java.util.Base64; import java.util.concurrent.CompletableFuture; public class CancelarService { // ... (Definición de ExecutorService, Logger, etc.) public CompletableFuture\u003cRespuestaCancelar\u003e cancelarAsync(String apiKey, String keyCSD, String cerCSD, String passCSD, String uuid, String rfcEmisor, String rfcReceptor, double total, String motivo, String folioSustitucion) { return CompletableFuture.supplyAsync(() -\u003e { try { ServicioTimbradoWS service = new ServicioTimbradoWS(); ServicioTimbradoWSPortType port = service.getServicioTimbradoWSPort(); Respuesta response = port.cancelar2(apiKey, keyCSD, cerCSD, passCSD, uuid, rfcEmisor, rfcReceptor, total, motivo, folioSustitucion); RespuestaCancelar resultado = new RespuestaCancelar(); resultado.setCode(response.getCode()); resultado.setMessage(response.getMessage()); resultado.setData(response.getData()); resultado.setStatus(response.getStatus()); return resultado; } catch (Exception ex) { throw new RuntimeException(\"Error al cancelar CFDI\", ex); } }, executor); } // Ejemplo de uso public static void main(String[] args) { CancelarService service = new CancelarService(); String apiKey = \"TU_API_KEY_AQUI\"; try { String keyCSD = Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(\"ruta/al/csd.key\"))); String cerCSD = Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(\"ruta/al/csd.cer\"))); String passCSD = \"tu_contraseña\"; String uuid = \"5FD4E09E-52F4-4A0E-8E4D-39E6B8E47168\"; String rfcEmisor = \"ABC010101XYZ\"; String rfcReceptor = \"XAXX010101000\"; double total = 116.00; String motivo = \"02\"; String folioSustitucion = \"\"; service.cancelarAsync(apiKey, keyCSD, cerCSD, passCSD, uuid, rfcEmisor, rfcReceptor, total, motivo, folioSustitucion) .whenComplete((resultado, ex) -\u003e { if (ex != null) { System.err.println(\"Error: \" + ex.getMessage()); } else if (\"success\".equals(resultado.getStatus())) { System.out.println(\"¡Cancelación Exitosa!\"); System.out.println(\"Acuse: \" + resultado.getData()); } else { System.err.println(\"Error: \" + resultado.getCode() + \" - \" + resultado.getMessage()); } service.shutdown(); }).join(); } catch (IOException e) { System.err.println(\"No se pudieron leer los archivos CSD.\"); } } } Implementación Herramienta y Configuración: Se utiliza la librería zeep. Para instalarla, ejecuta: pip install zeep\nimport asyncio import base64 from zeep.asyncio import AsyncClient class CancelarService: def __init__(self, wsdl_url: str): self.wsdl_url = wsdl_url self.async_client = AsyncClient(self.wsdl_url) async def cancelar_async(self, **kwargs) -\u003e dict: response = await self.async_client.service.cancelar2(**kwargs) return response async def main(): service = CancelarService(\"https://dev.facturaloplus.com/ws/servicio.do?wsdl\") api_key = \"TU_API_KEY_AQUI\" with open(\"ruta/al/csd.key\", \"rb\") as key_file: key_csd_b64 = base64.b64encode(key_file.read()).decode('utf-8') with open(\"ruta/al/csd.cer\", \"rb\") as cer_file: cer_csd_b64 = base64.b64encode(cer_file.read()).decode('utf-8') params = { \"apikey\": api_key, \"keyCSD\": key_csd_b64, \"cerCSD\": cer_csd_b64, \"passCSD\": \"tu_contraseña\", \"uuid\": \"5FD4E09E-52F4-4A0E-8E4D-39E6B8E47168\", \"rfcEmisor\": \"ABC010101XYZ\", \"rfcReceptor\": \"XAXX010101000\", \"total\": 116.00, \"motivo\": \"02\", \"folioSustitucion\": \"\" } resultado = await service.cancelar_async(**params) if resultado and resultado['status'] == 'success': print(\"¡Cancelación Exitosa!\") print(f\"Mensaje: {resultado['message']}\") print(f\"Acuse: {resultado['data']}\") else: print(f\"Error: {resultado['code']} - {resultado['message']}\") if __name__ == \"__main__\": asyncio.run(main()) Implementación Herramienta y Configuración: Se requiere la extensión php-soap. Generalmente viene incluida con PHP, pero si no, se puede instalar con apt-get install php-soap (Debian/Ubuntu) o yum install php-soap (CentOS/RHEL). Asegúrate de que esté habilitada en tu php.ini.\n\u003c?php class CancelarService { private string $wsdlUrl; public function __construct(string $wsdlUrl) { $this-\u003ewsdlUrl = $wsdlUrl; } public function cancelar(array $params): ?object { try { $soapClient = new SoapClient($this-\u003ewsdlUrl, ['trace' =\u003e 1, 'exceptions' =\u003e true]); $response = $soapClient-\u003ecancelar2($params); return $response-\u003ereturn ?? null; } catch (Exception $e) { echo \"Error: \" . $e-\u003egetMessage(); return null; } } } // Ejemplo de uso $service = new CancelarService(\"https://dev.facturaloplus.com/ws/servicio.do?wsdl\"); $apiKey = \"TU_API_KEY_AQUI\"; $key_path = \"ruta/al/csd.key\"; $cer_path = \"ruta/al/csd.cer\"; $params = [ 'apikey' =\u003e $apiKey, 'keyCSD' =\u003e base64_encode(file_get_contents($key_path)), 'cerCSD' =\u003e base64_encode(file_get_contents($cer_path)), 'passCSD' =\u003e \"tu_contraseña\", 'uuid' =\u003e \"5FD4E09E-52F4-4A0E-8E4D-39E6B8E47168\", 'rfcEmisor' =\u003e \"ABC010101XYZ\", 'rfcReceptor' =\u003e \"XAXX010101000\", 'total' =\u003e 116.00, 'motivo' =\u003e \"02\", 'folioSustitucion'=\u003e \"\" ]; $resultado = $service-\u003ecancelar($params); header('Content-Type: text/plain'); if ($resultado \u0026\u0026 $resultado-\u003estatus === 'success') { echo \"¡Cancelación Exitosa!\\n\"; echo \"Mensaje: {$resultado-\u003emessage}\\n\"; echo \"Acuse: {$resultado-\u003edata}\\n\"; } else { echo \"Error: {$resultado-\u003ecode} - {$resultado-\u003emessage}\\n\"; } ?\u003e Respuesta (Response) El campo data contendrá el acuse de cancelación del SAT.\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cSOAP-ENV:Envelope ...\u003e \u003cSOAP-ENV:Body\u003e \u003cns1:cancelar2Response xmlns:ns1=\"urn:ws_api\"\u003e \u003creturn xsi:type=\"tns:RespuestaCancelar\"\u003e \u003ccode xsi:type=\"xsd:string\"\u003e200\u003c/code\u003e \u003cmessage xsi:type=\"xsd:string\"\u003eSolicitud de cancelación recibida\u003c/message\u003e \u003cdata xsi:type=\"xsd:string\"\u003e\u003c![CDATA[\u003cAcuse ... /\u003e]]\u003e\u003c/data\u003e \u003cstatus xsi:type=\"xsd:string\"\u003esuccess\u003c/status\u003e \u003c/return\u003e \u003c/ns1:cancelar2Response\u003e \u003c/SOAP-ENV:Body\u003e \u003c/SOAP-ENV:Envelope\u003e Códigos de respuesta Los códigos de respuesta para el timbrado de CFDI son importantes para entender el resultado de la solicitud. A continuación se detallan los códigos más comunes que puedes recibir al realizar una solicitud de timbrado a través de la API.\rCódigo\rDescripción\rDetalle\r200\rUUID Cancelado exitosamente\rSe considera una solicitud de cancelación exitosa , sin embargo esto no asegura su cancelación\r202\rUUID Previamente cancelado\rSe considera previamente cancelado. Estatus cancelado ante el SAT\r203\rUUID No corresponde el RFC del emisor y de quien solicita la cancelación\r205\rNo existe\rEl SAT da una prórroga de 72 hrs para que el comprobante aparezca con estatus Vigente posterior al envío por parte del proovedor de Certificación de CFDI. Puede que algunos comprobantes no aparezcan al momento, es necesario esperar por lo menos 72 hrs\rCA 1000\rCA 1000 - El xml proporcionado está mal formado o es inválido\rEl comprobante no corresponde a la estructura de un XML o tiene mal la estructura\rCA 2000\rCA 2000 - No fue posible cancelar el CFDI, en estos momentos existe una intermitencia en el servicio de cancelación del SAT, por favor inente más tarde, el error que regresa el SAT es:\rAdicional al mensaje se agregara el mensaje generado por el servicio SAT\rCA 2100\rCA 2100 - No fue posible cancelar el CFDI, por favor intentelo más tarde, si el problema persiste contacte a soporte técnico.\rHubo una intermitencia con el servicio del SAT y/o servicio, por favor intentelo más tarde.\rCA 3000\rCA 2300 - No fue posible cancelar el CFDI, por favor intentelo más tarde, si el problema persiste contacte a soporte técnico\rCA203\rCA203 - El UUID tiene un fallo correspondiente al emisor\rAcuse con error en Folio 203\rCA204\rCA204 - El SAT no ve que el UUID sea aplicable para cancelación\rCA205\rCA205 - El UUID no existe\rAcuse con error en folio 205\rCA300\rCA300 - La autenticación es incorrecta\rEl comprobante está mal formado, verifique los esquemas del comprobante\rCA301\rCA301 - El XML está mal formado o es incorrecto\rEl comprobante está mal formado, verifique los esquemas del comprobante\rCA302\rCA302 - Sello mal formado o inválido\rEl sello no es válido o fue alterado\rCA303\rCA303 - Sello no corresponde a emisor o caduco\rEl sello no fue generado con el certificado del emisor del comprobante\rCA304\rCA304 - Certificado revocado o caduco\rEl certificado con el que se emitió el comprobante fue revocado o se encuentra caduco\rCA305\rCA305 - La fecha de emisión no está dentro de la vigencia del CSD del Emisor\rLa fecha de emisión del comprobante no se encuentra dentro de la vigencia del certificado con cual fue sellado\rCA306\rCA306 - El certificado no es de tipo CSD\rLos comprobantes únicamente se pueden emitir y timbrar usando CSD\rCA307\rCA307 - El CFDI contiene un timbre previo\rEl comprobante ya cuenta con un complemento TFD\rCA308\rCA308 - Certificado no expedido por el SAT\rEl certificado que se utiliza para timbrar no fue generado por el SAT\rCA309\rCA309 - No existe cancelación que corresponda con el ID proporcionado\rCASD\rCASD - Acuse sin descripción específica\rCACFDI33\rCACFDI33 - Problemas con los campos\rEl error puede ser generado por varias opciones: Se está usando un Certificado FIEL en lugar de CSD, No se están enviando todos los campos necesarios.\r300\rAPI KEY Inválida o inexistente","cancelar2#cancelar2":""},"title":"cancelar2"},"/facturotas.docs/api/timbrado/":{"data":{"":"Esta sección detalla la operación del servicio de timbrado, permitiendo procesar y obtener el XML timbrado de un Comprobante Fiscal Digital (CFDI).\nTimbrado TimbradoTFD Timbrado JSON Timbrado JSON + PDF Timbrado TXT Timbrar TXT + PDF Timbrar Con Sello Timbrar Retención Timbrar Retención TFD Timbrar Sector Primario "},"title":"_index"},"/facturotas.docs/api/timbrado/timbrado/":{"data":{"endpoints-timbrado#Endpoints Timbrado":"Endpoints TimbradoEsta sección detalla la operación del servicio de timbrado, permitiendo procesar y obtener el XML timbrado de un Comprobante Fiscal Digital (CFDI).","timbrar#timbrar":"Descripción de la Operación Esta operación permite timbrar un (Comprobante Fiscal Digital por Internet) CFDI en sus versiones 3.3 o 4.0 y retornar el XML timbrado completo del comprobante fiscal junto con su folio fiscal UUID y sello digital por el SAT.\nParámetros de Entrada (Input) Parámetro Tipo de Dato Descripción apikey string Credencial de acceso al servicio (Solicita aquí). xmlCFDI string Contenido del documento XML del CFDI v3.3 o v4.0. Parámetros de Salida (Output) - RespuestaTimbrado Atributo Tipo de Dato Descripción code string Código de respuesta de la operación. message string Mensaje detallado de la respuesta. data string XML del CFDI timbrado en caso de éxito. Ejemplo de Código A continuación se presenta un ejemplo de cómo construir la solicitud y procesar la respuesta utilizando el servicio Web.\nSolicitud (Request) C#JavaPythonPHP Herramienta svcutil Descarga e instala la herramienta svcutil\nEjecuta el comando siguiente (DESARROLLO)\nsvcutil.exe https://dev.facturaloplus.com/ws/servicio.do?wsdl /out:ServicioTimbradoClient.cs /config:app.config Esto genera dos archivos: ServicioTimbradoClient.cs y la configuración en app.config\nImplementación /// Agregar los parámetros necesarios /// \u003csummary\u003e /// Genera un XML de ejemplo para un CFDI 4.0. /// En una aplicación real, este XML se construiría dinámicamente. /// \u003c/summary\u003e /// \u003creturns\u003eUn string con el contenido del CFDI.\u003c/returns\u003e private static string TimbrarCfdi() =\u003e \"\"\" \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/cfd/4 cfdv40.xsd\" Version=\"4.0\" Serie=\"F\" Folio=\"123\" Fecha=\"2025-07-02T12:00:00\" SubTotal=\"100.00\" TipoCambio=\"1.0\" Serie=\"A\" Moneda=\"MXN\" Descuento=\"0.00\" Total=\"116.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" CondicionesDePago=\"CONDICIONES\" FormaPago=\"01\" Confirmacion=\"A1234\" NoCertificado=\"30001000000300023708\" Certificado=\"\" Sello=\"\" LugarExpedicion=\"64000\"\u003e \u003ccfdi:InformacionGlobal Meses=\"18\" Año=\"2025\" Periodicidad=\"05\" /\u003e \u003ccfdi:CfdiRelacionados TipoRelacion=\"09\"\u003e \u003ccfdi:CfdiRelacionado UUID=\"ED1752FE-E865-4FF2-BFE1-0F552E770DC9\" /\u003e \u003c/cfdi:CfdiRelacionados\u003e \u003ccfdi:Emisor FacAtrAdquirente=\"0123456789\" Rfc=\"ABC010101XYZ\" Nombre=\"Empresa Ejemplo\" RegimenFiscal=\"601\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Publico en General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" ResidenciaFiscal=\"MEX\" UsoCFDI=\"G03\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ObjetoImp=\"01\" ClaveProdServ=\"01010101\" ClaveUnidad=\"C81\" NoIdentificacion=\"00001\" Cantidad=\"1.5\" Unidad=\"TONELADA\" Descripcion=\"ACERO\" ValorUnitario=\"1500000\" Importe=\"2250000\"\u003e \u003ccfdi:Impuestos\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003ccfdi:Retenciones\u003e \u003ccfdi:Retencion Base=\"2250000\" Impuesto=\"001\" TipoFactor=\"Tasa\" TasaOCuota=\"0.300000\" Importe=\"247500\"/\u003e \u003c/cfdi:Retenciones\u003e \u003c/cfdi:Impuestos\u003e \u003ccfdi:CuentaPredial Numero=\"51888\"/\u003e \u003c/cfdi:Concepto\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Impuestos TotalImpuestosRetenidos=\"247500\" TotalImpuestosTrasladados=\"360000\"\u003e \u003ccfdi:Retenciones\u003e \u003ccfdi:Retencion Impuesto=\"001\" Importe=\"247000\"/\u003e \u003ccfdi:Retencion Impuesto=\"003\" Importe=\"500\"/\u003e \u003c/cfdi:Retenciones\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"1.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"1.600000\" Importe=\"360000\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003ccfdi:Complemento\u003e\u003c/cfdi:Complemento\u003e \u003c/cfdi:Comprobante\u003e \"\"\"; /// \u003csummary\u003e /// Invoca al servicio web para timbrar un CFDI de forma asíncrona. /// \u003c/summary\u003e /// \u003cparam name=\"apiKey\"\u003eLa credencial de acceso al servicio.\u003c/param\u003e /// \u003cparam name=\"xmlCfdi\"\u003eEl contenido del CFDI a timbrar.\u003c/param\u003e /// \u003creturns\u003eUn objeto RespuestaTimbrado con el resultado de la operación.\u003c/returns\u003e public async Task\u003cRespuestaTimbrado\u003e TimbrarAsync(string apiKey, string xmlCfdi) { using var client = new ServicioTimbradoWSPortTypeClient(\"ServicioTimbradoWSPort\"); try { var response = await client.timbrarAsync(apiKey, xmlCfdi); return new RespuestaTimbrado { Code = response.code, Message = response.message, Data = response.data }; } catch (FaultException\u003cRespuestaTimbrado\u003e ex) { _logger.LogError(ex, \"Error SOAP: {Code} - {Message}\", ex.Detail.code, ex.Detail.message); throw; } catch (CommunicationException ex) { _logger.LogError(ex, \"Error de comunicación con el servicio\"); throw; } catch (TimeoutException ex) { _logger.LogError(ex, \"Timeout en la comunicación\"); throw; } } /// \u003csummary\u003e /// Define la estructura del objeto de respuesta para mayor claridad. /// \u003c/summary\u003e public class RespuestaTimbrado { public string? Code { get; set; } public string? Message { get; set; } public string? Data { get; set; } } // Ejemplo de uso de TimbrarAsync public async Task EjemploUsoTimbrarAsync() { string apiKey = \"TU_API_KEY_AQUI\"; string xmlCfdi = TimbrarCfdi(); try { var resultado = await TimbrarAsync(apiKey, xmlCfdi); if (resultado.Code == \"200\") { Console.WriteLine(\"¡Timbrado Exitoso!\"); Console.WriteLine(\"Mensaje: \" + resultado.Message); Console.WriteLine(\"--- XML Timbrado ---\"); Console.WriteLine(resultado.Data); } else { Console.WriteLine(\"Error durante el timbrado:\"); Console.WriteLine(\"Código: \" + resultado.Code); Console.WriteLine(\"Mensaje: \" + resultado.Message); } } catch (Exception ex) { Console.WriteLine(\"Ocurrió una excepción: \" + ex.Message); } } Herramienta wsimport Java incluye la herramienta wsimport en el JDK para generar las clases cliente a partir de un WSDL.\nEjecuta el siguiente comando en tu terminal para el ambiente de DESARROLLO:\nwsimport -keep -p com.facturaloplus.cliente https://dev.facturaloplus.com/ws/servicio.do?wsdl -keep: Conserva los archivos fuente .java generados.\n-p: Especifica el paquete (package) donde se guardarán las clases.\nImplementación // --- Archivo: RespuestaTimbrado.java --- package com.facturaloplus.cliente; // POJO (Plain Old Java Object) para encapsular la respuesta. public class RespuestaTimbrado { private String code; private String message; private String data; // Getters y Setters public String getCode() { return code; } public void setCode(String code) { this.code = code; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public String getData() { return data; } public void setData(String data) { this.data = data; } } // --- Archivo: TimbradoService.java --- package com.facturaloplus.cliente; import javax.xml.ws.Service; import javax.xml.ws.WebServiceException; import javax.xml.ws.soap.SOAPFaultException; import java.time.LocalDateTime; import java.time.format.DateTimeFormatter; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.logging.Level; import java.util.logging.Logger; public class TimbradoService { private static final Logger logger = Logger.getLogger(TimbradoService.class.getName()); // Se recomienda un ExecutorService para manejar los hilos de las tareas asíncronas. private final ExecutorService executor = Executors.newFixedThreadPool(5); public String generarXmlCfdiEjemplo() { // Usar la fecha y hora actual en formato UTC, requerido por el SAT. String fechaActual = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss\")); // Uso de Text Blocks (Java 15+) para el XML. // Nota: Se agregó ObjetoImp=\"02\" en el concepto, requerido en CFDI 4.0. return \"\"\" \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/cfd/4 cfdv40.xsd\" Version=\"4.0\" Serie=\"F\" Folio=\"123\" Fecha=\"%s\" SubTotal=\"100.00\" TipoCambio=\"1.0\" Serie=\"A\" Moneda=\"MXN\" Descuento=\"0.00\" Total=\"116.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" CondicionesDePago=\"CONDICIONES\" FormaPago=\"01\" Confirmacion=\"A1234\" NoCertificado=\"30001000000300023708\" Certificado=\"\" Sello=\"\" LugarExpedicion=\"64000\"\u003e \u003ccfdi:InformacionGlobal Meses=\"18\" Año=\"2025\" Periodicidad=\"05\" /\u003e \u003ccfdi:CfdiRelacionados TipoRelacion=\"09\"\u003e \u003ccfdi:CfdiRelacionado UUID=\"ED1752FE-E865-4FF2-BFE1-0F552E770DC9\" /\u003e \u003c/cfdi:CfdiRelacionados\u003e \u003ccfdi:Emisor FacAtrAdquirente=\"0123456789\" Rfc=\"ABC010101XYZ\" Nombre=\"Empresa Ejemplo\" RegimenFiscal=\"601\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Publico en General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" ResidenciaFiscal=\"MEX\" UsoCFDI=\"G03\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ObjetoImp=\"01\" ClaveProdServ=\"01010101\" ClaveUnidad=\"C81\" NoIdentificacion=\"00001\" Cantidad=\"1.5\" Unidad=\"TONELADA\" Descripcion=\"ACERO\" ValorUnitario=\"1500000\" Importe=\"2250000\"\u003e \u003ccfdi:Impuestos\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003ccfdi:Retenciones\u003e \u003ccfdi:Retencion Base=\"2250000\" Impuesto=\"001\" TipoFactor=\"Tasa\" TasaOCuota=\"0.300000\" Importe=\"247500\"/\u003e \u003c/cfdi:Retenciones\u003e \u003c/cfdi:Impuestos\u003e \u003ccfdi:CuentaPredial Numero=\"51888\"/\u003e \u003c/cfdi:Concepto\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Impuestos TotalImpuestosRetenidos=\"247500\" TotalImpuestosTrasladados=\"360000\"\u003e \u003ccfdi:Retenciones\u003e \u003ccfdi:Retencion Impuesto=\"001\" Importe=\"247000\"/\u003e \u003ccfdi:Retencion Impuesto=\"003\" Importe=\"500\"/\u003e \u003c/cfdi:Retenciones\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"1.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"1.600000\" Importe=\"360000\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003ccfdi:Complemento\u003e\u003c/cfdi:Complemento\u003e \u003c/cfdi:Comprobante\u003e \"\"\".formatted(fechaActual); } public CompletableFuture\u003cRespuestaTimbrado\u003e timbrarAsync(String apiKey, String xmlCfdi) { return CompletableFuture.supplyAsync(() -\u003e { try { // Las clases ServicioTimbradoWS y ServicioTimbradoWSPortType son generadas por wsimport. ServicioTimbradoWS service = new ServicioTimbradoWS(); ServicioTimbradoWSPortType port = service.getServicioTimbradoWSPort(); logger.info(\"Iniciando timbrado para CFDI.\"); Respuesta response = port.timbrar(apiKey, xmlCfdi); // 'Respuesta' es la clase generada por wsimport. RespuestaTimbrado resultado = new RespuestaTimbrado(); resultado.setCode(response.getCode()); resultado.setMessage(response.getMessage()); resultado.setData(response.getData()); return resultado; } catch (SOAPFaultException ex) { logger.log(Level.SEVERE, \"Error SOAP (SOAPFaultException): \" + ex.getFault().getFaultString(), ex); throw new RuntimeException(\"Error del servicio: \" + ex.getFault().getFaultString(), ex); } catch (WebServiceException ex) { logger.log(Level.SEVERE, \"Error de comunicación con el servicio de timbrado.\", ex); throw new RuntimeException(\"Error de comunicación.\", ex); } }, executor); } public void shutdown() { executor.shutdown(); } } // --- Archivo: Main.java (Ejemplo de uso) --- package com.facturaloplus.cliente; import java.util.concurrent.CompletableFuture; public class Main { public static void main(String[] args) { TimbradoService timbradoService = new TimbradoService(); // El API Key debe obtenerse de una fuente segura, no estar en el código. String miApiKey = \"TU_API_KEY_AQUI\"; String xmlParaTimbrar = timbradoService.generarXmlCfdiEjemplo(); System.out.println(\"--- Intentando timbrar el siguiente CFDI: ---\"); System.out.println(xmlParaTimbrar); System.out.println(\"------------------------------------------\"); CompletableFuture\u003cRespuestaTimbrado\u003e future = timbradoService.timbrarAsync(miApiKey, xmlParaTimbrar); future.whenComplete((resultado, ex) -\u003e { if (ex != null) { System.err.println(\"\\nOcurrió una excepción no controlada: \" + ex.getMessage()); } else { if (\"200\".equals(resultado.getCode())) { System.out.println(\"\\n¡Timbrado Exitoso!\"); System.out.println(\"Mensaje: \" + resultado.getMessage()); System.out.println(\"\\n--- XML Timbrado ---\"); System.out.println(resultado.getData()); } else { System.err.println(\"\\nError durante el timbrado:\"); System.err.println(\"Código: \" + resultado.getCode()); System.err.println(\"Mensaje: \" + resultado.getMessage()); } } // Es importante cerrar el ExecutorService cuando la aplicación termina. timbradoService.shutdown(); }); // Mantiene el programa principal vivo mientras se completa la tarea asíncrona. // En una aplicación real (ej. un servidor de aplicaciones), esto no sería necesario. future.join(); } } Herramienta Zeep Para interactuar con servicios SOAP en Python, la librería zeep es una excelente opción. Proporciona una interfaz limpia y moderna.\nInstala la librería usando pip:\npip install zeep Implementación El siguiente código muestra una implementación robusta utilizando zeep y asyncio para realizar llamadas asíncronas al servicio web.\n# --- Archivo: timbrado_service.py --- import asyncio import logging from datetime import datetime from zeep import Client from zeep.asyncio import AsyncClient from zeep.exceptions import Fault, TransportError from dataclasses import dataclass # Configuración básica de logging logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s') WSDL_URL_DESARROLLO = \"https://dev.facturaloplus.com/ws/servicio.do?wsdl\" @dataclass class RespuestaTimbrado: \"\"\"Clase de datos para encapsular la respuesta del servicio.\"\"\" code: str = None message: str = None data: str = None class TimbradoService: \"\"\"Clase que encapsula la lógica para interactuar con el servicio de timbrado.\"\"\" def __init__(self, wsdl_url: str): self.wsdl_url = wsdl_url # El cliente asíncrono se crea al momento de usarlo self.async_client = AsyncClient(self.wsdl_url) def generar_xml_cfdi_ejemplo(self) -\u003e str: \"\"\" Genera un XML de ejemplo para un CFDI 4.0. En una aplicación real, este XML se construiría dinámicamente. \"\"\" # Usar la fecha y hora actual en formato UTC, requerido por el SAT. fecha_actual = datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S') # Uso de f-strings para formatear el XML. # Nota: Se agregó ObjetoImp=\"02\" en el concepto, requerido en CFDI 4.0. return f\"\"\" \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/cfd/4 cfdv40.xsd\" Version=\"4.0\" Serie=\"F\" Folio=\"123\" Fecha=\"{fecha_actual}\" SubTotal=\"100.00\" TipoCambio=\"1.0\" Serie=\"A\" Moneda=\"MXN\" Descuento=\"0.00\" Total=\"116.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" CondicionesDePago=\"CONDICIONES\" FormaPago=\"01\" Confirmacion=\"A1234\" NoCertificado=\"30001000000300023708\" Certificado=\"\" Sello=\"\" LugarExpedicion=\"64000\"\u003e \u003ccfdi:InformacionGlobal Meses=\"18\" Año=\"2025\" Periodicidad=\"05\" /\u003e \u003ccfdi:CfdiRelacionados TipoRelacion=\"09\"\u003e \u003ccfdi:CfdiRelacionado UUID=\"ED1752FE-E865-4FF2-BFE1-0F552E770DC9\" /\u003e \u003c/cfdi:CfdiRelacionados\u003e \u003ccfdi:Emisor FacAtrAdquirente=\"0123456789\" Rfc=\"ABC010101XYZ\" Nombre=\"Empresa Ejemplo\" RegimenFiscal=\"601\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Publico en General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" ResidenciaFiscal=\"MEX\" UsoCFDI=\"G03\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ObjetoImp=\"01\" ClaveProdServ=\"01010101\" ClaveUnidad=\"C81\" NoIdentificacion=\"00001\" Cantidad=\"1.5\" Unidad=\"TONELADA\" Descripcion=\"ACERO\" ValorUnitario=\"1500000\" Importe=\"2250000\"\u003e \u003ccfdi:Impuestos\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003ccfdi:Retenciones\u003e \u003ccfdi:Retencion Base=\"2250000\" Impuesto=\"001\" TipoFactor=\"Tasa\" TasaOCuota=\"0.300000\" Importe=\"247500\"/\u003e \u003c/cfdi:Retenciones\u003e \u003c/cfdi:Impuestos\u003e \u003ccfdi:CuentaPredial Numero=\"51888\"/\u003e \u003c/cfdi:Concepto\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Impuestos TotalImpuestosRetenidos=\"247500\" TotalImpuestosTrasladados=\"360000\"\u003e \u003ccfdi:Retenciones\u003e \u003ccfdi:Retencion Impuesto=\"001\" Importe=\"247000\"/\u003e \u003ccfdi:Retencion Impuesto=\"003\" Importe=\"500\"/\u003e \u003c/cfdi:Retenciones\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"1.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"1.600000\" Importe=\"360000\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003ccfdi:Complemento\u003e\u003c/cfdi:Complemento\u003e \u003c/cfdi:Comprobante\u003e \"\"\" async def timbrar_async(self, api_key: str, xml_cfdi: str) -\u003e RespuestaTimbrado: \"\"\"Invoca al servicio web para timbrar un CFDI de forma asíncrona.\"\"\" try: logging.info(\"Iniciando timbrado para CFDI.\") # El nombre del servicio 'ServicioTimbradoWSPort' y la operación 'timbrar' # son definidos por el WSDL. response = await self.async_client.service.timbrar(apikey=api_key, xmlCFDI=xml_cfdi) # Zeep convierte la respuesta en un objeto similar a un diccionario. return RespuestaTimbrado( code=response.code, message=response.message, data=response.data ) except Fault as ex: logging.error(f\"Error SOAP (Fault): Code={ex.code}, Message={ex.message}\") raise ConnectionError(f\"Error del servicio: {ex.message}\") from ex except TransportError as ex: logging.error(f\"Error de comunicación con el servicio de timbrado: {ex}\") raise # --- Archivo: main.py (Ejemplo de uso) --- async def main(): \"\"\"Función principal para ejecutar el ejemplo.\"\"\" service = TimbradoService(WSDL_URL_DESARROLLO) # El API Key debe obtenerse de una fuente segura, no estar en el código. mi_api_key = \"TU_API_KEY_AQUI\" xml_para_timbrar = service.generar_xml_cfdi_ejemplo() print(\"--- Intentando timbrar el siguiente CFDI: ---\") print(xml_para_timbrar) print(\"------------------------------------------\") try: resultado = await service.timbrar_async(mi_api_key, xml_para_timbrar) if resultado.code == \"200\": print(\"\\033[92m\\n¡Timbrado Exitoso!\\033[0m\") # Color verde print(f\"Mensaje: {resultado.message}\") print(\"\\n--- XML Timbrado ---\") print(resultado.data) else: print(\"\\033[91m\\nError durante el timbrado:\\033[0m\") # Color rojo print(f\"Código: {resultado.code}\") print(f\"Mensaje: {resultado.message}\") except Exception as ex: print(f\"\\033[91m\\nOcurrió una excepción no controlada: {ex}\\033[0m\") if __name__ == \"__main__\": asyncio.run(main()) Herramienta SoapClient PHP tiene soporte nativo para SOAP a través de la extensión SOAP. Asegúrate de que la extensión php-soap esté habilitada en tu archivo php.ini.\nImplementación El siguiente código muestra una implementación orientada a objetos para consumir el servicio de timbrado.\n\u003c?php // --- Archivo: Timbrado.php --- // Habilitar la visualización de errores para depuración ini_set('display_errors', 1); error_reporting(E_ALL); /** * Clase DTO (Data Transfer Object) para encapsular la respuesta del servicio. */ class RespuestaTimbrado { public ?string $code = null; public ?string $message = null; public ?string $data = null; } /** * Clase que encapsula la lógica para interactuar con el servicio de timbrado. */ class TimbradoService { private string $wsdlUrl; public function __construct(string $wsdlUrl) { $this-\u003ewsdlUrl = $wsdlUrl; } /** * Genera un XML de ejemplo para un CFDI 4.0. */ public function generarXmlCfdiEjemplo(): string { // Usar la fecha y hora actual en formato UTC, requerido por el SAT. $fechaActual = gmdate('Y-m-d\\TH:i:s'); // Nota: Se agregó ObjetoImp=\"02\" en el concepto, requerido en CFDI 4.0. return \u003c\u003c\u003cXML \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/cfd/4 cfdv40.xsd\" Version=\"4.0\" Serie=\"F\" Folio=\"123\" Fecha=\"{$fechaActual}\" SubTotal=\"100.00\" TipoCambio=\"1.0\" Serie=\"A\" Moneda=\"MXN\" Descuento=\"0.00\" Total=\"116.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" CondicionesDePago=\"CONDICIONES\" FormaPago=\"01\" Confirmacion=\"A1234\" NoCertificado=\"30001000000300023708\" Certificado=\"\" Sello=\"\" LugarExpedicion=\"64000\"\u003e \u003ccfdi:InformacionGlobal Meses=\"18\" Año=\"2025\" Periodicidad=\"05\" /\u003e \u003ccfdi:CfdiRelacionados TipoRelacion=\"09\"\u003e \u003ccfdi:CfdiRelacionado UUID=\"ED1752FE-E865-4FF2-BFE1-0F552E770DC9\" /\u003e \u003c/cfdi:CfdiRelacionados\u003e \u003ccfdi:Emisor FacAtrAdquirente=\"0123456789\" Rfc=\"ABC010101XYZ\" Nombre=\"Empresa Ejemplo\" RegimenFiscal=\"601\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Publico en General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" ResidenciaFiscal=\"MEX\" UsoCFDI=\"G03\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ObjetoImp=\"01\" ClaveProdServ=\"01010101\" ClaveUnidad=\"C81\" NoIdentificacion=\"00001\" Cantidad=\"1.5\" Unidad=\"TONELADA\" Descripcion=\"ACERO\" ValorUnitario=\"1500000\" Importe=\"2250000\"\u003e \u003ccfdi:Impuestos\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003ccfdi:Retenciones\u003e \u003ccfdi:Retencion Base=\"2250000\" Impuesto=\"001\" TipoFactor=\"Tasa\" TasaOCuota=\"0.300000\" Importe=\"247500\"/\u003e \u003c/cfdi:Retenciones\u003e \u003c/cfdi:Impuestos\u003e \u003ccfdi:CuentaPredial Numero=\"51888\"/\u003e \u003c/cfdi:Concepto\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Impuestos TotalImpuestosRetenidos=\"247500\" TotalImpuestosTrasladados=\"360000\"\u003e \u003ccfdi:Retenciones\u003e \u003ccfdi:Retencion Impuesto=\"001\" Importe=\"247000\"/\u003e \u003ccfdi:Retencion Impuesto=\"003\" Importe=\"500\"/\u003e \u003c/cfdi:Retenciones\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"1.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"1.600000\" Importe=\"360000\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003ccfdi:Complemento\u003e\u003c/cfdi:Complemento\u003e \u003c/cfdi:Comprobante\u003e XML; } /** * Invoca al servicio web para timbrar un CFDI. */ public function timbrar(string $apiKey, string $xmlCfdi): RespuestaTimbrado { $respuesta = new RespuestaTimbrado(); try { // Opciones para el cliente SOAP. 'trace' es útil para depurar. $options = [ 'trace' =\u003e 1, 'exceptions' =\u003e true, // Lanza SoapFault en caso de error 'cache_wsdl' =\u003e WSDL_CACHE_NONE ]; // Crear el cliente SOAP $soapClient = new SoapClient($this-\u003ewsdlUrl, $options); // Los parámetros deben estar en un array asociativo $params = [ 'apikey' =\u003e $apiKey, 'xmlCFDI' =\u003e $xmlCfdi ]; // Llamar a la operación 'timbrar' del servicio $response = $soapClient-\u003etimbrar($params); $respuesta-\u003ecode = $response-\u003ereturn-\u003ecode ?? null; $respuesta-\u003emessage = $response-\u003ereturn-\u003emessage ?? null; $respuesta-\u003edata = $response-\u003ereturn-\u003edata ?? null; } catch (SoapFault $e) { // Capturar errores específicos de SOAP error_log(\"Error SOAP (SoapFault): \" . $e-\u003egetMessage()); $respuesta-\u003ecode = \"FAULT\"; $respuesta-\u003emessage = \"Error en la comunicación SOAP: \" . $e-\u003egetMessage(); } catch (Exception $e) { // Capturar otros errores error_log(\"Error general: \" . $e-\u003egetMessage()); $respuesta-\u003ecode = \"EXCEPTION\"; $respuesta-\u003emessage = \"Ocurrió una excepción: \" . $e-\u003egetMessage(); } return $respuesta; } } // --- Archivo: index.php (Ejemplo de uso) --- // Incluir la clase del servicio // require_once 'Timbrado.php'; $wsdlDesarrollo = \"https://dev.facturaloplus.com/ws/servicio.do?wsdl\"; $timbradoService = new TimbradoService($wsdlDesarrollo); // El API Key debe obtenerse de una fuente segura, como una variable de entorno. $miApiKey = getenv('TIMBRADO_API_KEY') ?: \"TU_API_KEY_AQUI\"; $xmlParaTimbrar = $timbradoService-\u003egenerarXmlCfdiEjemplo(); // Imprimir en formato de texto plano para una mejor visualización en consola o web header('Content-Type: text/plain; charset=utf-8'); echo \"--- Intentando timbrar el siguiente CFDI: ---\\n\"; echo $xmlParaTimbrar; echo \"\\n------------------------------------------\\n\\n\"; $resultado = $timbradoService-\u003etimbrar($miApiKey, $xmlParaTimbrar); if ($resultado-\u003ecode === '200') { echo \"¡Timbrado Exitoso!\\n\"; echo \"Mensaje: {$resultado-\u003emessage}\\n\"; echo \"\\n--- XML Timbrado ---\\n\"; echo $resultado-\u003edata; } else { echo \"Error durante el timbrado:\\n\"; echo \"Código: {$resultado-\u003ecode}\\n\"; echo \"Mensaje: {$resultado-\u003emessage}\\n\"; } ?\u003e Respuesta (Response) \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cSOAP-ENV:Envelope SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema- instance\" xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:tns=\"urn:ws_api\"\u003e \u003cSOAP-ENV:Body\u003e \u003cns1:timbrarResponse xmlns:ns1=\"urn:ws_api\"\u003e \u003creturn xsi:type=\"tns:RespuestaTimbrado\"\u003e \u003ccode xsi:type=\"xsd:string\"\u003eCÓDIGO\u003c/code\u003e \u003cmessage xsi:type=\"xsd:string\"\u003eMENSAJE\u003c/message\u003e \u003cdata xsi:type=\"xsd:string\"\u003e\u003c![CDATA[CFDI TIMBRADO]]\u003e\u003c/data\u003e \u003c/return\u003e \u003c/ns1:timbrarResponse\u003e \u003c/SOAP-ENV:Body\u003e \u003c/SOAP-ENV:Envelope\u003e Códigos de respuesta Los códigos de respuesta para el timbrado de CFDI son importantes para entender el resultado de la solicitud. A continuación se detallan los códigos más comunes que puedes recibir al realizar una solicitud de timbrado a través de la API.\rCódigo\rDescripción\r200\rSolicitud procesada con éxito\r300\rAPI KEY Inválida o inexistente\r301\rXML mal formado\r302\rEl sello del emisor no es válido\r303\rEl RFC del CSD del emisor no corresponde al RFC del Emisor\r304\rCSD del Emisor ha sido revobado\r305\rLa fecha de emisión no está dentro de la vigencia del CSD del Emisor\r306\rLa llave utilizada para sellar debe ser un CSD\r307\rEl CFDI contiene un timbre previo\r308\rEl CSD del emisor no ha sido firmado por uno de los Certificados de autoridad del SAT\r401\rEl rango de la fecha de generación no debe de ser mayor a 72 horas para la emisión del timbre\r402\rRFC del emisor no se encuentra en el régimen de contribuyentes (Lista de validación de régimen) LCO"},"title":"timbrado"},"/facturotas.docs/api/timbrado/timbradotfd/":{"data":{"#":"timbrarTFDDescripción de la Operación Esta operación permite timbrar un Comprobante Fiscal Digital por Internet (CFDI) en sus versiones 3.3 o 4.0 y, a diferencia de la operación timbrar, retorna únicamente el Timbre Fiscal Digital (TFD) como un XML independiente. Esto es útil cuando se necesita solo el TFD para procesos de validación o almacenamiento por separado.\nParámetros de Entrada (Input) Parámetro Tipo de Dato Descripción apikey string Credencial de acceso al servicio (Solicita aquí). xmlCFDI string Contenido del documento XML del CFDI v3.3 o v4.0 a timbrar. Parámetros de Salida (Output) - RespuestaTimbradoTFD Atributo Tipo de Dato Descripción code string Código de respuesta de la operación. message string Mensaje detallado de la respuesta. data string XML del Timbre Fiscal Digital (TFD) en caso de éxito. Ejemplo de Código A continuación se presenta un ejemplo de cómo construir la solicitud y procesar la respuesta utilizando el servicio Web.\nSolicitud (Request) C#JavaPythonPHP Herramienta svcutil Descarga e instala la herramienta svcutil\nEjecuta el comando siguiente (DESARROLLO)\nsvcutil.exe https://dev.facturaloplus.com/ws/servicio.do?wsdl /out:ServicioTimbradoClient.cs /config:app.config Esto genera dos archivos: ServicioTimbradoClient.cs y la configuración en app.config\nImplementación /// \u003csummary\u003e /// Genera un XML de ejemplo para un CFDI 4.0. /// En una aplicación real, este XML se construiría dinámicamente. /// \u003c/summary\u003e /// \u003creturns\u003eUn string con el contenido del CFDI.\u003c/returns\u003e private static string GenerarCfdiParaTimbrar() =\u003e \"\"\" \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/cfd/4 cfdv40.xsd\" Version=\"4.0\" Serie=\"F\" Folio=\"123\" Fecha=\"2025-07-02T12:00:00\" SubTotal=\"100.00\" TipoCambio=\"1.0\" Serie=\"A\" Moneda=\"MXN\" Descuento=\"0.00\" Total=\"116.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" CondicionesDePago=\"CONDICIONES\" FormaPago=\"01\" Confirmacion=\"A1234\" NoCertificado=\"30001000000300023708\" Certificado=\"\" Sello=\"\" LugarExpedicion=\"64000\"\u003e \u003ccfdi:InformacionGlobal Meses=\"18\" Año=\"2025\" Periodicidad=\"05\" /\u003e \u003ccfdi:CfdiRelacionados TipoRelacion=\"09\"\u003e \u003ccfdi:CfdiRelacionado UUID=\"ED1752FE-E865-4FF2-BFE1-0F552E770DC9\" /\u003e \u003c/cfdi:CfdiRelacionados\u003e \u003ccfdi:Emisor FacAtrAdquirente=\"0123456789\" Rfc=\"ABC010101XYZ\" Nombre=\"Empresa Ejemplo\" RegimenFiscal=\"601\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Publico en General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" ResidenciaFiscal=\"MEX\" UsoCFDI=\"G03\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ObjetoImp=\"01\" ClaveProdServ=\"01010101\" ClaveUnidad=\"C81\" NoIdentificacion=\"00001\" Cantidad=\"1.5\" Unidad=\"TONELADA\" Descripcion=\"ACERO\" ValorUnitario=\"1500000\" Importe=\"2250000\"\u003e \u003ccfdi:Impuestos\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003ccfdi:Retenciones\u003e \u003ccfdi:Retencion Base=\"2250000\" Impuesto=\"001\" TipoFactor=\"Tasa\" TasaOCuota=\"0.300000\" Importe=\"247500\"/\u003e \u003c/cfdi:Retenciones\u003e \u003c/cfdi:Impuestos\u003e \u003ccfdi:CuentaPredial Numero=\"51888\"/\u003e \u003c/cfdi:Concepto\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Impuestos TotalImpuestosRetenidos=\"247500\" TotalImpuestosTrasladados=\"360000\"\u003e \u003ccfdi:Retenciones\u003e \u003ccfdi:Retencion Impuesto=\"001\" Importe=\"247000\"/\u003e \u003ccfdi:Retencion Impuesto=\"003\" Importe=\"500\"/\u003e \u003c/cfdi:Retenciones\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"1.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"1.600000\" Importe=\"360000\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003ccfdi:Complemento\u003e\u003c/cfdi:Complemento\u003e \u003c/cfdi:Comprobante\u003e \"\"\"; /// \u003csummary\u003e /// Invoca al servicio web para obtener solo el TFD de un CFDI de forma asíncrona. /// \u003c/summary\u003e /// \u003cparam name=\"apiKey\"\u003eLa credencial de acceso al servicio.\u003c/param\u003e /// \u003cparam name=\"xmlCfdi\"\u003eEl contenido del CFDI a timbrar.\u003c/param\u003e /// \u003creturns\u003eUn objeto RespuestaTimbradoTFD con el resultado de la operación.\u003c/returns\u003e public async Task\u003cRespuestaTimbradoTFD\u003e TimbrarTFDAsync(string apiKey, string xmlCfdi) { using var client = new ServicioTimbradoWSPortTypeClient(\"ServicioTimbradoWSPort\"); try { // La operación se llama 'timbrarTFD' en el servicio web var response = await client.timbrarTFDAsync(apiKey, xmlCfdi); return new RespuestaTimbradoTFD { Code = response.code, Message = response.message, Data = response.data // Contiene solo el XML del TFD }; } catch (FaultException\u003cRespuestaTimbradoTFD\u003e ex) { _logger.LogError(ex, \"Error SOAP: {Code} - {Message}\", ex.Detail.code, ex.Detail.message); throw; } catch (CommunicationException ex) { _logger.LogError(ex, \"Error de comunicación con el servicio\"); throw; } catch (TimeoutException ex) { _logger.LogError(ex, \"Timeout en la comunicación\"); throw; } } /// \u003csummary\u003e /// Define la estructura del objeto de respuesta para mayor claridad. /// \u003c/summary\u003e public class RespuestaTimbradoTFD { public string? Code { get; set; } public string? Message { get; set; } public string? Data { get; set; } } // Ejemplo de uso de TimbrarTFDAsync public async Task EjemploUsoTimbrarTFDAsync() { string apiKey = \"TU_API_KEY_AQUI\"; string xmlCfdi = GenerarCfdiParaTimbrar(); try { var resultado = await TimbrarTFDAsync(apiKey, xmlCfdi); if (resultado.Code == \"200\") { Console.WriteLine(\"¡Timbrado para TFD Exitoso!\"); Console.WriteLine(\"Mensaje: \" + resultado.Message); Console.WriteLine(\"--- XML del Timbre Fiscal Digital (TFD) ---\"); Console.WriteLine(resultado.Data); } else { Console.WriteLine(\"Error durante el timbrado TFD:\"); Console.WriteLine(\"Código: \" + resultado.Code); Console.WriteLine(\"Mensaje: \" + resultado.Message); } } catch (Exception ex) { Console.WriteLine(\"Ocurrió una excepción: \" + ex.Message); } } Herramienta wsimport Java incluye la herramienta wsimport en el JDK para generar las clases cliente a partir de un WSDL.\nEjecuta el siguiente comando en tu terminal para el ambiente de DESARROLLO:\nwsimport -keep -p com.facturaloplus.cliente https://dev.facturaloplus.com/ws/servicio.do?wsdl -keep: Conserva los archivos fuente .java generados.\n-p: Especifica el paquete (package) donde se guardarán las clases.\nImplementación // --- Archivo: RespuestaTimbradoTFD.java --- package com.facturaloplus.cliente; // POJO para encapsular la respuesta de la operación timbrarTFD. public class RespuestaTimbradoTFD { private String code; private String message; private String data; // Contendrá el XML del TFD // Getters y Setters public String getCode() { return code; } public void setCode(String code) { this.code = code; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public String getData() { return data; } public void setData(String data) { this.data = data; } } // --- Archivo: TimbradoService.java --- package com.facturaloplus.cliente; import javax.xml.ws.Service; import javax.xml.ws.WebServiceException; import javax.xml.ws.soap.SOAPFaultException; import java.time.LocalDateTime; import java.time.format.DateTimeFormatter; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.logging.Level; import java.util.logging.Logger; public class TimbradoService { private static final Logger logger = Logger.getLogger(TimbradoService.class.getName()); private final ExecutorService executor = Executors.newFixedThreadPool(5); public String generarXmlCfdiEjemplo() { String fechaActual = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss\")); return \"\"\" \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/cfd/4 cfdv40.xsd\" Version=\"4.0\" Serie=\"F\" Folio=\"123\" Fecha=\"%s\" SubTotal=\"100.00\" TipoCambio=\"1.0\" Serie=\"A\" Moneda=\"MXN\" Descuento=\"0.00\" Total=\"116.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" CondicionesDePago=\"CONDICIONES\" FormaPago=\"01\" Confirmacion=\"A1234\" NoCertificado=\"30001000000300023708\" Certificado=\"\" Sello=\"\" LugarExpedicion=\"64000\"\u003e \u003ccfdi:InformacionGlobal Meses=\"18\" Año=\"2025\" Periodicidad=\"05\" /\u003e \u003ccfdi:CfdiRelacionados TipoRelacion=\"09\"\u003e \u003ccfdi:CfdiRelacionado UUID=\"ED1752FE-E865-4FF2-BFE1-0F552E770DC9\" /\u003e \u003c/cfdi:CfdiRelacionados\u003e \u003ccfdi:Emisor FacAtrAdquirente=\"0123456789\" Rfc=\"ABC010101XYZ\" Nombre=\"Empresa Ejemplo\" RegimenFiscal=\"601\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Publico en General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" ResidenciaFiscal=\"MEX\" UsoCFDI=\"G03\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ObjetoImp=\"01\" ClaveProdServ=\"01010101\" ClaveUnidad=\"C81\" NoIdentificacion=\"00001\" Cantidad=\"1.5\" Unidad=\"TONELADA\" Descripcion=\"ACERO\" ValorUnitario=\"1500000\" Importe=\"2250000\"\u003e \u003ccfdi:Impuestos\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003ccfdi:Retenciones\u003e \u003ccfdi:Retencion Base=\"2250000\" Impuesto=\"001\" TipoFactor=\"Tasa\" TasaOCuota=\"0.300000\" Importe=\"247500\"/\u003e \u003c/cfdi:Retenciones\u003e \u003c/cfdi:Impuestos\u003e \u003ccfdi:CuentaPredial Numero=\"51888\"/\u003e \u003c/cfdi:Concepto\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Impuestos TotalImpuestosRetenidos=\"247500\" TotalImpuestosTrasladados=\"360000\"\u003e \u003ccfdi:Retenciones\u003e \u003ccfdi:Retencion Impuesto=\"001\" Importe=\"247000\"/\u003e \u003ccfdi:Retencion Impuesto=\"003\" Importe=\"500\"/\u003e \u003c/cfdi:Retenciones\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"1.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"1.600000\" Importe=\"360000\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003ccfdi:Complemento\u003e\u003c/cfdi:Complemento\u003e \u003c/cfdi:Comprobante\u003e \"\"\".formatted(fechaActual); } public CompletableFuture\u003cRespuestaTimbradoTFD\u003e timbrarTFDAsync(String apiKey, String xmlCfdi) { return CompletableFuture.supplyAsync(() -\u003e { try { ServicioTimbradoWS service = new ServicioTimbradoWS(); ServicioTimbradoWSPortType port = service.getServicioTimbradoWSPort(); logger.info(\"Iniciando timbrado para obtener TFD.\"); // La clase 'Respuesta' es generada por wsimport Respuesta response = port.timbrarTFD(apiKey, xmlCfdi); RespuestaTimbradoTFD resultado = new RespuestaTimbradoTFD(); resultado.setCode(response.getCode()); resultado.setMessage(response.getMessage()); resultado.setData(response.getData()); return resultado; } catch (SOAPFaultException ex) { logger.log(Level.SEVERE, \"Error SOAP: \" + ex.getFault().getFaultString(), ex); throw new RuntimeException(\"Error del servicio: \" + ex.getFault().getFaultString(), ex); } catch (WebServiceException ex) { logger.log(Level.SEVERE, \"Error de comunicación con el servicio.\", ex); throw new RuntimeException(\"Error de comunicación.\", ex); } }, executor); } public void shutdown() { executor.shutdown(); } } // --- Archivo: Main.java (Ejemplo de uso) --- package com.facturaloplus.cliente; import java.util.concurrent.CompletableFuture; public class Main { public static void main(String[] args) { TimbradoService timbradoService = new TimbradoService(); String miApiKey = \"TU_API_KEY_AQUI\"; String xmlParaTimbrar = timbradoService.generarXmlCfdiEjemplo(); CompletableFuture\u003cRespuestaTimbradoTFD\u003e future = timbradoService.timbrarTFDAsync(miApiKey, xmlParaTimbrar); future.whenComplete((resultado, ex) -\u003e { if (ex != null) { System.err.println(\"\\nOcurrió una excepción: \" + ex.getMessage()); } else { if (\"200\".equals(resultado.getCode())) { System.out.println(\"\\n¡Timbrado para TFD Exitoso!\"); System.out.println(\"Mensaje: \" + resultado.getMessage()); System.out.println(\"\\n--- XML del Timbre Fiscal Digital (TFD) ---\"); System.out.println(resultado.getData()); } else { System.err.println(\"\\nError durante el timbrado TFD:\"); System.err.println(\"Código: \" + resultado.getCode()); System.err.println(\"Mensaje: \" + resultado.getMessage()); } } timbradoService.shutdown(); }); future.join(); } } Herramienta Zeep Instala la librería zeep usando pip:\npip install zeep Implementación # --- Archivo: timbrado_service.py --- import asyncio import logging from datetime import datetime from zeep import Client from zeep.asyncio import AsyncClient from zeep.exceptions import Fault, TransportError from dataclasses import dataclass logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s') WSDL_URL_DESARROLLO = \"https://dev.facturaloplus.com/ws/servicio.do?wsdl\" @dataclass class RespuestaTimbradoTFD: \"\"\"Clase de datos para encapsular la respuesta del servicio timbrarTFD.\"\"\" code: str = None message: str = None data: str = None # Contendrá el XML del TFD class TimbradoService: def __init__(self, wsdl_url: str): self.wsdl_url = wsdl_url self.async_client = AsyncClient(self.wsdl_url) def generar_xml_cfdi_ejemplo(self) -\u003e str: fecha_actual = datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S') return f\"\"\" \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/cfd/4 cfdv40.xsd\" Version=\"4.0\" Serie=\"F\" Folio=\"123\" Fecha=\"{fecha_actual}\" SubTotal=\"100.00\" TipoCambio=\"1.0\" Serie=\"A\" Moneda=\"MXN\" Descuento=\"0.00\" Total=\"116.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" CondicionesDePago=\"CONDICIONES\" FormaPago=\"01\" Confirmacion=\"A1234\" NoCertificado=\"30001000000300023708\" Certificado=\"\" Sello=\"\" LugarExpedicion=\"64000\"\u003e \u003ccfdi:InformacionGlobal Meses=\"18\" Año=\"2025\" Periodicidad=\"05\" /\u003e \u003ccfdi:CfdiRelacionados TipoRelacion=\"09\"\u003e \u003ccfdi:CfdiRelacionado UUID=\"ED1752FE-E865-4FF2-BFE1-0F552E770DC9\" /\u003e \u003c/cfdi:CfdiRelacionados\u003e \u003ccfdi:Emisor FacAtrAdquirente=\"0123456789\" Rfc=\"ABC010101XYZ\" Nombre=\"Empresa Ejemplo\" RegimenFiscal=\"601\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Publico en General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" ResidenciaFiscal=\"MEX\" UsoCFDI=\"G03\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ObjetoImp=\"01\" ClaveProdServ=\"01010101\" ClaveUnidad=\"C81\" NoIdentificacion=\"00001\" Cantidad=\"1.5\" Unidad=\"TONELADA\" Descripcion=\"ACERO\" ValorUnitario=\"1500000\" Importe=\"2250000\"\u003e \u003ccfdi:Impuestos\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003ccfdi:Retenciones\u003e \u003ccfdi:Retencion Base=\"2250000\" Impuesto=\"001\" TipoFactor=\"Tasa\" TasaOCuota=\"0.300000\" Importe=\"247500\"/\u003e \u003c/cfdi:Retenciones\u003e \u003c/cfdi:Impuestos\u003e \u003ccfdi:CuentaPredial Numero=\"51888\"/\u003e \u003c/cfdi:Concepto\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Impuestos TotalImpuestosRetenidos=\"247500\" TotalImpuestosTrasladados=\"360000\"\u003e \u003ccfdi:Retenciones\u003e \u003ccfdi:Retencion Impuesto=\"001\" Importe=\"247000\"/\u003e \u003ccfdi:Retencion Impuesto=\"003\" Importe=\"500\"/\u003e \u003c/cfdi:Retenciones\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"1.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"1.600000\" Importe=\"360000\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003ccfdi:Complemento\u003e\u003c/cfdi:Complemento\u003e \u003c/cfdi:Comprobante\u003e \"\"\" async def timbrar_tfd_async(self, api_key: str, xml_cfdi: str) -\u003e RespuestaTimbradoTFD: \"\"\"Invoca al servicio web para obtener solo el TFD de un CFDI.\"\"\" try: logging.info(\"Iniciando timbrado para obtener TFD.\") response = await self.async_client.service.timbrarTFD(apikey=api_key, xmlCFDI=xml_cfdi) return RespuestaTimbradoTFD( code=response.code, message=response.message, data=response.data ) except Fault as ex: logging.error(f\"Error SOAP (Fault): {ex.message}\") raise ConnectionError(f\"Error del servicio: {ex.message}\") from ex except TransportError as ex: logging.error(f\"Error de comunicación: {ex}\") raise # --- Archivo: main.py (Ejemplo de uso) --- async def main(): service = TimbradoService(WSDL_URL_DESARROLLO) mi_api_key = \"TU_API_KEY_AQUI\" xml_para_timbrar = service.generar_xml_cfdi_ejemplo() try: resultado = await service.timbrar_tfd_async(mi_api_key, xml_para_timbrar) if resultado.code == \"200\": print(\"\\033[92m\\n¡Timbrado para TFD Exitoso!\\033[0m\") print(f\"Mensaje: {resultado.message}\") print(\"\\n--- XML del Timbre Fiscal Digital (TFD) ---\") print(resultado.data) else: print(f\"\\033[91m\\nError durante el timbrado TFD:\\033[0m\") print(f\"Código: {resultado.code}\") print(f\"Mensaje: {resultado.message}\") except Exception as ex: print(f\"\\033[91m\\nOcurrió una excepción: {ex}\\033[0m\") if __name__ == \"__main__\": asyncio.run(main()) Herramienta SoapClient Asegúrate de que la extensión php-soap esté habilitada en tu php.ini.\nImplementación \u003c?php // --- Archivo: TimbradoTFD.php --- ini_set('display_errors', 1); error_reporting(E_ALL); class RespuestaTimbradoTFD { public ?string $code = null; public ?string $message = null; public ?string $data = null; // Contendrá el XML del TFD } class TimbradoService { private string $wsdlUrl; public function __construct(string $wsdlUrl) { $this-\u003ewsdlUrl = $wsdlUrl; } public function generarXmlCfdiEjemplo(): string { $fechaActual = gmdate('Y-m-d\\TH:i:s'); return \u003c\u003c\u003cXML \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/cfd/4 cfdv40.xsd\" Version=\"4.0\" Serie=\"F\" Folio=\"123\" Fecha=\"{$fechaActual}\" SubTotal=\"100.00\" TipoCambio=\"1.0\" Serie=\"A\" Moneda=\"MXN\" Descuento=\"0.00\" Total=\"116.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" CondicionesDePago=\"CONDICIONES\" FormaPago=\"01\" Confirmacion=\"A1234\" NoCertificado=\"30001000000300023708\" Certificado=\"\" Sello=\"\" LugarExpedicion=\"64000\"\u003e \u003ccfdi:InformacionGlobal Meses=\"18\" Año=\"2025\" Periodicidad=\"05\" /\u003e \u003ccfdi:CfdiRelacionados TipoRelacion=\"09\"\u003e \u003ccfdi:CfdiRelacionado UUID=\"ED1752FE-E865-4FF2-BFE1-0F552E770DC9\" /\u003e \u003c/cfdi:CfdiRelacionados\u003e \u003ccfdi:Emisor FacAtrAdquirente=\"0123456789\" Rfc=\"ABC010101XYZ\" Nombre=\"Empresa Ejemplo\" RegimenFiscal=\"601\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Publico en General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" ResidenciaFiscal=\"MEX\" UsoCFDI=\"G03\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ObjetoImp=\"01\" ClaveProdServ=\"01010101\" ClaveUnidad=\"C81\" NoIdentificacion=\"00001\" Cantidad=\"1.5\" Unidad=\"TONELADA\" Descripcion=\"ACERO\" ValorUnitario=\"1500000\" Importe=\"2250000\"\u003e \u003ccfdi:Impuestos\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003ccfdi:Retenciones\u003e \u003ccfdi:Retencion Base=\"2250000\" Impuesto=\"001\" TipoFactor=\"Tasa\" TasaOCuota=\"0.300000\" Importe=\"247500\"/\u003e \u003c/cfdi:Retenciones\u003e \u003c/cfdi:Impuestos\u003e \u003ccfdi:CuentaPredial Numero=\"51888\"/\u003e \u003c/cfdi:Concepto\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Impuestos TotalImpuestosRetenidos=\"247500\" TotalImpuestosTrasladados=\"360000\"\u003e \u003ccfdi:Retenciones\u003e \u003ccfdi:Retencion Impuesto=\"001\" Importe=\"247000\"/\u003e \u003ccfdi:Retencion Impuesto=\"003\" Importe=\"500\"/\u003e \u003c/cfdi:Retenciones\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"1.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"1.600000\" Importe=\"360000\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003ccfdi:Complemento\u003e\u003c/cfdi:Complemento\u003e \u003c/cfdi:Comprobante\u003e XML; } public function timbrarTFD(string $apiKey, string $xmlCfdi): RespuestaTimbradoTFD { $respuesta = new RespuestaTimbradoTFD(); try { $options = [ 'trace' =\u003e 1, 'exceptions' =\u003e true, 'cache_wsdl' =\u003e WSDL_CACHE_NONE ]; $soapClient = new SoapClient($this-\u003ewsdlUrl, $options); $params = [ 'apikey' =\u003e $apiKey, 'xmlCFDI' =\u003e $xmlCfdi ]; // Llamar a la operación 'timbrarTFD' $response = $soapClient-\u003etimbrarTFD($params); $respuesta-\u003ecode = $response-\u003ereturn-\u003ecode ?? null; $respuesta-\u003emessage = $response-\u003ereturn-\u003emessage ?? null; $respuesta-\u003edata = $response-\u003ereturn-\u003edata ?? null; } catch (SoapFault $e) { error_log(\"Error SOAP: \" . $e-\u003egetMessage()); $respuesta-\u003ecode = \"FAULT\"; $respuesta-\u003emessage = \"Error en la comunicación SOAP: \" . $e-\u003egetMessage(); } return $respuesta; } } // --- Archivo: index.php (Ejemplo de uso) --- // require_once 'TimbradoTFD.php'; $wsdlDesarrollo = \"https://dev.facturaloplus.com/ws/servicio.do?wsdl\"; $timbradoService = new TimbradoService($wsdlDesarrollo); $miApiKey = getenv('TIMBRADO_API_KEY') ?: \"TU_API_KEY_AQUI\"; $xmlParaTimbrar = $timbradoService-\u003egenerarXmlCfdiEjemplo(); header('Content-Type: text/plain; charset=utf-8'); $resultado = $timbradoService-\u003etimbrarTFD($miApiKey, $xmlParaTimbrar); if ($resultado-\u003ecode === '200') { echo \"¡Timbrado para TFD Exitoso!\\n\"; echo \"Mensaje: {$resultado-\u003emessage}\\n\"; echo \"\\n--- XML del Timbre Fiscal Digital (TFD) ---\\n\"; echo $resultado-\u003edata; } else { echo \"Error durante el timbrado TFD:\\n\"; echo \"Código: {$resultado-\u003ecode}\\n\"; echo \"Mensaje: {$resultado-\u003emessage}\\n\"; } ?\u003e Respuesta (Response) El campo data contendrá únicamente el XML del Timbre Fiscal Digital (TFD).\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cSOAP-ENV:Envelope SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema- instance\" xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:tns=\"urn:ws_api\"\u003e \u003cSOAP-ENV:Body\u003e \u003cns1:timbrarTFDResponse xmlns:ns1=\"urn:ws_api\"\u003e \u003creturn xsi:type=\"tns:RespuestaTimbrado\"\u003e \u003ccode xsi:type=\"xsd:string\"\u003eCÓDIGO\u003c/code\u003e \u003cmessage xsi:type=\"xsd:string\"\u003eMENSAJE\u003c/message\u003e \u003cdata xsi:type=\"xsd:string\"\u003e \u003c![CDATA[CFDI TIMBRADO]]\u003e \u003c/data\u003e \u003c/return\u003e \u003c/ns1:timbrarTFDResponse\u003e \u003c/SOAP-ENV:Body\u003e \u003c/SOAP-ENV:Envelope\u003e Códigos de respuesta Los códigos de respuesta para el timbrado de CFDI son importantes para entender el resultado de la solicitud. A continuación se detallan los códigos más comunes que puedes recibir al realizar una solicitud de timbrado a través de la API.\rCódigo\rDescripción\r200\rSolicitud procesada con éxito\r300\rAPI KEY Inválida o inexistente\r301\rXML mal formado\r302\rEl sello del emisor no es válido\r303\rEl RFC del CSD del emisor no corresponde al RFC del Emisor\r304\rCSD del Emisor ha sido revobado\r305\rLa fecha de emisión no está dentro de la vigencia del CSD del Emisor\r306\rLa llave utilizada para sellar debe ser un CSD\r307\rEl CFDI contiene un timbre previo\r308\rEl CSD del emisor no ha sido firmado por uno de los Certificados de autoridad del SAT\r401\rEl rango de la fecha de generación no debe de ser mayor a 72 horas para la emisión del timbre\r402\rRFC del emisor no se encuentra en el régimen de contribuyentes (Lista de validación de régimen) LCO","timbrartfd#timbrarTFD":""},"title":"timbradoTFD"},"/facturotas.docs/api/timbrado/timbrarconsello/":{"data":{"#":"timbrarConSelloEsta sección detalla la operación del servicio de timbrado para un CFDI que aún no ha sido sellado.\nDescripción de la Operación Esta operación está diseñada para tomar un Comprobante Fiscal Digital por Internet (CFDI) en formato XML al que le falta el atributo sello. El servicio utiliza la llave privada (.key) proporcionada para generar el sello digital, lo integra en el XML, y posteriormente realiza el timbrado ante el SAT. Como resultado, devuelve el XML completo, timbrado y sellado.\nEs ideal para escenarios donde el sistema que genera el CFDI no tiene la capacidad de crear el sello digital, delegando esta responsabilidad al servicio de timbrado.\nParámetros de Entrada (Input) Parámetro Tipo de Dato Descripción apikey string Credencial de acceso al servicio (Solicita aquí). xmlCFDI string Contenido del documento XML del CFDI (v3.3 o v4.0) sin el atributo sello. keypem string Contenido del archivo de la llave privada (.key) en formato PEM, utilizado para generar el sello del CFDI. Parámetros de Salida (Output) - RespuestaTimbrado La respuesta de esta operación es idéntica a la de la operación timbrar.\nAtributo Tipo de Dato Descripción code string Código de respuesta de la operación. message string Mensaje detallado de la respuesta. data string XML del CFDI sellado y timbrado en caso de éxito. Ejemplo de Código A continuación se presenta un ejemplo de cómo construir la solicitud y procesar la respuesta.\nSolicitud (Request) C#JavaPythonPHP Herramienta svcutil Ejecuta el comando para generar el cliente SOAP:\nsvcutil.exe https://dev.facturaloplus.com/ws/servicio.do?wsdl /out:ServicioTimbradoClient.cs /config:app.config Implementación using System; using System.IO; using System.Threading.Tasks; /// \u003csummary\u003e /// Genera un XML de ejemplo para un CFDI 4.0 sin el atributo 'sello'. /// \u003c/summary\u003e private static string GetXmlCfdiSinSello() =\u003e \"\"\" \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/cfd/4 cfdv40.xsd\" Version=\"4.0\" Serie=\"F\" Folio=\"123\" Fecha=\"2025-07-05T12:00:00\" SubTotal=\"100.00\" Moneda=\"MXN\" Total=\"116.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" FormaPago=\"01\" NoCertificado=\"30001000000300023708\" Certificado=\"MIIC...\" Sello=\"\" LugarExpedicion=\"64000\"\u003e \u003ccfdi:Emisor Rfc=\"ABC010101XYZ\" Nombre=\"Empresa Ejemplo\" RegimenFiscal=\"601\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Publico en General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" UsoCFDI=\"G03\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ObjetoImp=\"02\" ClaveProdServ=\"01010101\" ClaveUnidad=\"ACT\" Cantidad=\"1\" Descripcion=\"Servicio\" ValorUnitario=\"100.00\" Importe=\"100.00\"\u003e \u003ccfdi:Impuestos\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003c/cfdi:Concepto\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Impuestos TotalImpuestosTrasladados=\"16.00\"\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003c/cfdi:Comprobante\u003e \"\"\"; public async Task\u003cRespuestaTimbrado\u003e TimbrarConSelloAsync(string apiKey, string xmlCfdi, string keyPem) { using var client = new ServicioTimbradoWSPortTypeClient(\"ServicioTimbradoWSPort\"); try { var response = await client.timbrarConSelloAsync(apiKey, xmlCfdi, keyPem); return new RespuestaTimbrado { Code = response.code, Message = response.message, Data = response.data }; } catch (Exception ex) { // Manejo de errores Console.WriteLine($\"Error al timbrar con sello: {ex.Message}\"); throw; } } // Ejemplo de uso public async Task EjemploUsoTimbrarConSelloAsync() { string apiKey = \"TU_API_KEY_AQUI\"; string xmlCfdi = GetXmlCfdiSinSello(); string keyPem = await File.ReadAllTextAsync(\"ruta/a/tu/llave.key.pem\"); var resultado = await TimbrarConSelloAsync(apiKey, xmlCfdi, keyPem); if (resultado?.Code == \"200\") { Console.WriteLine(\"¡Timbrado con Sello Exitoso!\"); Console.WriteLine(resultado.Data); } else { Console.WriteLine($\"Error: {resultado?.Code} - {resultado?.Message}\"); } } Herramienta wsimport Ejecuta el comando para generar las clases cliente:\nwsimport -keep -p com.facturaloplus.cliente https://dev.facturaloplus.com/ws/servicio.do?wsdl Implementación import java.nio.file.Files; import java.nio.file.Paths; import java.util.concurrent.CompletableFuture; public class TimbradoConSelloService { // ... (Definición de ExecutorService, Logger, etc.) public String generarXmlCfdiSinSello() { return \"\"\" \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/cfd/4 cfdv40.xsd\" Version=\"4.0\" Serie=\"F\" Folio=\"123\" Fecha=\"2025-07-05T12:00:00\" SubTotal=\"100.00\" Moneda=\"MXN\" Total=\"116.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" FormaPago=\"01\" NoCertificado=\"30001000000300023708\" Certificado=\"MIIC...\" Sello=\"\" LugarExpedicion=\"64000\"\u003e \u003ccfdi:Emisor Rfc=\"ABC010101XYZ\" Nombre=\"Empresa Ejemplo\" RegimenFiscal=\"601\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Publico en General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" UsoCFDI=\"G03\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ObjetoImp=\"02\" ClaveProdServ=\"01010101\" ClaveUnidad=\"ACT\" Cantidad=\"1\" Descripcion=\"Servicio\" ValorUnitario=\"100.00\" Importe=\"100.00\"\u003e \u003ccfdi:Impuestos\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003c/cfdi:Concepto\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Impuestos TotalImpuestosTrasladados=\"16.00\"\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003c/cfdi:Comprobante\u003e \"\"\"; } public CompletableFuture\u003cRespuestaTimbrado\u003e timbrarConSelloAsync(String apiKey, String xmlCfdi, String keyPem) { return CompletableFuture.supplyAsync(() -\u003e { try { ServicioTimbradoWS service = new ServicioTimbradoWS(); ServicioTimbradoWSPortType port = service.getServicioTimbradoWSPort(); Respuesta response = port.timbrarConSello(apiKey, xmlCfdi, keyPem); RespuestaTimbrado resultado = new RespuestaTimbrado(); resultado.setCode(response.getCode()); resultado.setMessage(response.getMessage()); resultado.setData(response.getData()); return resultado; } catch (Exception ex) { throw new RuntimeException(\"Error al timbrar con sello\", ex); } }, executor); } // Ejemplo de uso public static void main(String[] args) { TimbradoConSelloService service = new TimbradoConSelloService(); String apiKey = \"TU_API_KEY_AQUI\"; String xmlCfdi = service.generarXmlCfdiSinSello(); try { String keyPem = new String(Files.readAllBytes(Paths.get(\"ruta/a/tu/llave.key.pem\"))); service.timbrarConSelloAsync(apiKey, xmlCfdi, keyPem).whenComplete((resultado, ex) -\u003e { if (ex != null) { System.err.println(\"Error: \" + ex.getMessage()); } else if (\"200\".equals(resultado.getCode())) { System.out.println(\"¡Timbrado con Sello Exitoso!\"); System.out.println(resultado.getData()); } else { System.err.println(\"Error: \" + resultado.getCode() + \" - \" + resultado.getMessage()); } service.shutdown(); }).join(); } catch (IOException e) { System.err.println(\"No se pudo leer el archivo de la llave PEM.\"); } } } Herramienta Zeep Instala la librería usando pip:\npip install zeep Implementación import asyncio from zeep.asyncio import AsyncClient def generar_xml_cfdi_sin_sello() -\u003e str: return \"\"\"\\ \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/cfd/4 cfdv40.xsd\" Version=\"4.0\" Serie=\"F\" Folio=\"123\" Fecha=\"2025-07-05T12:00:00\" SubTotal=\"100.00\" Moneda=\"MXN\" Total=\"116.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" FormaPago=\"01\" NoCertificado=\"30001000000300023708\" Certificado=\"MIIC...\" Sello=\"\" LugarExpedicion=\"64000\"\u003e \u003ccfdi:Emisor Rfc=\"ABC010101XYZ\" Nombre=\"Empresa Ejemplo\" RegimenFiscal=\"601\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Publico en General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" UsoCFDI=\"G03\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ObjetoImp=\"02\" ClaveProdServ=\"01010101\" ClaveUnidad=\"ACT\" Cantidad=\"1\" Descripcion=\"Servicio\" ValorUnitario=\"100.00\" Importe=\"100.00\"\u003e \u003ccfdi:Impuestos\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003c/cfdi:Concepto\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Impuestos TotalImpuestosTrasladados=\"16.00\"\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003c/cfdi:Comprobante\u003e \"\"\" class TimbradoService: def __init__(self, wsdl_url: str): self.wsdl_url = wsdl_url self.async_client = AsyncClient(self.wsdl_url) async def timbrar_con_sello_async(self, api_key: str, xml_cfdi: str, key_pem: str) -\u003e RespuestaTimbrado: response = await self.async_client.service.timbrarConSello( apikey=api_key, xmlCFDI=xml_cfdi, keypem=key_pem ) return RespuestaTimbrado( code=response.code, message=response.message, data=response.data ) async def main(): service = TimbradoService(\"https://dev.facturaloplus.com/ws/servicio.do?wsdl\") api_key = \"TU_API_KEY_AQUI\" xml_cfdi = generar_xml_cfdi_sin_sello() with open(\"ruta/a/tu/llave.key.pem\", \"r\") as f: key_pem = f.read() resultado = await service.timbrar_con_sello_async(api_key, xml_cfdi, key_pem); if resultado.code == \"200\": print(\"¡Timbrado con Sello Exitoso!\") print(resultado.data) else: print(f\"Error: {resultado.code} - {resultado.message}\") if __name__ == \"__main__\": asyncio.run(main()) Herramienta SoapClient Asegúrate de que la extensión php-soap esté habilitada en tu php.ini.\nImplementación \u003c?php function generarXmlCfdiSinSello(): string { return \u003c\u003c\u003c'XML' \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/cfd/4 cfdv40.xsd\" Version=\"4.0\" Serie=\"F\" Folio=\"123\" Fecha=\"2025-07-05T12:00:00\" SubTotal=\"100.00\" Moneda=\"MXN\" Total=\"116.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" FormaPago=\"01\" NoCertificado=\"30001000000300023708\" Certificado=\"MIIC...\" Sello=\"\" LugarExpedicion=\"64000\"\u003e \u003ccfdi:Emisor Rfc=\"ABC010101XYZ\" Nombre=\"Empresa Ejemplo\" RegimenFiscal=\"601\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Publico en General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" UsoCFDI=\"G03\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ObjetoImp=\"02\" ClaveProdServ=\"01010101\" ClaveUnidad=\"ACT\" Cantidad=\"1\" Descripcion=\"Servicio\" ValorUnitario=\"100.00\" Importe=\"100.00\"\u003e \u003ccfdi:Impuestos\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003c/cfdi:Concepto\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Impuestos TotalImpuestosTrasladados=\"16.00\"\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003c/cfdi:Comprobante\u003e XML; } class TimbradoService { private string $wsdlUrl; public function __construct(string $wsdlUrl) { $this-\u003ewsdlUrl = $wsdlUrl; } public function timbrarConSello(string $apiKey, string $xmlCfdi, string $keyPem): RespuestaTimbrado { $respuesta = new RespuestaTimbrado(); try { $soapClient = new SoapClient($this-\u003ewsdlUrl, ['trace' =\u003e 1, 'exceptions' =\u003e true]); $params = [ 'apikey' =\u003e $apiKey, 'xmlCFDI' =\u003e $xmlCfdi, 'keypem' =\u003e $keyPem ]; $response = $soapClient-\u003etimbrarConSello($params); $respuesta-\u003ecode = $response-\u003ereturn-\u003ecode ?? null; $respuesta-\u003emessage = $response-\u003ereturn-\u003emessage ?? null; $respuesta-\u003edata = $response-\u003ereturn-\u003edata ?? null; } catch (Exception $e) { $respuesta-\u003ecode = \"CLIENT_ERROR\"; $respuesta-\u003emessage = $e-\u003egetMessage(); } return $respuesta; } } // Ejemplo de uso $service = new TimbradoService(\"https://dev.facturaloplus.com/ws/servicio.do?wsdl\"); $apiKey = \"TU_API_KEY_AQUI\"; $xmlCfdi = generarXmlCfdiSinSello(); $keyPem = file_get_contents(\"ruta/a/tu/llave.key.pem\"); $resultado = $service-\u003etimbrarConSello($apiKey, $xmlCfdi, $keyPem); header('Content-Type: text/plain'); if ($resultado-\u003ecode === '200') { echo \"¡Timbrado con Sello Exitoso!\\n\"; echo $resultado-\u003edata; } else { echo \"Error: {$resultado-\u003ecode} - {$resultado-\u003emessage}\\n\"; } ?\u003e Respuesta (Response) La estructura de la respuesta SOAP es la misma que la de la operación timbrar.\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cSOAP-ENV:Envelope ...\u003e \u003cSOAP-ENV:Body\u003e \u003cns1:timbrarConSelloResponse xmlns:ns1=\"urn:ws_api\"\u003e \u003creturn xsi:type=\"tns:RespuestaTimbrado\"\u003e \u003ccode xsi:type=\"xsd:string\"\u003eCÓDIGO\u003c/code\u003e \u003cmessage xsi:type=\"xsd:string\"\u003eMENSAJE\u003c/message\u003e \u003cdata xsi:type=\"xsd:string\"\u003e\u003c![CDATA[CFDI SELLADO Y TIMBRADO]]\u003e\u003c/data\u003e \u003c/return\u003e \u003c/ns1:timbrarConSelloResponse\u003e \u003c/SOAP-ENV:Body\u003e \u003c/SOAP-ENV:Envelope\u003e Códigos de respuesta Los códigos de respuesta para el timbrado de CFDI son importantes para entender el resultado de la solicitud. A continuación se detallan los códigos más comunes que puedes recibir al realizar una solicitud de timbrado a través de la API.\rCódigo\rDescripción\r200\rSolicitud procesada con éxito\r300\rAPI KEY Inválida o inexistente\r301\rXML mal formado\r302\rEl sello del emisor no es válido\r303\rEl RFC del CSD del emisor no corresponde al RFC del Emisor\r304\rCSD del Emisor ha sido revobado\r305\rLa fecha de emisión no está dentro de la vigencia del CSD del Emisor\r306\rLa llave utilizada para sellar debe ser un CSD\r307\rEl CFDI contiene un timbre previo\r308\rEl CSD del emisor no ha sido firmado por uno de los Certificados de autoridad del SAT\r401\rEl rango de la fecha de generación no debe de ser mayor a 72 horas para la emisión del timbre\r402\rRFC del emisor no se encuentra en el régimen de contribuyentes (Lista de validación de régimen) LCO","timbrarconsello#timbrarConSello":""},"title":"timbrarConSello"},"/facturotas.docs/api/timbrado/timbrarjson/":{"data":{"#":"timbrarJSONEsta sección detalla la operación del servicio de timbrado a partir de un layout JSON, permitiendo generar, sellar y obtener el XML timbrado de un Comprobante Fiscal Digital (CFDI) sin necesidad de construir el XML manualmente.\nDescripción de la Operación Esta operación facilita la creación de un CFDI (versiones 3.3 o 4.0) a partir de un archivo JSON. El servicio se encarga de construir la estructura del XML, sellarlo con los certificados proporcionados y devolver el XML timbrado completo, junto con su folio fiscal (UUID) y el sello digital del SAT.\nParámetros de Entrada (Input) Parámetro Tipo de Dato Descripción apikey string Credencial de acceso al servicio (Solicita aquí). jsonB64 string Cadena en formato Base64 que contiene el layout JSON con la información del CFDI a generar (ver estructura abajo). Conversor Base 64 keyPEM string Contenido del archivo de la llave privada (.key) en formato PEM. cerPEM string Contenido del archivo del certificado de llave pública (.cer) en formato PEM. Parámetros de Salida (Output) - RespuestaTimbrado La respuesta de esta operación es idéntica a la de la operación timbrar.\nAtributo Tipo de Dato Descripción code string Código de respuesta de la operación. message string Mensaje detallado de la respuesta. data string XML del CFDI timbrado en caso de éxito. Estructura del JSON de Entrada El JSON enviado en el parámetro jsonB64 debe seguir la siguiente estructura. Los valores vacíos deben enviarse como \"\". Conversor Base 64\n{ \"Comprobante\": { \"Version\": \"4.0\", \"Serie\": \"\", \"Folio\": \"\", \"Fecha\": \"2025-07-04T12:00:00\", \"FormaPago\": \"01\", \"NoCertificado\": \"\", \"CondicionesDePago\": \"\", \"SubTotal\": \"100.00\", \"Descuento\": \"0.00\", \"Moneda\": \"MXN\", \"TipoCambio\": \"1\", \"Total\": \"116.00\", \"TipoDeComprobante\": \"I\", \"Exportacion\": \"01\", \"MetodoPago\": \"PUE\", \"LugarExpedicion\": \"64000\", \"Confirmacion\": \"\", \"Emisor\": { \"Rfc\": \"ABC010101XYZ\", \"Nombre\": \"Empresa Ejemplo SA de CV\", \"RegimenFiscal\": \"601\" }, \"Receptor\": { \"Rfc\": \"XAXX010101000\", \"Nombre\": \"Publico en General\", \"DomicilioFiscalReceptor\": \"64000\", \"RegimenFiscalReceptor\": \"616\", \"UsoCFDI\": \"G03\" }, \"Conceptos\": [ { \"ClaveProdServ\": \"01010101\", \"Cantidad\": \"1.0\", \"ClaveUnidad\": \"ACT\", \"Descripcion\": \"Producto de prueba\", \"ValorUnitario\": \"100.00\", \"Importe\": \"100.00\", \"ObjetoImp\": \"02\", \"Impuestos\": { \"Traslados\": [ { \"Base\": \"100.00\", \"Impuesto\": \"002\", \"TipoFactor\": \"Tasa\", \"TasaOCuota\": \"0.160000\", \"Importe\": \"16.00\" } ] } } ], \"Impuestos\": { \"TotalImpuestosTrasladados\": \"16.00\", \"Traslados\": [ { \"Base\": \"100.00\", \"Impuesto\": \"002\", \"TipoFactor\": \"Tasa\", \"TasaOCuota\": \"0.160000\", \"Importe\": \"16.00\" } ] } } } Ejemplo de Código Solicitud (Request) C#JavaPythonPHP Herramienta svcutil Descarga e instala la herramienta svcutil\nEjecuta el comando siguiente (DESARROLLO)\nsvcutil.exe https://dev.facturaloplus.com/ws/servicio.do?wsdl /out:ServicioTimbradoClient.cs /config:app.config Esto genera dos archivos: ServicioTimbradoClient.cs y la configuración en app.config\nImplementación using System; using System.IO; using System.Text; using System.Text.Json; using System.Threading.Tasks; // ... (Asegúrate de tener la referencia al cliente SOAP generado por svcutil) /// \u003csummary\u003e /// Genera dinámicamente el layout del CFDI en formato JSON. /// En una aplicación real, los valores se obtendrían de una base de datos o de la entrada del usuario. /// \u003c/summary\u003e /// \u003creturns\u003eUn string con el JSON del CFDI.\u003c/returns\u003e private static string GetJsonLayout() { // Usar un objeto anónimo para construir la estructura y luego serializarla. var cfdiLayout = new { Comprobante = new { Version = \"4.0\", Serie = \"F\", Folio = \"123\", Fecha = \"2025-07-04T12:00:00\", FormaPago = \"01\", SubTotal = \"100.00\", Moneda = \"MXN\", Total = \"116.00\", TipoDeComprobante = \"I\", Exportacion = \"01\", MetodoPago = \"PUE\", LugarExpedicion = \"64000\", Emisor = new { Rfc = \"ABC010101XYZ\", Nombre = \"Empresa Ejemplo SA de CV\", RegimenFiscal = \"601\" }, Receptor = new { Rfc = \"XAXX010101000\", Nombre = \"Publico en General\", DomicilioFiscalReceptor = \"64000\", RegimenFiscalReceptor = \"616\", UsoCFDI = \"G03\" }, Conceptos = new[] { new { ClaveProdServ = \"01010101\", Cantidad = \"1.0\", ClaveUnidad = \"ACT\", Descripcion = \"Producto de prueba\", ValorUnitario = \"100.00\", Importe = \"100.00\", ObjetoImp = \"02\", Impuestos = new { Traslados = new[] { new { Base = \"100.00\", Impuesto = \"002\", TipoFactor = \"Tasa\", TasaOCuota = \"0.160000\", Importe = \"16.00\" } } } } }, Impuestos = new { TotalImpuestosTrasladados = \"16.00\", Traslados = new[] { new { Base = \"100.00\", Impuesto = \"002\", TipoFactor = \"Tasa\", TasaOCuota = \"0.160000\", Importe = \"16.00\" } } } } }; return JsonSerializer.Serialize(cfdiLayout); } /// \u003csummary\u003e /// Prepara y codifica los datos para la operación timbrarJSON. /// \u003c/summary\u003e public async Task\u003cRespuestaTimbrado\u003e TimbrarJsonAsync(string apiKey, string jsonLayout, string keyPemPath, string cerPemPath) { // 1. Codificar el JSON a Base64 var jsonBytes = Encoding.UTF8.GetBytes(jsonLayout); var jsonB64 = Convert.ToBase64String(jsonBytes); // 2. Leer el contenido de los archivos PEM var keyPem = await File.ReadAllTextAsync(keyPemPath); var cerPem = await File.ReadAllTextAsync(cerPemPath); // 3. Invocar al servicio web using var client = new ServicioTimbradoWSPortTypeClient(\"ServicioTimbradoWSPort\"); try { // Asumiendo que la operación en el WSDL se llama 'timbrarJSON' var response = await client.timbrarJSONAsync(apiKey, jsonB64, keyPem, cerPem); return new RespuestaTimbrado { Code = response.code, Message = response.message, Data = response.data }; } catch (Exception ex) { // Manejo de errores (FaultException, etc.) Console.WriteLine($\"Error al timbrar con JSON: {ex.Message}\"); throw; } } // Ejemplo de uso public async Task EjemploUsoTimbrarJsonAsync() { string apiKey = \"TU_API_KEY_AQUI\"; string jsonLayout = GetJsonLayout(); // Carga el layout dinámicamente string keyPemFile = \"ruta/a/tu/llave.key.pem\"; string cerPemFile = \"ruta/a/tu/certificado.cer.pem\"; var resultado = await TimbrarJsonAsync(apiKey, jsonLayout, keyPemFile, cerPemFile); if (resultado?.Code == \"200\") { Console.WriteLine(\"¡Timbrado con JSON Exitoso!\"); Console.WriteLine(resultado.Data); } else { Console.WriteLine($\"Error: {resultado?.Code} - {resultado?.Message}\"); } } Herramienta wsimport Java incluye la herramienta wsimport en el JDK para generar las clases cliente a partir de un WSDL.\nEjecuta el siguiente comando en tu terminal para el ambiente de DESARROLLO:\nwsimport -keep -p com.facturaloplus.cliente https://dev.facturaloplus.com/ws/servicio.do?wsdl -keep: Conserva los archivos fuente .java generados.\n-p: Especifica el paquete (package) donde se guardarán las clases.\nImplementación import java.nio.charset.StandardCharsets; import java.nio.file.Files; import java.nio.file.Paths; import java.util.Base64; import java.util.concurrent.CompletableFuture; // ... (Asegúrate de tener las clases generadas por wsimport) public class TimbradoJsonService { // ... (Definición de ExecutorService y Logger) /** * Genera dinámicamente el layout del CFDI en formato JSON. * En una aplicación real, los valores se obtendrían de una base de datos o de la entrada del usuario. * Se recomienda usar una librería como Gson o Jackson para construir el JSON de forma más robusta. */ public static String getJsonLayout() { // Usamos un Text Block de Java 15+ para legibilidad. return \"\"\" { \"Comprobante\": { \"Version\": \"4.0\", \"Serie\": \"F\", \"Folio\": \"123\", \"Fecha\": \"2025-07-04T12:00:00\", \"FormaPago\": \"01\", \"SubTotal\": \"100.00\", \"Moneda\": \"MXN\", \"Total\": \"116.00\", \"TipoDeComprobante\": \"I\", \"Exportacion\": \"01\", \"MetodoPago\": \"PUE\", \"LugarExpedicion\": \"64000\", \"Emisor\": { \"Rfc\": \"ABC010101XYZ\", \"Nombre\": \"Empresa Ejemplo SA de CV\", \"RegimenFiscal\": \"601\" }, \"Receptor\": { \"Rfc\": \"XAXX010101000\", \"Nombre\": \"Publico en General\", \"DomicilioFiscalReceptor\": \"64000\", \"RegimenFiscalReceptor\": \"616\", \"UsoCFDI\": \"G03\" }, \"Conceptos\": [ { \"ClaveProdServ\": \"01010101\", \"Cantidad\": \"1.0\", \"ClaveUnidad\": \"ACT\", \"Descripcion\": \"Producto de prueba\", \"ValorUnitario\": \"100.00\", \"Importe\": \"100.00\", \"ObjetoImp\": \"02\", \"Impuestos\": { \"Traslados\": [ { \"Base\": \"100.00\", \"Impuesto\": \"002\", \"TipoFactor\": \"Tasa\", \"TasaOCuota\": \"0.160000\", \"Importe\": \"16.00\" } ] } } ], \"Impuestos\": { \"TotalImpuestosTrasladados\": \"16.00\", \"Traslados\": [ { \"Base\": \"100.00\", \"Impuesto\": \"002\", \"TipoFactor\": \"Tasa\", \"TasaOCuota\": \"0.160000\", \"Importe\": \"16.00\" } ] } } } \"\"\"; } public CompletableFuture\u003cRespuestaTimbrado\u003e timbrarJsonAsync(String apiKey, String jsonLayout, String keyPemPath, String cerPemPath) { return CompletableFuture.supplyAsync(() -\u003e { try { // 1. Codificar JSON a Base64 String jsonB64 = Base64.getEncoder().encodeToString(jsonLayout.getBytes(StandardCharsets.UTF_8)); // 2. Leer archivos PEM String keyPem = new String(Files.readAllBytes(Paths.get(keyPemPath))); String cerPem = new String(Files.readAllBytes(Paths.get(cerPemPath))); // 3. Llamar al servicio ServicioTimbradoWS service = new ServicioTimbradoWS(); ServicioTimbradoWSPortType port = service.getServicioTimbradoWSPort(); // Asumiendo que la operación se llama 'timbrarJSON' Respuesta response = port.timbrarJSON(apiKey, jsonB64, keyPem, cerPem); RespuestaTimbrado resultado = new RespuestaTimbrado(); resultado.setCode(response.getCode()); resultado.setMessage(response.getMessage()); resultado.setData(response.getData()); return resultado; } catch (Exception ex) { // Manejo de errores throw new RuntimeException(\"Error al timbrar con JSON\", ex); } }, executor); } // Ejemplo de uso public static void main(String[] args) { TimbradoJsonService service = new TimbradoJsonService(); String apiKey = \"TU_API_KEY_AQUI\"; String keyPem = \"ruta/a/tu/llave.key.pem\"; String cerPem = \"ruta/a/tu/certificado.cer.pem\"; String jsonLayout = getJsonLayout(); // Carga el layout dinámicamente service.timbrarJsonAsync(apiKey, jsonLayout, keyPem, cerPem) .whenComplete((resultado, ex) -\u003e { if (ex != null) { System.err.println(\"Error: \" + ex.getMessage()); } else if (\"200\".equals(resultado.getCode())) { System.out.println(\"¡Timbrado con JSON Exitoso!\"); System.out.println(resultado.getData()); } else { System.err.println(\"Error: \" + resultado.getCode() + \" - \" + resultado.getMessage()); } service.shutdown(); }).join(); } } Herramienta Zeep Para interactuar con servicios SOAP en Python, la librería zeep es una excelente opción. Proporciona una interfaz limpia y moderna.\nInstala la librería usando pip:\npip install zeep Implementación import asyncio import base64 import json from zeep.asyncio import AsyncClient # ... (Definición de RespuestaTimbrado y configuración de logging) def get_json_layout() -\u003e dict: \"\"\" Genera dinámicamente el layout del CFDI como un diccionario de Python. En una aplicación real, los valores se obtendrían de una base de datos o de la entrada del usuario. \"\"\" return { \"Comprobante\": { \"Version\": \"4.0\", \"Serie\": \"F\", \"Folio\": \"123\", \"Fecha\": \"2025-07-04T12:00:00\", \"FormaPago\": \"01\", \"SubTotal\": \"100.00\", \"Moneda\": \"MXN\", \"Total\": \"116.00\", \"TipoDeComprobante\": \"I\", \"Exportacion\": \"01\", \"MetodoPago\": \"PUE\", \"LugarExpedicion\": \"64000\", \"Emisor\": { \"Rfc\": \"ABC010101XYZ\", \"Nombre\": \"Empresa Ejemplo SA de CV\", \"RegimenFiscal\": \"601\" }, \"Receptor\": { \"Rfc\": \"XAXX010101000\", \"Nombre\": \"Publico en General\", \"DomicilioFiscalReceptor\": \"64000\", \"RegimenFiscalReceptor\": \"616\", \"UsoCFDI\": \"G03\" }, \"Conceptos\": [ { \"ClaveProdServ\": \"01010101\", \"Cantidad\": \"1.0\", \"ClaveUnidad\": \"ACT\", \"Descripcion\": \"Producto de prueba\", \"ValorUnitario\": \"100.00\", \"Importe\": \"100.00\", \"ObjetoImp\": \"02\", \"Impuestos\": { \"Traslados\": [ { \"Base\": \"100.00\", \"Impuesto\": \"002\", \"TipoFactor\": \"Tasa\", \"TasaOCuota\": \"0.160000\", \"Importe\": \"16.00\" } ] } } ], \"Impuestos\": { \"TotalImpuestosTrasladados\": \"16.00\", \"Traslados\": [ { \"Base\": \"100.00\", \"Impuesto\": \"002\", \"TipoFactor\": \"Tasa\", \"TasaOCuota\": \"0.160000\", \"Importe\": \"16.00\" } ] } } } class TimbradoJsonService: def __init__(self, wsdl_url: str): self.wsdl_url = wsdl_url self.async_client = AsyncClient(self.wsdl_url) async def timbrar_json_async(self, api_key: str, json_layout: dict, key_pem_path: str, cer_pem_path: str) -\u003e RespuestaTimbrado: try: # 1. Convertir dict a JSON string y luego a Base64 json_str = json.dumps(json_layout) json_b64 = base64.b64encode(json_str.encode('utf-8')).decode('utf-8') # 2. Leer archivos PEM with open(key_pem_path, 'r') as f: key_pem = f.read() with open(cer_pem_path, 'r') as f: cer_pem = f.read() # 3. Llamar al servicio # Asumiendo que la operación se llama 'timbrarJSON' response = await self.async_client.service.timbrarJSON( apikey=api_key, jsonB64=json_b64, keyPEM=key_pem, cerPEM=cer_pem ) return RespuestaTimbrado( code=response.code, message=response.message, data=response.data ) except Exception as e: logging.error(f\"Error al timbrar con JSON: {e}\") raise # Ejemplo de uso async def main(): service = TimbradoJsonService(\"https://dev.facturaloplus.com/ws/servicio.do?wsdl\") api_key = \"TU_API_KEY_AQUI\"; key_pem = \"ruta/a/tu/llave.key.pem\"; cer_pem = \"ruta/a/tu/certificado.cer.pem\"; layout = get_json_layout(); // Carga el layout dinámicamente resultado = await service.timbrar_json_async(api_key, layout, key_pem, cer_pem); if resultado.code == \"200\": print(\"¡Timbrado con JSON Exitoso!\"); print(resultado.data); else: print(f\"Error: {resultado.code} - {resultado.message}\"); if __name__ == \"__main__\": asyncio.run(main()); Herramienta SoapClient PHP tiene soporte nativo para SOAP a través de la extensión SOAP. Asegúrate de que la extensión php-soap esté habilitada en tu archivo php.ini.\nImplementación \u003c?php // ... (Definición de la clase RespuestaTimbrado) /** * Genera dinámicamente el layout del CFDI como un string JSON. * En una aplicación real, los valores se obtendrían de una base de datos * o se construiría un array asociativo y se convertiría con json_encode. */ function getJsonLayout(): string { return \u003c\u003c\u003cJSON { \"Comprobante\": { \"Version\": \"4.0\", \"Serie\": \"F\", \"Folio\": \"123\", \"Fecha\": \"2025-07-04T12:00:00\", \"FormaPago\": \"01\", \"SubTotal\": \"100.00\", \"Moneda\": \"MXN\", \"Total\": \"116.00\", \"TipoDeComprobante\": \"I\", \"Exportacion\": \"01\", \"MetodoPago\": \"PUE\", \"LugarExpedicion\": \"64000\", \"Emisor\": { \"Rfc\": \"ABC010101XYZ\", \"Nombre\": \"Empresa Ejemplo SA de CV\", \"RegimenFiscal\": \"601\" }, \"Receptor\": { \"Rfc\": \"XAXX010101000\", \"Nombre\": \"Publico en General\", \"DomicilioFiscalReceptor\": \"64000\", \"RegimenFiscalReceptor\": \"616\", \"UsoCFDI\": \"G03\" }, \"Conceptos\": [ { \"ClaveProdServ\": \"01010101\", \"Cantidad\": \"1.0\", \"ClaveUnidad\": \"ACT\", \"Descripcion\": \"Producto de prueba\", \"ValorUnitario\": \"100.00\", \"Importe\": \"100.00\", \"ObjetoImp\": \"02\", \"Impuestos\": { \"Traslados\": [ { \"Base\": \"100.00\", \"Impuesto\": \"002\", \"TipoFactor\": \"Tasa\", \"TasaOCuota\": \"0.160000\", \"Importe\": \"16.00\" } ] } } ], \"Impuestos\": { \"TotalImpuestosTrasladados\": \"16.00\", \"Traslados\": [ { \"Base\": \"100.00\", \"Impuesto\": \"002\", \"TipoFactor\": \"Tasa\", \"TasaOCuota\": \"0.160000\", \"Importe\": \"16.00\" } ] } } } JSON; } class TimbradoJsonService { private string $wsdlUrl; public function __construct(string $wsdlUrl) { $this-\u003ewsdlUrl = $wsdlUrl; } public function timbrarJson(string $apiKey, string $jsonLayout, string $keyPemPath, string $cerPemPath): RespuestaTimbrado { $respuesta = new RespuestaTimbrado(); try { // 1. Codificar JSON a Base64 $jsonB64 = base64_encode($jsonLayout); // 2. Leer archivos PEM $keyPem = file_get_contents($keyPemPath); $cerPem = file_get_contents($cerPemPath); if ($keyPem === false || $cerPem === false) { throw new Exception(\"No se pudieron leer los archivos .pem\"); } // 3. Llamar al servicio $soapClient = new SoapClient($this-\u003ewsdlUrl, ['trace' =\u003e 1, 'exceptions' =\u003e true]); $params = [ 'apikey' =\u003e $apiKey, 'jsonB64' =\u003e $jsonB64, 'keyPEM' =\u003e $keyPem, 'cerPEM' =\u003e $cerPem ]; // Asumiendo que la operación se llama 'timbrarJSON' $response = $soapClient-\u003etimbrarJSON($params); $respuesta-\u003ecode = $response-\u003ereturn-\u003ecode ?? null; $respuesta-\u003emessage = $response-\u003ereturn-\u003emessage ?? null; $respuesta-\u003edata = $response-\u003ereturn-\u003edata ?? null; } catch (Exception $e) { $respuesta-\u003ecode = \"CLIENT_ERROR\"; $respuesta-\u003emessage = $e-\u003egetMessage(); } return $respuesta; } } // Ejemplo de uso $service = new TimbradoJsonService(\"https://dev.facturaloplus.com/ws/servicio.do?wsdl\"); $apiKey = \"TU_API_KEY_AQUI\"; $keyPem = \"ruta/a/tu/llave.key.pem\"; $cerPem = \"ruta/a/tu/certificado.cer.pem\"; $jsonLayout = getJsonLayout(); // Carga el layout dinámicamente $resultado = $service-\u003etimbrarJson($apiKey, $jsonLayout, $keyPem, $cerPem); header('Content-Type: text/plain'); if ($resultado-\u003ecode === '200') { echo \"¡Timbrado con JSON Exitoso!\\n\"; echo $resultado-\u003edata; } else { echo \"Error: {$resultado-\u003ecode} - {$resultado-\u003emessage}\\n\"; } ?\u003e Respuesta (Response) La estructura de la respuesta SOAP es la misma que la de la operación timbrar. El contenido de la etiqueta data será el XML del CFDI timbrado.\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cSOAP-ENV:Envelope ...\u003e \u003cSOAP-ENV:Body\u003e \u003cns1:timbrarJSONResponse xmlns:ns1=\"urn:ws_api\"\u003e \u003creturn xsi:type=\"tns:RespuestaTimbrado\"\u003e \u003ccode xsi:type=\"xsd:string\"\u003eCÓDIGO\u003c/code\u003e \u003cmessage xsi:type=\"xsd:string\"\u003eMENSAJE\u003c/message\u003e \u003cdata xsi:type=\"xsd:string\"\u003e\u003c![CDATA[CFDI TIMBRADO]]\u003e\u003c/data\u003e \u003c/return\u003e \u003c/ns1:timbrarJSONResponse\u003e \u003c/SOAP-ENV:Body\u003e \u003c/SOAP-ENV:Envelope\u003e Códigos de respuesta Los códigos de respuesta para el timbrado de CFDI son importantes para entender el resultado de la solicitud. A continuación se detallan los códigos más comunes que puedes recibir al realizar una solicitud de timbrado a través de la API.\rCódigo\rDescripción\r200\rSolicitud procesada con éxito\r300\rAPI KEY Inválida o inexistente\r301\rXML mal formado\r302\rEl sello del emisor no es válido\r303\rEl RFC del CSD del emisor no corresponde al RFC del Emisor\r304\rCSD del Emisor ha sido revobado\r305\rLa fecha de emisión no está dentro de la vigencia del CSD del Emisor\r306\rLa llave utilizada para sellar debe ser un CSD\r307\rEl CFDI contiene un timbre previo\r308\rEl CSD del emisor no ha sido firmado por uno de los Certificados de autoridad del SAT\r401\rEl rango de la fecha de generación no debe de ser mayor a 72 horas para la emisión del timbre\r402\rRFC del emisor no se encuentra en el régimen de contribuyentes (Lista de validación de régimen) LCO","timbrarjson#timbrarJSON":""},"title":"timbrarJSON"},"/facturotas.docs/api/timbrado/timbrarjson2/":{"data":{"#":"timbrarJSON2Esta operación extiende la funcionalidad de timbrarJSON, permitiendo no solo generar y timbrar un CFDI a partir de un layout JSON, sino también obtener una representación en formato PDF del comprobante utilizando una plantilla predefinida.\nDescripción de la Operación Esta operación toma un layout JSON, lo convierte en un CFDI (versión 3.3 o 4.0), lo sella con los certificados proporcionados y lo timbra. Como resultado, devuelve una estructura JSON que contiene tanto el XML del CFDI timbrado como el contenido del PDF generado en formato Base64.\nParámetros de Entrada (Input) Parámetro Tipo de Dato Descripción apikey string Credencial de acceso al servicio (Solicita aquí). jsonB64 string Cadena en formato Base64 que contiene el layout JSON con la información del CFDI a generar. Conversor Base 64 keyPEM string Contenido del archivo de la llave privada (.key) en formato PEM. cerPEM string Contenido del archivo del certificado de llave pública (.cer) en formato PEM. plantilla string Identificador numérico de la plantilla a utilizar para la generación del PDF. Parámetros de Salida (Output) - RespuestaTimbrado Atributo Tipo de Dato Descripción code string Código de respuesta de la operación. message string Mensaje detallado de la respuesta. data string JSON string que contiene el XML del CFDI timbrado y el contenido del PDF en Base64. Debe ser decodificado para acceder a sus valores. Estructura del JSON de Entrada El JSON enviado en el parámetro jsonB64 debe seguir la siguiente estructura. Los valores vacíos deben enviarse como \"\". Conversor Base 64\n{ \"Comprobante\": { \"Version\": \"4.0\", \"Serie\": \"\", \"Folio\": \"\", \"Fecha\": \"2025-07-04T12:00:00\", \"FormaPago\": \"01\", \"NoCertificado\": \"\", \"CondicionesDePago\": \"\", \"SubTotal\": \"100.00\", \"Descuento\": \"0.00\", \"Moneda\": \"MXN\", \"TipoCambio\": \"1\", \"Total\": \"116.00\", \"TipoDeComprobante\": \"I\", \"Exportacion\": \"01\", \"MetodoPago\": \"PUE\", \"LugarExpedicion\": \"64000\", \"Confirmacion\": \"\", \"Emisor\": { \"Rfc\": \"ABC010101XYZ\", \"Nombre\": \"Empresa Ejemplo SA de CV\", \"RegimenFiscal\": \"601\" }, \"Receptor\": { \"Rfc\": \"XAXX010101000\", \"Nombre\": \"Publico en General\", \"DomicilioFiscalReceptor\": \"64000\", \"RegimenFiscalReceptor\": \"616\", \"UsoCFDI\": \"G03\" }, \"Conceptos\": [ { \"ClaveProdServ\": \"01010101\", \"Cantidad\": \"1.0\", \"ClaveUnidad\": \"ACT\", \"Descripcion\": \"Producto de prueba\", \"ValorUnitario\": \"100.00\", \"Importe\": \"100.00\", \"ObjetoImp\": \"02\", \"Impuestos\": { \"Traslados\": [ { \"Base\": \"100.00\", \"Impuesto\": \"002\", \"TipoFactor\": \"Tasa\", \"TasaOCuota\": \"0.160000\", \"Importe\": \"16.00\" } ] } } ], \"Impuestos\": { \"TotalImpuestosTrasladados\": \"16.00\", \"Traslados\": [ { \"Base\": \"100.00\", \"Impuesto\": \"002\", \"TipoFactor\": \"Tasa\", \"TasaOCuota\": \"0.160000\", \"Importe\": \"16.00\" } ] } } } Ejemplo de Código C#JavaPythonPHP Herramienta svcutil Descarga e instala la herramienta svcutil\nEjecuta el comando siguiente (DESARROLLO)\nsvcutil.exe https://dev.facturaloplus.com/ws/servicio.do?wsdl /out:ServicioTimbradoClient.cs /config:app.config Esto genera dos archivos: ServicioTimbradoClient.cs y la configuración en app.config\nImplementación // Se requiere la librería System.Text.Json using System.Text.Json; /// \u003csummary\u003e /// Genera dinámicamente el layout del CFDI en formato JSON. /// En una aplicación real, los valores se obtendrían de una base de datos o de la entrada del usuario. /// \u003c/summary\u003e /// \u003creturns\u003eUn string con el JSON del CFDI.\u003c/returns\u003e private static string GetJsonLayout() { // Usar un objeto anónimo para construir la estructura y luego serializarla. var cfdiLayout = new { Comprobante = new { Version = \"4.0\", Serie = \"F\", Folio = \"123\", Fecha = \"2025-07-04T12:00:00\", FormaPago = \"01\", SubTotal = \"100.00\", Moneda = \"MXN\", Total = \"116.00\", TipoDeComprobante = \"I\", Exportacion = \"01\", MetodoPago = \"PUE\", LugarExpedicion = \"64000\", Emisor = new { Rfc = \"ABC010101XYZ\", Nombre = \"Empresa Ejemplo SA de CV\", RegimenFiscal = \"601\" }, Receptor = new { Rfc = \"XAXX010101000\", Nombre = \"Publico en General\", DomicilioFiscalReceptor = \"64000\", RegimenFiscalReceptor = \"616\", UsoCFDI = \"G03\" }, Conceptos = new[] { new { ClaveProdServ = \"01010101\", Cantidad = \"1.0\", ClaveUnidad = \"ACT\", Descripcion = \"Producto de prueba\", ValorUnitario = \"100.00\", Importe = \"100.00\", ObjetoImp = \"02\", Impuestos = new { Traslados = new[] { new { Base = \"100.00\", Impuesto = \"002\", TipoFactor = \"Tasa\", TasaOCuota = \"0.160000\", Importe = \"16.00\" } } } } }, Impuestos = new { TotalImpuestosTrasladados = \"16.00\", Traslados = new[] { new { Base = \"100.00\", Impuesto = \"002\", TipoFactor = \"Tasa\", TasaOCuota = \"0.160000\", Importe = \"16.00\" } } } } }; return JsonSerializer.Serialize(cfdiLayout); } // Clase para deserializar la respuesta en el campo 'data' public class RespuestaData { public string Xml { get; set; } public string Pdf { get; set; } } public async Task\u003cRespuestaTimbrado\u003e TimbrarJson2Async(string apiKey, string jsonLayout, string keyPem, string cerPem, string plantilla) { var jsonB64 = Convert.ToBase64String(Encoding.UTF8.GetBytes(jsonLayout)); using var client = new ServicioTimbradoWSPortTypeClient(\"ServicioTimbradoWSPort\"); // Asumiendo que la operación se llama 'timbrarJSON2' var response = await client.timbrarJSON2Async(apiKey, jsonB64, keyPem, cerPem, plantilla); return new RespuestaTimbrado { Code = response.code, Message = response.message, Data = response.data }; } // Ejemplo de uso public async Task EjemploUsoTimbrarJson2Async() { string apiKey = \"TU_API_KEY_AQUI\"; string jsonLayout = GetJsonLayout(); // Generación dinámica string keyPem = File.ReadAllText(\"ruta/a/llave.key.pem\"); string cerPem = File.ReadAllText(\"ruta/a/certificado.cer.pem\"); string plantilla = \"1\"; // ID de la plantilla a usar var resultado = await TimbrarJson2Async(apiKey, jsonLayout, keyPem, cerPem, plantilla); if (resultado?.Code == \"200\" \u0026\u0026 !string.IsNullOrEmpty(resultado.Data)) { Console.WriteLine(\"¡Timbrado con JSON y PDF Exitoso!\"); // Deserializar el JSON de la respuesta var respuestaData = JsonSerializer.Deserialize\u003cRespuestaData\u003e(resultado.Data); Console.WriteLine(\"--- XML Timbrado ---\"); Console.WriteLine(respuestaData.Xml); // Guardar el PDF var pdfBytes = Convert.FromBase64String(respuestaData.Pdf); File.WriteAllBytes(\"comprobante.pdf\", pdfBytes); Console.WriteLine(\"\\nPDF guardado como comprobante.pdf\"); } else { Console.WriteLine($\"Error: {resultado?.Code} - {resultado?.Message}\"); } } Herramienta wsimport Java incluye la herramienta wsimport en el JDK para generar las clases cliente a partir de un WSDL.\nEjecuta el siguiente comando en tu terminal para el ambiente de DESARROLLO:\nwsimport -keep -p com.facturaloplus.cliente https://dev.facturaloplus.com/ws/servicio.do?wsdl -keep: Conserva los archivos fuente .java generados.\n-p: Especifica el paquete (package) donde se guardarán las clases.\nImplementación // Se recomienda usar una librería como Gson o Jackson para parsear el JSON de respuesta. // import com.google.gson.Gson; /** * Genera dinámicamente el layout del CFDI en formato JSON. */ public static String getJsonLayout() { // Usamos un Text Block de Java 15+ para legibilidad. return \"\"\" { \"Comprobante\": { \"Version\": \"4.0\", \"Serie\": \"F\", \"Folio\": \"123\", \"Fecha\": \"2025-07-04T12:00:00\", \"FormaPago\": \"01\", \"SubTotal\": \"100.00\", \"Moneda\": \"MXN\", \"Total\": \"116.00\", \"TipoDeComprobante\": \"I\", \"Exportacion\": \"01\", \"MetodoPago\": \"PUE\", \"LugarExpedicion\": \"64000\", \"Emisor\": { \"Rfc\": \"ABC010101XYZ\", \"Nombre\": \"Empresa Ejemplo SA de CV\", \"RegimenFiscal\": \"601\" }, \"Receptor\": { \"Rfc\": \"XAXX010101000\", \"Nombre\": \"Publico en General\", \"DomicilioFiscalReceptor\": \"64000\", \"RegimenFiscalReceptor\": \"616\", \"UsoCFDI\": \"G03\" }, \"Conceptos\": [ { \"ClaveProdServ\": \"01010101\", \"Cantidad\": \"1.0\", \"ClaveUnidad\": \"ACT\", \"Descripcion\": \"Producto de prueba\", \"ValorUnitario\": \"100.00\", \"Importe\": \"100.00\", \"ObjetoImp\": \"02\", \"Impuestos\": { \"Traslados\": [ { \"Base\": \"100.00\", \"Impuesto\": \"002\", \"TipoFactor\": \"Tasa\", \"TasaOCuota\": \"0.160000\", \"Importe\": \"16.00\" } ] } } ], \"Impuestos\": { \"TotalImpuestosTrasladados\": \"16.00\", \"Traslados\": [ { \"Base\": \"100.00\", \"Impuesto\": \"002\", \"TipoFactor\": \"Tasa\", \"TasaOCuota\": \"0.160000\", \"Importe\": \"16.00\" } ] } } } \"\"\"; } // Clase para mapear el JSON en el campo 'data' class RespuestaData { String xml; String pdf; } public CompletableFuture\u003cRespuestaTimbrado\u003e timbrarJson2Async(String apiKey, String jsonLayout, String keyPem, String cerPem, String plantilla) { return CompletableFuture.supplyAsync(() -\u003e { try { String jsonB64 = Base64.getEncoder().encodeToString(jsonLayout.getBytes(StandardCharsets.UTF_8)); ServicioTimbradoWSPortType port = new ServicioTimbradoWS().getServicioTimbradoWSPort(); // Asumiendo que la operación se llama 'timbrarJSON2' Respuesta response = port.timbrarJSON2(apiKey, jsonB64, keyPem, cerPem, plantilla); RespuestaTimbrado resultado = new RespuestaTimbrado(); resultado.setCode(response.getCode()); resultado.setMessage(response.getMessage()); resultado.setData(response.getData()); return resultado; } catch (Exception e) { throw new RuntimeException(\"Error en timbrarJSON2\", e); } }, executor); } // Ejemplo de uso public static void main(String[] args) { // ... (inicialización de service, apiKey, etc.) String jsonLayout = getJsonLayout(); // Generación dinámica String plantilla = \"1\"; service.timbrarJson2Async(apiKey, jsonLayout, keyPem, cerPem, plantilla).whenComplete((resultado, ex) -\u003e { if (ex == null \u0026\u0026 \"200\".equals(resultado.getCode())) { System.out.println(\"¡Timbrado con JSON y PDF Exitoso!\"); // Parsear el JSON de respuesta // Gson gson = new Gson(); // RespuestaData data = gson.fromJson(resultado.getData(), RespuestaData.class); // System.out.println(\"XML: \" + data.xml); // byte[] pdfBytes = Base64.getDecoder().decode(data.pdf); // Files.write(Paths.get(\"comprobante.pdf\"), pdfBytes); System.out.println(\"PDF guardado correctamente.\"); } else { /* ... manejo de error ... */ } service.shutdown(); }).join(); } Herramienta Zeep Para interactuar con servicios SOAP en Python, la librería zeep es una excelente opción. Proporciona una interfaz limpia y moderna.\nInstala la librería usando pip:\npip install zeep Implementación # ... (Definición de RespuestaTimbrado y configuración de logging) def get_json_layout() -\u003e dict: \"\"\" Genera dinámicamente el layout del CFDI como un diccionario de Python. En una aplicación real, los valores se obtendrían de una base de datos o de la entrada del usuario. \"\"\" return { \"Comprobante\": { \"Version\": \"4.0\", \"Serie\": \"F\", \"Folio\": \"123\", \"Fecha\": \"2025-07-04T12:00:00\", \"FormaPago\": \"01\", \"SubTotal\": \"100.00\", \"Moneda\": \"MXN\", \"Total\": \"116.00\", \"TipoDeComprobante\": \"I\", \"Exportacion\": \"01\", \"MetodoPago\": \"PUE\", \"LugarExpedicion\": \"64000\", \"Emisor\": { \"Rfc\": \"ABC010101XYZ\", \"Nombre\": \"Empresa Ejemplo SA de CV\", \"RegimenFiscal\": \"601\" }, \"Receptor\": { \"Rfc\": \"XAXX010101000\", \"Nombre\": \"Publico en General\", \"DomicilioFiscalReceptor\": \"64000\", \"RegimenFiscalReceptor\": \"616\", \"UsoCFDI\": \"G03\" }, \"Conceptos\": [ { \"ClaveProdServ\": \"01010101\", \"Cantidad\": \"1.0\", \"ClaveUnidad\": \"ACT\", \"Descripcion\": \"Producto de prueba\", \"ValorUnitario\": \"100.00\", \"Importe\": \"100.00\", \"ObjetoImp\": \"02\", \"Impuestos\": { \"Traslados\": [ { \"Base\": \"100.00\", \"Impuesto\": \"002\", \"TipoFactor\": \"Tasa\", \"TasaOCuota\": \"0.160000\", \"Importe\": \"16.00\" } ] } } ], \"Impuestos\": { \"TotalImpuestosTrasladados\": \"16.00\", \"Traslados\": [ { \"Base\": \"100.00\", \"Impuesto\": \"002\", \"TipoFactor\": \"Tasa\", \"TasaOCuota\": \"0.160000\", \"Importe\": \"16.00\" } ] } } } async def timbrar_json2_async(self, api_key: str, json_layout: dict, key_pem: str, cer_pem: str, plantilla: str) -\u003e RespuestaTimbrado: json_b64 = base64.b64encode(json.dumps(json_layout).encode('utf-8')).decode('utf-8') # Asumiendo que la operación se llama 'timbrarJSON2' response = await self.async_client.service.timbrarJSON2( apikey=api_key, jsonB64=json_b64, keyPEM=key_pem, cerPEM=cer_pem, plantilla=plantilla ) return RespuestaTimbrado(code=response.code, message=response.message, data=response.data) # Ejemplo de uso async def main(): # ... (inicialización de service, apiKey, etc.) layout = get_json_layout() // Generación dinámica plantilla = \"1\"; resultado = await service.timbrar_json2_async(api_key, layout, key_pem, cer_pem, plantilla) if resultado.code == \"200\" and resultado.data: print(\"¡Timbrado con JSON y PDF Exitoso!\") # Decodificar el JSON de la respuesta respuesta_data = json.loads(resultado.data) xml_timbrado = respuesta_data.get('xml') pdf_b64 = respuesta_data.get('pdf') print(\"--- XML Timbrado ---\") print(xml_timbrado) # Guardar el PDF with open(\"comprobante.pdf\", \"wb\") as f: f.write(base64.b64decode(pdf_b64)) print(\"\\nPDF guardado como comprobante.pdf\") else: print(f\"Error: {resultado.code} - {resultado.message}\") Herramienta SoapClient PHP tiene soporte nativo para SOAP a través de la extensión SOAP. Asegúrate de que la extensión php-soap esté habilitada en tu archivo php.ini.\nImplementación \u003c?php /** * Genera dinámicamente el layout del CFDI como un string JSON. * En una aplicación real, los valores se obtendrían de una base de datos * o se construiría un array asociativo y se convertiría con json_encode. */ function getJsonLayout(): string { return \u003c\u003c\u003cJSON { \"Comprobante\": { \"Version\": \"4.0\", \"Serie\": \"F\", \"Folio\": \"123\", \"Fecha\": \"2025-07-04T12:00:00\", \"FormaPago\": \"01\", \"SubTotal\": \"100.00\", \"Moneda\": \"MXN\", \"Total\": \"116.00\", \"TipoDeComprobante\": \"I\", \"Exportacion\": \"01\", \"MetodoPago\": \"PUE\", \"LugarExpedicion\": \"64000\", \"Emisor\": { \"Rfc\": \"ABC010101XYZ\", \"Nombre\": \"Empresa Ejemplo SA de CV\", \"RegimenFiscal\": \"601\" }, \"Receptor\": { \"Rfc\": \"XAXX010101000\", \"Nombre\": \"Publico en General\", \"DomicilioFiscalReceptor\": \"64000\", \"RegimenFiscalReceptor\": \"616\", \"UsoCFDI\": \"G03\" }, \"Conceptos\": [ { \"ClaveProdServ\": \"01010101\", \"Cantidad\": \"1.0\", \"ClaveUnidad\": \"ACT\", \"Descripcion\": \"Producto de prueba\", \"ValorUnitario\": \"100.00\", \"Importe\": \"100.00\", \"ObjetoImp\": \"02\", \"Impuestos\": { \"Traslados\": [ { \"Base\": \"100.00\", \"Impuesto\": \"002\", \"TipoFactor\": \"Tasa\", \"TasaOCuota\": \"0.160000\", \"Importe\": \"16.00\" } ] } } ], \"Impuestos\": { \"TotalImpuestosTrasladados\": \"16.00\", \"Traslados\": [ { \"Base\": \"100.00\", \"Impuesto\": \"002\", \"TipoFactor\": \"Tasa\", \"TasaOCuota\": \"0.160000\", \"Importe\": \"16.00\" } ] } } } JSON; } public function timbrarJson2(string $apiKey, string $jsonLayout, string $keyPem, string $cerPem, string $plantilla): RespuestaTimbrado { $respuesta = new RespuestaTimbrado(); try { $jsonB64 = base64_encode($jsonLayout); $soapClient = new SoapClient($this-\u003ewsdlUrl, ['trace' =\u003e 1, 'exceptions' =\u003e true]); $params = [ 'apikey' =\u003e $apiKey, 'jsonB64' =\u003e $jsonB64, 'keyPEM' =\u003e $keyPem, 'cerPEM' =\u003e $cerPem, 'plantilla' =\u003e $plantilla ]; // Asumiendo que la operación se llama 'timbrarJSON2' $response = $soapClient-\u003etimbrarJSON2($params); $respuesta-\u003ecode = $response-\u003ereturn-\u003ecode ?? null; $respuesta-\u003emessage = $response-\u003ereturn-\u003emessage ?? null; $respuesta-\u003edata = $response-\u003ereturn-\u003edata ?? null; } catch (Exception $e) { /* ... manejo de error ... */ } return $respuesta; } // Ejemplo de uso // ... (inicialización de service, apiKey, etc.) $jsonLayout = getJsonLayout(); // Generación dinámica $plantilla = \"1\"; $resultado = $service-\u003etimbrarJson2($apiKey, $jsonLayout, $keyPem, $cerPem, $plantilla); if ($resultado-\u003ecode === '200' \u0026\u0026 !empty($resultado-\u003edata)) { echo \"¡Timbrado con JSON y PDF Exitoso!\\n\"; // Decodificar el JSON de respuesta $data = json_decode($resultado-\u003edata, true); $xml = $data['xml']; $pdfB64 = $data['pdf']; echo \"--- XML Timbrado ---\\n\"; echo $xml; // Guardar el PDF file_put_contents(\"comprobante.pdf\", base64_decode($pdfB64)); echo \"\\nPDF guardado como comprobante.pdf\\n\"; } else { echo \"Error: {$resultado-\u003ecode} - {$resultado-\u003emessage}\\n\"; } ?\u003e Respuesta (Response) La estructura de la respuesta SOAP es similar a las anteriores, pero el contenido de la etiqueta data es un JSON que encapsula el XML y el PDF.\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cSOAP-ENV:Envelope ...\u003e \u003cSOAP-ENV:Body\u003e \u003cns1:timbrarJSON2Response xmlns:ns1=\"urn:ws_api\"\u003e \u003creturn xsi:type=\"tns:RespuestaTimbrado\"\u003e \u003ccode xsi:type=\"xsd:string\"\u003e200\u003c/code\u003e \u003cmessage xsi:type=\"xsd:string\"\u003eOK\u003c/message\u003e \u003cdata xsi:type=\"xsd:string\"\u003e\u003c![CDATA[{ \"xml\": \"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48Y2ZkaT...\", \"pdf\": \"JVBERi0xLjQKJdPr6eEKMSAwIG9iago8PC9UeXBlL0NhdGFsb2cvT3V0bGlu...\" }]]\u003e\u003c/data\u003e \u003c/return\u003e \u003c/ns1:timbrarJSON2Response\u003e \u003c/SOAP-ENV:Body\u003e \u003c/SOAP-ENV:Envelope\u003e Códigos de respuesta Los códigos de respuesta para el timbrado de CFDI son importantes para entender el resultado de la solicitud. A continuación se detallan los códigos más comunes que puedes recibir al realizar una solicitud de timbrado a través de la API.\rCódigo\rDescripción\r200\rSolicitud procesada con éxito\r300\rAPI KEY Inválida o inexistente\r301\rXML mal formado\r302\rEl sello del emisor no es válido\r303\rEl RFC del CSD del emisor no corresponde al RFC del Emisor\r304\rCSD del Emisor ha sido revobado\r305\rLa fecha de emisión no está dentro de la vigencia del CSD del Emisor\r306\rLa llave utilizada para sellar debe ser un CSD\r307\rEl CFDI contiene un timbre previo\r308\rEl CSD del emisor no ha sido firmado por uno de los Certificados de autoridad del SAT\r401\rEl rango de la fecha de generación no debe de ser mayor a 72 horas para la emisión del timbre\r402\rRFC del emisor no se encuentra en el régimen de contribuyentes (Lista de validación de régimen) LCO","timbrarjson2#timbrarJSON2":""},"title":"timbrarJSON2"},"/facturotas.docs/api/timbrado/timbrarretencion/":{"data":{"#":"timbrarRetencionEsta sección detalla la operación del servicio de timbrado para Comprobantes Fiscales de Retenciones e Información de Pagos.\nDescripción de la Operación Esta operación permite timbrar un CFDI de Retenciones e Información de Pagos (también conocido como “constancia de retenciones”). Este tipo de comprobante se utiliza para amparar las retenciones de impuestos efectuadas por los contribuyentes.\nEl servicio recibe el XML de la retención (versión 2.0), lo valida y lo timbra ante el SAT, devolviendo el XML completo con el Timbre Fiscal Digital (TFD) incorporado.\nParámetros de Entrada (Input) Parámetro Tipo de Dato Descripción apikey string Credencial de acceso al servicio (Solicita aquí). xml string Contenido del documento XML de la constancia de retenciones (versión 2.0). Parámetros de Salida (Output) - RespuestaTimbrado La respuesta de esta operación es idéntica a la de la operación timbrar.\nAtributo Tipo de Dato Descripción code string Código de respuesta de la operación. message string Mensaje detallado de la respuesta. data string XML de la retención timbrada en caso de éxito. Ejemplo de Código A continuación se presenta un ejemplo de cómo construir la solicitud y procesar la respuesta.\nSolicitud (Request) C#JavaPythonPHP Herramienta svcutil Ejecuta el comando para generar el cliente SOAP:\nsvcutil.exe https://dev.facturaloplus.com/ws/servicio.do?wsdl /out:ServicioTimbradoClient.cs /config:app.config Implementación private static string GetXmlRetencion() =\u003e \"\"\" \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cretenciones:Retenciones xmlns:retenciones=\"http://www.sat.gob.mx/esquemas/retencionpago/2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/esquemas/retencionpago/2 http://www.sat.gob.mx/esquemas/retencionpago/2/retencionpagov2.xsd\" Version=\"2.0\" FolioInt=\"123\" FechaExp=\"2025-07-05T10:00:00\" LugarExpRetenc=\"64000\" CveRetenc=\"14\"\u003e \u003cretenciones:Emisor RfcE=\"ABC010101XYZ\" NomDenRazSocE=\"Empresa Emisora SA de CV\" RegimenFiscalE=\"601\"/\u003e \u003cretenciones:Receptor NacionalidadR=\"Nacional\"\u003e \u003cretenciones:Nacional RfcR=\"XAXX010101000\" NomDenRazSocR=\"Receptor Nacional SA de CV\" DomicilioFiscalR=\"67890\"/\u003e \u003c/retenciones:Receptor\u003e \u003cretenciones:Periodo MesIni=\"06\" MesFin=\"06\" Ejerc=\"2025\"/\u003e \u003cretenciones:Totales montoTotOperacion=\"10000\" montoTotGrav=\"10000\" montoTotExent=\"0\" montoTotRet=\"1000\"\u003e \u003cretenciones:ImpRetenidos BaseRet=\"10000\" Impuesto=\"01\" montoRet=\"1000\" TipoPagoRet=\"Pago definitivo\"/\u003e \u003c/retenciones:Totales\u003e \u003c/retenciones:Retenciones\u003e \"\"\"; public async Task\u003cRespuestaTimbrado\u003e TimbrarRetencionAsync(string apiKey, string xml) { using var client = new ServicioTimbradoWSPortTypeClient(\"ServicioTimbradoWSPort\"); try { var response = await client.timbrarRetencionAsync(apiKey, xml); return new RespuestaTimbrado { Code = response.code, Message = response.message, Data = response.data }; } catch (Exception ex) { Console.WriteLine($\"Error al timbrar retención: {ex.Message}\"); throw; } } // Ejemplo de uso public async Task EjemploUsoTimbrarRetencionAsync() { string apiKey = \"TU_API_KEY_AQUI\"; string xml = GetXmlRetencion(); var resultado = await TimbrarRetencionAsync(apiKey, xml); if (resultado?.Code == \"200\") { Console.WriteLine(\"¡Timbrado de Retención Exitoso!\"); Console.WriteLine(resultado.Data); } else { Console.WriteLine($\"Error: {resultado?.Code} - {resultado?.Message}\"); } } Herramienta wsimport Ejecuta el comando para generar las clases cliente:\nwsimport -keep -p com.facturaloplus.cliente https://dev.facturaloplus.com/ws/servicio.do?wsdl Implementación import java.util.concurrent.CompletableFuture; public class TimbrarRetencionService { // ... (Definición de ExecutorService, Logger, etc.) public String generarXmlRetencion() { return \"\"\" \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cretenciones:Retenciones xmlns:retenciones=\"http://www.sat.gob.mx/esquemas/retencionpago/2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/esquemas/retencionpago/2 http://www.sat.gob.mx/esquemas/retencionpago/2/retencionpagov2.xsd\" Version=\"2.0\" FolioInt=\"123\" FechaExp=\"2025-07-05T10:00:00\" LugarExpRetenc=\"64000\" CveRetenc=\"14\"\u003e \u003cretenciones:Emisor RfcE=\"ABC010101XYZ\" NomDenRazSocE=\"Empresa Emisora SA de CV\" RegimenFiscalE=\"601\"/\u003e \u003cretenciones:Receptor NacionalidadR=\"Nacional\"\u003e \u003cretenciones:Nacional RfcR=\"XAXX010101000\" NomDenRazSocR=\"Receptor Nacional SA de CV\" DomicilioFiscalR=\"67890\"/\u003e \u003c/retenciones:Receptor\u003e \u003cretenciones:Periodo MesIni=\"06\" MesFin=\"06\" Ejerc=\"2025\"/\u003e \u003cretenciones:Totales montoTotOperacion=\"10000\" montoTotGrav=\"10000\" montoTotExent=\"0\" montoTotRet=\"1000\"\u003e \u003cretenciones:ImpRetenidos BaseRet=\"10000\" Impuesto=\"01\" montoRet=\"1000\" TipoPagoRet=\"Pago definitivo\"/\u003e \u003c/retenciones:Totales\u003e \u003c/retenciones:Retenciones\u003e \"\"\"; } public CompletableFuture\u003cRespuestaTimbrado\u003e timbrarRetencionAsync(String apiKey, String xml) { return CompletableFuture.supplyAsync(() -\u003e { try { ServicioTimbradoWS service = new ServicioTimbradoWS(); ServicioTimbradoWSPortType port = service.getServicioTimbradoWSPort(); Respuesta response = port.timbrarRetencion(apiKey, xml); RespuestaTimbrado resultado = new RespuestaTimbrado(); resultado.setCode(response.getCode()); resultado.setMessage(response.getMessage()); resultado.setData(response.getData()); return resultado; } catch (Exception ex) { throw new RuntimeException(\"Error al timbrar retención\", ex); } }, executor); } // Ejemplo de uso public static void main(String[] args) { TimbrarRetencionService service = new TimbrarRetencionService(); String apiKey = \"TU_API_KEY_AQUI\"; String xml = service.generarXmlRetencion(); service.timbrarRetencionAsync(apiKey, xml).whenComplete((resultado, ex) -\u003e { if (ex != null) { System.err.println(\"Error: \" + ex.getMessage()); } else if (\"200\".equals(resultado.getCode())) { System.out.println(\"¡Timbrado de Retención Exitoso!\"); System.out.println(resultado.getData()); } else { System.err.println(\"Error: \" + resultado.getCode() + \" - \" + resultado.getMessage()); } service.shutdown(); }).join(); } } Herramienta Zeep Instala la librería usando pip:\npip install zeep Implementación import asyncio from zeep.asyncio import AsyncClient def generar_xml_retencion() -\u003e str: return \"\"\"\\ \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cretenciones:Retenciones xmlns:retenciones=\"http://www.sat.gob.mx/esquemas/retencionpago/2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/esquemas/retencionpago/2 http://www.sat.gob.mx/esquemas/retencionpago/2/retencionpagov2.xsd\" Version=\"2.0\" FolioInt=\"123\" FechaExp=\"2025-07-05T10:00:00\" LugarExpRetenc=\"64000\" CveRetenc=\"14\"\u003e \u003cretenciones:Emisor RfcE=\"ABC010101XYZ\" NomDenRazSocE=\"Empresa Emisora SA de CV\" RegimenFiscalE=\"601\"/\u003e \u003cretenciones:Receptor NacionalidadR=\"Nacional\"\u003e \u003cretenciones:Nacional RfcR=\"XAXX010101000\" NomDenRazSocR=\"Receptor Nacional SA de CV\" DomicilioFiscalR=\"67890\"/\u003e \u003c/retenciones:Receptor\u003e \u003cretenciones:Periodo MesIni=\"06\" MesFin=\"06\" Ejerc=\"2025\"/\u003e \u003cretenciones:Totales montoTotOperacion=\"10000\" montoTotGrav=\"10000\" montoTotExent=\"0\" montoTotRet=\"1000\"\u003e \u003cretenciones:ImpRetenidos BaseRet=\"10000\" Impuesto=\"01\" montoRet=\"1000\" TipoPagoRet=\"Pago definitivo\"/\u003e \u003c/retenciones:Totales\u003e \u003c/retenciones:Retenciones\u003e \"\"\" class TimbradoService: def __init__(self, wsdl_url: str): self.wsdl_url = wsdl_url self.async_client = AsyncClient(self.wsdl_url) async def timbrar_retencion_async(self, api_key: str, xml: str) -\u003e RespuestaTimbrado: response = await self.async_client.service.timbrarRetencion( apikey=api_key, xml=xml ) return RespuestaTimbrado( code=response.code, message=response.message, data=response.data ) async def main(): service = TimbradoService(\"https://dev.facturaloplus.com/ws/servicio.do?wsdl\") api_key = \"TU_API_KEY_AQUI\"; xml = generar_xml_retencion(); resultado = await service.timbrar_retencion_async(api_key, xml); if resultado.code == \"200\": print(\"¡Timbrado de Retención Exitoso!\"); print(resultado.data); else: print(f\"Error: {resultado.code} - {resultado.message}\"); if __name__ == \"__main__\": asyncio.run(main()); Herramienta SoapClient Asegúrate de que la extensión php-soap esté habilitada en tu php.ini.\nImplementación \u003c?php function generarXmlRetencion(): string { return \u003c\u003c\u003c'XML' \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cretenciones:Retenciones xmlns:retenciones=\"http://www.sat.gob.mx/esquemas/retencionpago/2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/esquemas/retencionpago/2 http://www.sat.gob.mx/esquemas/retencionpago/2/retencionpagov2.xsd\" Version=\"2.0\" FolioInt=\"123\" FechaExp=\"2025-07-05T10:00:00\" LugarExpRetenc=\"64000\" CveRetenc=\"14\"\u003e \u003cretenciones:Emisor RfcE=\"ABC010101XYZ\" NomDenRazSocE=\"Empresa Emisora SA de CV\" RegimenFiscalE=\"601\"/\u003e \u003cretenciones:Receptor NacionalidadR=\"Nacional\"\u003e \u003cretenciones:Nacional RfcR=\"XAXX010101000\" NomDenRazSocR=\"Receptor Nacional SA de CV\" DomicilioFiscalR=\"67890\"/\u003e \u003c/retenciones:Receptor\u003e \u003cretenciones:Periodo MesIni=\"06\" MesFin=\"06\" Ejerc=\"2025\"/\u003e \u003cretenciones:Totales montoTotOperacion=\"10000\" montoTotGrav=\"10000\" montoTotExent=\"0\" montoTotRet=\"1000\"\u003e \u003cretenciones:ImpRetenidos BaseRet=\"10000\" Impuesto=\"01\" montoRet=\"1000\" TipoPagoRet=\"Pago definitivo\"/\u003e \u003c/retenciones:Totales\u003e \u003c/retenciones:Retenciones\u003e XML; } class TimbradoService { private string $wsdlUrl; public function __construct(string $wsdlUrl) { $this-\u003ewsdlUrl = $wsdlUrl; } public function timbrarRetencion(string $apiKey, string $xml): RespuestaTimbrado { $respuesta = new RespuestaTimbrado(); try { $soapClient = new SoapClient($this-\u003ewsdlUrl, ['trace' =\u003e 1, 'exceptions' =\u003e true]); $params = [ 'apikey' =\u003e $apiKey, 'xml' =\u003e $xml ]; $response = $soapClient-\u003etimbrarRetencion($params); $respuesta-\u003ecode = $response-\u003ereturn-\u003ecode ?? null; $respuesta-\u003emessage = $response-\u003ereturn-\u003emessage ?? null; $respuesta-\u003edata = $response-\u003ereturn-\u003edata ?? null; } catch (Exception $e) { $respuesta-\u003ecode = \"CLIENT_ERROR\"; $respuesta-\u003emessage = $e-\u003egetMessage(); } return $respuesta; } } // Ejemplo de uso $service = new TimbradoService(\"https://dev.facturaloplus.com/ws/servicio.do?wsdl\"); $apiKey = \"TU_API_KEY_AQUI\"; $xml = generarXmlRetencion(); $resultado = $service-\u003etimbrarRetencion($apiKey, $xml); header('Content-Type: text/plain'); if ($resultado-\u003ecode === '200') { echo \"¡Timbrado de Retención Exitoso!\\n\"; echo $resultado.data; } else { echo \"Error: {$resultado.code} - {$resultado.message}\\n\"; } ?\u003e Respuesta (Response) La estructura de la respuesta SOAP es la misma que la de la operación timbrar.\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cSOAP-ENV:Envelope ...\u003e \u003cSOAP-ENV:Body\u003e \u003cns1:timbrarRetencionResponse xmlns:ns1=\"urn:ws_api\"\u003e \u003creturn xsi:type=\"tns:RespuestaTimbrado\"\u003e \u003ccode xsi:type=\"xsd:string\"\u003eCÓDIGO\u003c/code\u003e \u003cmessage xsi:type=\"xsd:string\"\u003eMENSAJE\u003c/message\u003e \u003cdata xsi:type=\"xsd:string\"\u003e\u003c![CDATA[XML DE RETENCIÓN TIMBRADO]]\u003e\u003c/data\u003e \u003c/return\u003e \u003c/ns1:timbrarRetencionResponse\u003e \u003c/SOAP-ENV:Body\u003e \u003c/SOAP-ENV:Envelope\u003e Códigos de respuesta Los códigos de respuesta para el timbrado de CFDI son importantes para entender el resultado de la solicitud. A continuación se detallan los códigos más comunes que puedes recibir al realizar una solicitud de timbrado a través de la API.\rCódigo\rDescripción\r200\rSolicitud procesada con éxito\r300\rAPI KEY Inválida o inexistente\r301\rXML mal formado\r302\rEl sello del emisor no es válido\r303\rEl RFC del CSD del emisor no corresponde al RFC del Emisor\r304\rCSD del Emisor ha sido revobado\r305\rLa fecha de emisión no está dentro de la vigencia del CSD del Emisor\r306\rLa llave utilizada para sellar debe ser un CSD\r307\rEl CFDI contiene un timbre previo\r308\rEl CSD del emisor no ha sido firmado por uno de los Certificados de autoridad del SAT\r401\rEl rango de la fecha de generación no debe de ser mayor a 72 horas para la emisión del timbre\r402\rRFC del emisor no se encuentra en el régimen de contribuyentes (Lista de validación de régimen) LCO","timbrarretencion#timbrarRetencion":""},"title":"timbrarRetencion"},"/facturotas.docs/api/timbrado/timbrarretenciontfd/":{"data":{"#":"timbrarRetencionTFDDescripción de la Operación Esta operación permite timbrar un Comprobante Fiscal de Retenciones e Información de Pagos y, a diferencia de la operación timbrarRetencion, retorna únicamente el Timbre Fiscal Digital (TFD) como un XML independiente. Esto es útil cuando se necesita solo el TFD para procesos de validación o almacenamiento por separado.\nParámetros de Entrada (Input) Parámetro Tipo de Dato Descripción apikey string Credencial de acceso al servicio (Solicita aquí). xml string Contenido del documento XML de la constancia de retenciones a timbrar. Parámetros de Salida (Output) - RespuestaTimbradoTFD Atributo Tipo de Dato Descripción code string Código de respuesta de la operación. message string Mensaje detallado de la respuesta. data string XML del Timbre Fiscal Digital (TFD) en caso de éxito. Ejemplo de Código A continuación se presenta un ejemplo de cómo construir la solicitud y procesar la respuesta.\nSolicitud (Request) C#JavaPythonPHP Herramienta svcutil Ejecuta el comando para generar el cliente SOAP:\nsvcutil.exe https://dev.facturaloplus.com/ws/servicio.do?wsdl /out:ServicioTimbradoClient.cs /config:app.config Implementación private static string GetXmlRetencion() =\u003e \"\"\" \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cretenciones:Retenciones xmlns:retenciones=\"http://www.sat.gob.mx/esquemas/retencionpago/2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/esquemas/retencionpago/2 http://www.sat.gob.mx/esquemas/retencionpago/2/retencionpagov2.xsd\" Version=\"2.0\" FolioInt=\"124\" FechaExp=\"2025-07-05T11:00:00\" LugarExpRetenc=\"64000\" CveRetenc=\"14\"\u003e \u003cretenciones:Emisor RfcE=\"ABC010101XYZ\" NomDenRazSocE=\"Empresa Emisora SA de CV\" RegimenFiscalE=\"601\"/\u003e \u003cretenciones:Receptor NacionalidadR=\"Nacional\"\u003e \u003cretenciones:Nacional RfcR=\"XAXX010101000\" NomDenRazSocR=\"Receptor Nacional SA de CV\" DomicilioFiscalR=\"67890\"/\u003e \u003c/retenciones:Receptor\u003e \u003cretenciones:Periodo MesIni=\"07\" MesFin=\"07\" Ejerc=\"2025\"/\u003e \u003cretenciones:Totales montoTotOperacion=\"25000\" montoTotGrav=\"25000\" montoTotExent=\"0\" montoTotRet=\"2500\"\u003e \u003cretenciones:ImpRetenidos BaseRet=\"25000\" Impuesto=\"01\" montoRet=\"2500\" TipoPagoRet=\"Pago definitivo\"/\u003e \u003c/retenciones:Totales\u003e \u003c/retenciones:Retenciones\u003e \"\"\"; public async Task\u003cRespuestaTimbradoTFD\u003e TimbrarRetencionTFDAsync(string apiKey, string xml) { using var client = new ServicioTimbradoWSPortTypeClient(\"ServicioTimbradoWSPort\"); try { var response = await client.timbrarRetencionTFDAsync(apiKey, xml); return new RespuestaTimbradoTFD { Code = response.code, Message = response.message, Data = response.data }; } catch (Exception ex) { Console.WriteLine($\"Error al timbrar TFD de retención: {ex.Message}\"); throw; } } // Ejemplo de uso public async Task EjemploUsoTimbrarRetencionTFDAsync() { string apiKey = \"TU_API_KEY_AQUI\"; string xml = GetXmlRetencion(); var resultado = await TimbrarRetencionTFDAsync(apiKey, xml); if (resultado?.Code == \"200\") { Console.WriteLine(\"¡Timbrado de TFD para Retención Exitoso!\"); Console.WriteLine(resultado.Data); } else { Console.WriteLine($\"Error: {resultado?.Code} - {resultado?.Message}\"); } } Herramienta wsimport Ejecuta el comando para generar las clases cliente:\nwsimport -keep -p com.facturaloplus.cliente https://dev.facturaloplus.com/ws/servicio.do?wsdl Implementación import java.util.concurrent.CompletableFuture; public class TimbrarRetencionTFDService { // ... (Definición de ExecutorService, Logger, etc.) public String generarXmlRetencion() { return \"\"\" \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cretenciones:Retenciones xmlns:retenciones=\"http://www.sat.gob.mx/esquemas/retencionpago/2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/esquemas/retencionpago/2 http://www.sat.gob.mx/esquemas/retencionpago/2/retencionpagov2.xsd\" Version=\"2.0\" FolioInt=\"124\" FechaExp=\"2025-07-05T11:00:00\" LugarExpRetenc=\"64000\" CveRetenc=\"14\"\u003e \u003cretenciones:Emisor RfcE=\"ABC010101XYZ\" NomDenRazSocE=\"Empresa Emisora SA de CV\" RegimenFiscalE=\"601\"/\u003e \u003cretenciones:Receptor NacionalidadR=\"Nacional\"\u003e \u003cretenciones:Nacional RfcR=\"XAXX010101000\" NomDenRazSocR=\"Receptor Nacional SA de CV\" DomicilioFiscalR=\"67890\"/\u003e \u003c/retenciones:Receptor\u003e \u003cretenciones:Periodo MesIni=\"07\" MesFin=\"07\" Ejerc=\"2025\"/\u003e \u003cretenciones:Totales montoTotOperacion=\"25000\" montoTotGrav=\"25000\" montoTotExent=\"0\" montoTotRet=\"2500\"\u003e \u003cretenciones:ImpRetenidos BaseRet=\"25000\" Impuesto=\"01\" montoRet=\"2500\" TipoPagoRet=\"Pago definitivo\"/\u003e \u003c/retenciones:Totales\u003e \u003c/retenciones:Retenciones\u003e \"\"\"; } public CompletableFuture\u003cRespuestaTimbradoTFD\u003e timbrarRetencionTFDAsync(String apiKey, String xml) { return CompletableFuture.supplyAsync(() -\u003e { try { ServicioTimbradoWS service = new ServicioTimbradoWS(); ServicioTimbradoWSPortType port = service.getServicioTimbradoWSPort(); Respuesta response = port.timbrarRetencionTFD(apiKey, xml); RespuestaTimbradoTFD resultado = new RespuestaTimbradoTFD(); resultado.setCode(response.getCode()); resultado.setMessage(response.getMessage()); resultado.setData(response.getData()); return resultado; } catch (Exception ex) { throw new RuntimeException(\"Error al timbrar TFD de retención\", ex); } }, executor); } // Ejemplo de uso public static void main(String[] args) { TimbrarRetencionTFDService service = new TimbrarRetencionTFDService(); String apiKey = \"TU_API_KEY_AQUI\"; String xml = service.generarXmlRetencion(); service.timbrarRetencionTFDAsync(apiKey, xml).whenComplete((resultado, ex) -\u003e { if (ex != null) { System.err.println(\"Error: \" + ex.getMessage()); } else if (\"200\".equals(resultado.getCode())) { System.out.println(\"¡Timbrado de TFD para Retención Exitoso!\"); System.out.println(resultado.getData()); } else { System.err.println(\"Error: \" + resultado.getCode() + \" - \" + resultado.getMessage()); } service.shutdown(); }).join(); } } Herramienta Zeep Instala la librería usando pip:\npip install zeep Implementación import asyncio from zeep.asyncio import AsyncClient def generar_xml_retencion() -\u003e str: return \"\"\"\\ \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cretenciones:Retenciones xmlns:retenciones=\"http://www.sat.gob.mx/esquemas/retencionpago/2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/esquemas/retencionpago/2 http://www.sat.gob.mx/esquemas/retencionpago/2/retencionpagov2.xsd\" Version=\"2.0\" FolioInt=\"124\" FechaExp=\"2025-07-05T11:00:00\" LugarExpRetenc=\"64000\" CveRetenc=\"14\"\u003e \u003cretenciones:Emisor RfcE=\"ABC010101XYZ\" NomDenRazSocE=\"Empresa Emisora SA de CV\" RegimenFiscalE=\"601\"/\u003e \u003cretenciones:Receptor NacionalidadR=\"Nacional\"\u003e \u003cretenciones:Nacional RfcR=\"XAXX010101000\" NomDenRazSocR=\"Receptor Nacional SA de CV\" DomicilioFiscalR=\"67890\"/\u003e \u003c/retenciones:Receptor\u003e \u003cretenciones:Periodo MesIni=\"07\" MesFin=\"07\" Ejerc=\"2025\"/\u003e \u003cretenciones:Totales montoTotOperacion=\"25000\" montoTotGrav=\"25000\" montoTotExent=\"0\" montoTotRet=\"2500\"\u003e \u003cretenciones:ImpRetenidos BaseRet=\"25000\" Impuesto=\"01\" montoRet=\"2500\" TipoPagoRet=\"Pago definitivo\"/\u003e \u003c/retenciones:Totales\u003e \u003c/retenciones:Retenciones\u003e \"\"\" class TimbradoService: def __init__(self, wsdl_url: str): self.wsdl_url = wsdl_url self.async_client = AsyncClient(self.wsdl_url) async def timbrar_retencion_tfd_async(self, api_key: str, xml: str) -\u003e RespuestaTimbradoTFD: response = await self.async_client.service.timbrarRetencionTFD( apikey=api_key, xml=xml ) return RespuestaTimbradoTFD( code=response.code, message=response.message, data=response.data ) async def main(): service = TimbradoService(\"https://dev.facturaloplus.com/ws/servicio.do?wsdl\") api_key = \"TU_API_KEY_AQUI\" xml = generar_xml_retencion() resultado = await service.timbrar_retencion_tfd_async(api_key, xml); if resultado.code == \"200\": print(\"¡Timbrado de TFD para Retención Exitoso!\") print(resultado.data) else: print(f\"Error: {resultado.code} - {resultado.message}\") if __name__ == \"__main__\": asyncio.run(main()) Herramienta SoapClient Asegúrate de que la extensión php-soap esté habilitada en tu php.ini.\nImplementación \u003c?php function generarXmlRetencion(): string { return \u003c\u003c\u003c'XML' \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cretenciones:Retenciones xmlns:retenciones=\"http://www.sat.gob.mx/esquemas/retencionpago/2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sat.gob.mx/esquemas/retencionpago/2 http://www.sat.gob.mx/esquemas/retencionpago/2/retencionpagov2.xsd\" Version=\"2.0\" FolioInt=\"124\" FechaExp=\"2025-07-05T11:00:00\" LugarExpRetenc=\"64000\" CveRetenc=\"14\"\u003e \u003cretenciones:Emisor RfcE=\"ABC010101XYZ\" NomDenRazSocE=\"Empresa Emisora SA de CV\" RegimenFiscalE=\"601\"/\u003e \u003cretenciones:Receptor NacionalidadR=\"Nacional\"\u003e \u003cretenciones:Nacional RfcR=\"XAXX010101000\" NomDenRazSocR=\"Receptor Nacional SA de CV\" DomicilioFiscalR=\"67890\"/\u003e \u003c/retenciones:Receptor\u003e \u003cretenciones:Periodo MesIni=\"07\" MesFin=\"07\" Ejerc=\"2025\"/\u003e \u003cretenciones:Totales montoTotOperacion=\"25000\" montoTotGrav=\"25000\" montoTotExent=\"0\" montoTotRet=\"2500\"\u003e \u003cretenciones:ImpRetenidos BaseRet=\"25000\" Impuesto=\"01\" montoRet=\"2500\" TipoPagoRet=\"Pago definitivo\"/\u003e \u003c/retenciones:Totales\u003e \u003c/retenciones:Retenciones\u003e XML; } class TimbradoService { private string $wsdlUrl; public function __construct(string $wsdlUrl) { $this-\u003ewsdlUrl = $wsdlUrl; } public function timbrarRetencionTFD(string $apiKey, string $xml): RespuestaTimbradoTFD { $respuesta = new RespuestaTimbradoTFD(); try { $soapClient = new SoapClient($this-\u003ewsdlUrl, ['trace' =\u003e 1, 'exceptions' =\u003e true]); $params = [ 'apikey' =\u003e $apiKey, 'xml' =\u003e $xml ]; $response = $soapClient-\u003etimbrarRetencionTFD($params); $respuesta-\u003ecode = $response-\u003ereturn-\u003ecode ?? null; $respuesta-\u003emessage = $response-\u003ereturn-\u003emessage ?? null; $respuesta-\u003edata = $response-\u003ereturn-\u003edata ?? null; } catch (Exception $e) { $respuesta-\u003ecode = \"CLIENT_ERROR\"; $respuesta-\u003emessage = $e-\u003egetMessage(); } return $respuesta; } } // Ejemplo de uso $service = new TimbradoService(\"https://dev.facturaloplus.com/ws/servicio.do?wsdl\"); $apiKey = \"TU_API_KEY_AQUI\"; $xml = generarXmlRetencion(); $resultado = $service-\u003etimbrarRetencionTFD($apiKey, $xml); header('Content-Type: text/plain'); if ($resultado-\u003ecode === '200') { echo \"¡Timbrado de TFD para Retención Exitoso!\\n\"; echo $resultado-\u003edata; } else { echo \"Error: {$resultado-\u003ecode} - {$resultado-\u003emessage}\\n\"; } ?\u003e Respuesta (Response) El campo data contendrá únicamente el XML del Timbre Fiscal Digital (TFD).\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cSOAP-ENV:Envelope ...\u003e \u003cSOAP-ENV:Body\u003e \u003cns1:timbrarRetencionTFDResponse xmlns:ns1=\"urn:ws_api\"\u003e \u003creturn xsi:type=\"tns:RespuestaTimbradoTFD\"\u003e \u003ccode xsi:type=\"xsd:string\"\u003eCÓDIGO\u003c/code\u003e \u003cmessage xsi:type=\"xsd:string\"\u003eMENSAJE\u003c/message\u003e \u003cdata xsi:type=\"xsd:string\"\u003e\u003c![CDATA[\u003ctfd:TimbreFiscalDigital ... /\u003e]]\u003e\u003c/data\u003e \u003c/return\u003e \u003c/ns1:timbrarRetencionTFDResponse\u003e \u003c/SOAP-ENV:Body\u003e \u003c/SOAP-ENV:Envelope\u003e Códigos de respuesta Los códigos de respuesta para el timbrado de CFDI son importantes para entender el resultado de la solicitud. A continuación se detallan los códigos más comunes que puedes recibir al realizar una solicitud de timbrado a través de la API.\rCódigo\rDescripción\r200\rSolicitud procesada con éxito\r300\rAPI KEY Inválida o inexistente\r301\rXML mal formado\r302\rEl sello del emisor no es válido\r303\rEl RFC del CSD del emisor no corresponde al RFC del Emisor\r304\rCSD del Emisor ha sido revobado\r305\rLa fecha de emisión no está dentro de la vigencia del CSD del Emisor\r306\rLa llave utilizada para sellar debe ser un CSD\r307\rEl CFDI contiene un timbre previo\r308\rEl CSD del emisor no ha sido firmado por uno de los Certificados de autoridad del SAT\r401\rEl rango de la fecha de generación no debe de ser mayor a 72 horas para la emisión del timbre\r402\rRFC del emisor no se encuentra en el régimen de contribuyentes (Lista de validación de régimen) LCO","timbrarretenciontfd#timbrarRetencionTFD":""},"title":"timbrarRetencionTFD"},"/facturotas.docs/api/timbrado/timbrarsp/":{"data":{"#":"timbrarSPEsta sección detalla la operación del servicio de timbrado especializado para el Sector Primario.\nDescripción de la Operación Esta operación permite timbrar un Comprobante Fiscal Digital por Internet (CFDI) que incluye el Complemento para el Sector Primario. Está diseñada para contribuyentes que realizan actividades agrícolas, silvícolas, ganaderas o pesqueras.\nEl servicio procesa un CFDI (versión 4.0), lo valida, y lo timbra ante el SAT, devolviendo el XML completo con el Timbre Fiscal Digital (TFD) incorporado.\nParámetros de Entrada (Input) Parámetro Tipo de Dato Descripción apikey string Credencial de acceso al servicio (Solicita aquí). xmlCFDI string Contenido del documento XML del CFDI v4.0 que debe incluir el Complemento para el Sector Primario. Parámetros de Salida (Output) - RespuestaTimbrado La respuesta de esta operación es idéntica a la de la operación timbrar.\nAtributo Tipo de Dato Descripción code string Código de respuesta de la operación. message string Mensaje detallado de la respuesta. data string XML del CFDI timbrado en caso de éxito. Ejemplo de Código A continuación se presenta un ejemplo de cómo construir la solicitud y procesar la respuesta.\nSolicitud (Request) C#JavaPythonPHP Herramienta svcutil Ejecuta el comando para generar el cliente SOAP:\nsvcutil.exe https://dev.facturaloplus.com/ws/servicio.do?wsdl /out:ServicioTimbradoClient.cs /config:app.config Implementación private static string GetXmlCfdiSectorPrimario() =\u003e \"\"\" \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:sp=\"http://www.sat.gob.mx/sectorprimario\" xsi:schemaLocation=\"http://www.sat.gob.mx/cfd/4 http://www.sat.gob.mx/sitio_internet/cfd/4/cfdv40.xsd http://www.sat.gob.mx/sectorprimario http://www.sat.gob.mx/sitio_internet/cfd/sectorprimario/sectorprimario.xsd\" Version=\"4.0\" Serie=\"SP\" Folio=\"100\" Fecha=\"2025-07-05T12:00:00\" SubTotal=\"5000.00\" Moneda=\"MXN\" Total=\"5000.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" FormaPago=\"01\" NoCertificado=\"30001000000300023708\" Certificado=\"MIIC...\" Sello=\"...\" LugarExpedicion=\"60123\"\u003e \u003ccfdi:Emisor Rfc=\"ABC010101XYZ\" Nombre=\"Productor Agrícola Ejemplo\" RegimenFiscal=\"621\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Comprador General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" UsoCFDI=\"G01\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ObjetoImp=\"01\" ClaveProdServ=\"01010101\" ClaveUnidad=\"KGM\" Cantidad=\"100\" Descripcion=\"Maíz Blanco\" ValorUnitario=\"50.00\" Importe=\"5000.00\"/\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Complemento\u003e \u003csp:SectorPrimario Version=\"1.0\" TipoOperacion=\"Venta\"/\u003e \u003c/cfdi:Complemento\u003e \u003c/cfdi:Comprobante\u003e \"\"\"; public async Task\u003cRespuestaTimbrado\u003e TimbrarSPAsync(string apiKey, string xmlCfdi) { using var client = new ServicioTimbradoWSPortTypeClient(\"ServicioTimbradoWSPort\"); try { var response = await client.timbrarSPAsync(apiKey, xmlCfdi); return new RespuestaTimbrado { Code = response.code, Message = response.message, Data = response.data }; } catch (Exception ex) { Console.WriteLine($\"Error al timbrar Sector Primario: {ex.Message}\"); throw; } } // Ejemplo de uso public async Task EjemploUsoTimbrarSPAsync() { string apiKey = \"TU_API_KEY_AQUI\"; string xmlCfdi = GetXmlCfdiSectorPrimario(); var resultado = await TimbrarSPAsync(apiKey, xmlCfdi); if (resultado?.Code == \"200\") { Console.WriteLine(\"¡Timbrado Sector Primario Exitoso!\"); Console.WriteLine(resultado.Data); } else { Console.WriteLine($\"Error: {resultado?.Code} - {resultado?.Message}\"); } } Herramienta wsimport Ejecuta el comando para generar las clases cliente:\nwsimport -keep -p com.facturaloplus.cliente https://dev.facturaloplus.com/ws/servicio.do?wsdl Implementación import java.util.concurrent.CompletableFuture; public class TimbradoSPService { // ... (Definición de ExecutorService, Logger, etc.) public String generarXmlCfdiSectorPrimario() { return \"\"\" \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:sp=\"http://www.sat.gob.mx/sectorprimario\" xsi:schemaLocation=\"http://www.sat.gob.mx/cfd/4 http://www.sat.gob.mx/sitio_internet/cfd/4/cfdv40.xsd http://www.sat.gob.mx/sectorprimario http://www.sat.gob.mx/sitio_internet/cfd/sectorprimario/sectorprimario.xsd\" Version=\"4.0\" Serie=\"SP\" Folio=\"100\" Fecha=\"2025-07-05T12:00:00\" SubTotal=\"5000.00\" Moneda=\"MXN\" Total=\"5000.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" FormaPago=\"01\" NoCertificado=\"30001000000300023708\" Certificado=\"MIIC...\" Sello=\"...\" LugarExpedicion=\"60123\"\u003e \u003ccfdi:Emisor Rfc=\"ABC010101XYZ\" Nombre=\"Productor Agrícola Ejemplo\" RegimenFiscal=\"621\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Comprador General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" UsoCFDI=\"G01\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ObjetoImp=\"01\" ClaveProdServ=\"01010101\" ClaveUnidad=\"KGM\" Cantidad=\"100\" Descripcion=\"Maíz Blanco\" ValorUnitario=\"50.00\" Importe=\"5000.00\"/\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Complemento\u003e \u003csp:SectorPrimario Version=\"1.0\" TipoOperacion=\"Venta\"/\u003e \u003c/cfdi:Complemento\u003e \u003c/cfdi:Comprobante\u003e \"\"\"; } public CompletableFuture\u003cRespuestaTimbrado\u003e timbrarSPAsync(String apiKey, String xmlCfdi) { return CompletableFuture.supplyAsync(() -\u003e { try { ServicioTimbradoWS service = new ServicioTimbradoWS(); ServicioTimbradoWSPortType port = service.getServicioTimbradoWSPort(); Respuesta response = port.timbrarSP(apiKey, xmlCfdi); RespuestaTimbrado resultado = new RespuestaTimbrado(); resultado.setCode(response.getCode()); resultado.setMessage(response.getMessage()); resultado.setData(response.getData()); return resultado; } catch (Exception ex) { throw new RuntimeException(\"Error al timbrar Sector Primario\", ex); } }, executor); } // Ejemplo de uso public static void main(String[] args) { TimbradoSPService service = new TimbradoSPService(); String apiKey = \"TU_API_KEY_AQUI\"; String xmlCfdi = service.generarXmlCfdiSectorPrimario(); service.timbrarSPAsync(apiKey, xmlCfdi).whenComplete((resultado, ex) -\u003e { if (ex != null) { System.err.println(\"Error: \" + ex.getMessage()); } else if (\"200\".equals(resultado.getCode())) { System.out.println(\"¡Timbrado Sector Primario Exitoso!\"); System.out.println(resultado.getData()); } else { System.err.println(\"Error: \" + resultado.getCode() + \" - \" + resultado.getMessage()); } service.shutdown(); }).join(); } } Herramienta Zeep Instala la librería usando pip:\npip install zeep Implementación import asyncio from zeep.asyncio import AsyncClient def generar_xml_cfdi_sector_primario() -\u003e str: return \"\"\"\\ \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:sp=\"http://www.sat.gob.mx/sectorprimario\" xsi:schemaLocation=\"http://www.sat.gob.mx/cfd/4 http://www.sat.gob.mx/sitio_internet/cfd/4/cfdv40.xsd http://www.sat.gob.mx/sectorprimario http://www.sat.gob.mx/sitio_internet/cfd/sectorprimario/sectorprimario.xsd\" Version=\"4.0\" Serie=\"SP\" Folio=\"100\" Fecha=\"2025-07-05T12:00:00\" SubTotal=\"5000.00\" Moneda=\"MXN\" Total=\"5000.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" FormaPago=\"01\" NoCertificado=\"30001000000300023708\" Certificado=\"MIIC...\" Sello=\"...\" LugarExpedicion=\"60123\"\u003e \u003ccfdi:Emisor Rfc=\"ABC010101XYZ\" Nombre=\"Productor Agrícola Ejemplo\" RegimenFiscal=\"621\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Comprador General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" UsoCFDI=\"G01\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ObjetoImp=\"01\" ClaveProdServ=\"01010101\" ClaveUnidad=\"KGM\" Cantidad=\"100\" Descripcion=\"Maíz Blanco\" ValorUnitario=\"50.00\" Importe=\"5000.00\"/\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Complemento\u003e \u003csp:SectorPrimario Version=\"1.0\" TipoOperacion=\"Venta\"/\u003e \u003c/cfdi:Complemento\u003e \"\"\" class TimbradoService: def __init__(self, wsdl_url: str): self.wsdl_url = wsdl_url self.async_client = AsyncClient(self.wsdl_url) async def timbrar_sp_async(self, api_key: str, xml_cfdi: str) -\u003e RespuestaTimbrado: response = await self.async_client.service.timbrarSP( apikey=api_key, xmlCFDI=xml_cfdi ) return RespuestaTimbrado( code=response.code, message=response.message, data=response.data ) async def main(): service = TimbradoService(\"https://dev.facturaloplus.com/ws/servicio.do?wsdl\") api_key = \"TU_API_KEY_AQUI\"; xml_cfdi = generar_xml_cfdi_sector_primario(); resultado = await service.timbrar_sp_async(api_key, xml_cfdi); if resultado.code == \"200\": print(\"¡Timbrado Sector Primario Exitoso!\"); print(resultado.data); else: print(f\"Error: {resultado.code} - {resultado.message}\"); if __name__ == \"__main__\": asyncio.run(main()); Herramienta SoapClient Asegúrate de que la extensión php-soap esté habilitada en tu php.ini.\nImplementación \u003c?php function generarXmlCfdiSectorPrimario(): string { return \u003c\u003c\u003c'XML' \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:sp=\"http://www.sat.gob.mx/sectorprimario\" xsi:schemaLocation=\"http://www.sat.gob.mx/cfd/4 http://www.sat.gob.mx/sitio_internet/cfd/4/cfdv40.xsd http://www.sat.gob.mx/sectorprimario http://www.sat.gob.mx/sitio_internet/cfd/sectorprimario/sectorprimario.xsd\" Version=\"4.0\" Serie=\"SP\" Folio=\"100\" Fecha=\"2025-07-05T12:00:00\" SubTotal=\"5000.00\" Moneda=\"MXN\" Total=\"5000.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" FormaPago=\"01\" NoCertificado=\"30001000000300023708\" Certificado=\"MIIC...\" Sello=\"...\" LugarExpedicion=\"60123\"\u003e \u003ccfdi:Emisor Rfc=\"ABC010101XYZ\" Nombre=\"Productor Agrícola Ejemplo\" RegimenFiscal=\"621\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Comprador General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" UsoCFDI=\"G01\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ObjetoImp=\"01\" ClaveProdServ=\"01010101\" ClaveUnidad=\"KGM\" Cantidad=\"100\" Descripcion=\"Maíz Blanco\" ValorUnitario=\"50.00\" Importe=\"5000.00\"/\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Complemento\u003e \u003csp:SectorPrimario Version=\"1.0\" TipoOperacion=\"Venta\"/\u003e \u003c/cfdi:Complemento\u003e \u003c/cfdi:Comprobante\u003e XML; } class TimbradoService { private string $wsdlUrl; public function __construct(string $wsdlUrl) { $this-\u003ewsdlUrl = $wsdlUrl; } public function timbrarSP(string $apiKey, string $xmlCfdi): RespuestaTimbrado { $respuesta = new RespuestaTimbrado(); try { $soapClient = new SoapClient($this-\u003ewsdlUrl, ['trace' =\u003e 1, 'exceptions' =\u003e true]); $params = [ 'apikey' =\u003e $apiKey, 'xmlCFDI' =\u003e $xmlCfdi ]; $response = $soapClient-\u003etimbrarSP($params); $respuesta-\u003ecode = $response-\u003ereturn-\u003ecode ?? null; $respuesta-\u003emessage = $response-\u003ereturn-\u003emessage ?? null; $respuesta-\u003edata = $response-\u003ereturn-\u003edata ?? null; } catch (Exception $e) { $respuesta-\u003ecode = \"CLIENT_ERROR\"; $respuesta-\u003emessage = $e-\u003egetMessage(); } return $respuesta; } } // Ejemplo de uso $service = new TimbradoService(\"https://dev.facturaloplus.com/ws/servicio.do?wsdl\"); $apiKey = \"TU_API_KEY_AQUI\"; $xmlCfdi = generarXmlCfdiSectorPrimario(); $resultado = $service-\u003etimbrarSP($apiKey, $xmlCfdi); header('Content-Type: text/plain'); if ($resultado-\u003ecode === '200') { echo \"¡Timbrado Sector Primario Exitoso!\\n\"; echo $resultado.data; } else { echo \"Error: {$resultado.code} - {$resultado.message}\\n\"; } ?\u003e Respuesta (Response) La estructura de la respuesta SOAP es la misma que la de la operación timbrar.\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cSOAP-ENV:Envelope ...\u003e \u003cSOAP-ENV:Body\u003e \u003cns1:timbrarSPResponse xmlns:ns1=\"urn:ws_api\"\u003e \u003creturn xsi:type=\"tns:RespuestaTimbrado\"\u003e \u003ccode xsi:type=\"xsd:string\"\u003eCÓDIGO\u003c/code\u003e \u003cmessage xsi:type=\"xsd:string\"\u003eMENSAJE\u003c/message\u003e \u003cdata xsi:type=\"xsd:string\"\u003e\u003c![CDATA[CFDI TIMBRADO]]\u003e\u003c/data\u003e \u003c/return\u003e \u003c/ns1:timbrarSPResponse\u003e \u003c/SOAP-ENV:Body\u003e \u003c/SOAP-ENV:Envelope\u003e Códigos de respuesta Los códigos de respuesta para el timbrado de CFDI son importantes para entender el resultado de la solicitud. A continuación se detallan los códigos más comunes que puedes recibir al realizar una solicitud de timbrado a través de la API.\rCódigo\rDescripción\r200\rSolicitud procesada con éxito\r300\rAPI KEY Inválida o inexistente\r301\rXML mal formado\r302\rEl sello del emisor no es válido\r303\rEl RFC del CSD del emisor no corresponde al RFC del Emisor\r304\rCSD del Emisor ha sido revobado\r305\rLa fecha de emisión no está dentro de la vigencia del CSD del Emisor\r306\rLa llave utilizada para sellar debe ser un CSD\r307\rEl CFDI contiene un timbre previo\r308\rEl CSD del emisor no ha sido firmado por uno de los Certificados de autoridad del SAT\r401\rEl rango de la fecha de generación no debe de ser mayor a 72 horas para la emisión del timbre\r402\rRFC del emisor no se encuentra en el régimen de contribuyentes (Lista de validación de régimen) LCO","timbrarsp#timbrarSP":""},"title":"timbrarSP"},"/facturotas.docs/api/timbrado/timbrartxt/":{"data":{"#":"timbrarTXTEsta sección detalla la operación del servicio de timbrado a partir de un layout en formato de texto plano (TXT), permitiendo generar, sellar y obtener el XML timbrado de un Comprobante Fiscal Digital (CFDI) de forma simplificada.\nDescripción de la Operación Esta operación facilita la creación de un CFDI (versión 4.0) a partir de un archivo de texto plano (.txt). El servicio interpreta el layout, construye la estructura del XML, lo sella con los certificados proporcionados y devuelve el XML timbrado completo, junto con su folio fiscal (UUID) y el sello digital del SAT.\nParámetros de Entrada (Input) Parámetro Tipo de Dato Descripción apikey string Credencial de acceso al servicio (Solicita aquí). txtB64 string Cadena en formato Base64 que contiene el layout TXT con la información del CFDI a generar (ver estructura abajo). Conversor Base 64 keyPEM string Contenido del archivo de la llave privada (.key) en formato PEM. cerPEM string Contenido del archivo del certificado de llave pública (.cer) en formato PEM. Parámetros de Salida (Output) - RespuestaTimbrado La respuesta de esta operación es idéntica a la de la operación timbrar.\nAtributo Tipo de Dato Descripción code string Código de respuesta de la operación. message string Mensaje detallado de la respuesta. data string XML del CFDI timbrado en caso de éxito. Estructura del TXT de Entrada El TXT enviado en el parámetro txtB64 debe seguir la siguiente estructura de “pipe” (|). Cada línea representa una sección del CFDI y los campos se separan por |. Los valores vacíos se indican con un | consecutivo. Conversor Base 64\nCOMPROBANTE|4.0|Serie|Folio|Fecha|FormaPago|NoCertificado|CondicionesDePago|SubTotal|Descuento|Moneda|TipoCambio|Total|TipoDeComprobante|Exportacion|MetodoPago|LugarExpedicion|Confirmacion| INFORMACIONGLOBAL|Periodicidad|Meses|Año| CFDIRELACIONADOS|numeroCfdiRelacionados|TipoRelacion| CFDIRELACIONADO|UUID-1|UUID-2|...|UUID-N| EMISOR|Rfc|Nombre|RegimenFiscal|FacAtrAdquirente| RECEPTOR|Rfc|Nombre|DomicilioFiscalReceptor|ResidenciaFiscal|NumRegIdTrib|RegimenFiscalReceptor|UsoCFDI| CONCEPTOS|numeroConceptos| CONCEPTO|ClaveProdServ|NoIdentificacion|Cantidad|ClaveUnidad|Unidad|Descripcion|ValorUnitario|Importe|Descuento|ObjetoImp| IMPUESTOSCONCEPTO|numeroTraslados|numeroRetenciones| TRASLADOCONCEPTO|Base|Impuesto|TipoFactor|TasaOCuota|Importe| RETENCIONCONCEPTO|Base|Impuesto|TipoFactor|TasaOCuota|Importe| ACUENTATERCEROS|RfcACuentaTerceros|NombreACuentaTerceros|RegimenFiscalACuentaTerceros|DomicilioFiscalACuentaTerceros| INFORMACIONADUANERA|numeroNumerosPedimento| NUMEROSPEDIMENTO|pedimento-1|pedimento-2|...|pedimento-N| CUENTAPREDIAL|numeroNumeros| NUMEROS|numero-1|numero-2|...|numero-N| IMPUESTOS|numeroTraslados|numeroRetenciones|TotalImpuestosTrasladados|TotalImpuestosRetenidos| TRASLADO|Base|Impuesto|TipoFactor|TasaOCuota|Importe| RETENCION|Impuesto|Importe| CORREO|correo1|correo2|...|correoN| CAMPOS_EXTRA|numeroCamposExtra| CAMPO_EXTRA|llave|valor|descripcion| Ejemplo de Código Solicitud (Request) C#JavaPythonPHP Herramienta svcutil Descarga e instala la herramienta svcutil\nEjecuta el comando siguiente (DESARROLLO)\nsvcutil.exe https://dev.facturaloplus.com/ws/servicio.do?wsdl /out:ServicioTimbradoClient.cs /config:app.config Esto genera dos archivos: ServicioTimbradoClient.cs y la configuración en app.config\nImplementación using System; using System.IO; using System.Text; using System.Threading.Tasks; // ... (Asegúrate de tener la referencia al cliente SOAP generado por svcutil) /// \u003csummary\u003e /// Genera dinámicamente el layout del CFDI en formato TXT. /// En una aplicación real, los valores se obtendrían de una base de datos o de la entrada del usuario. /// \u003c/summary\u003e /// \u003creturns\u003eUn string con el TXT del CFDI.\u003c/returns\u003e private static string GetTxtLayout() { var sb = new StringBuilder(); sb.AppendLine(\"COMPROBANTE|4.0|F|123|2025-07-04T12:00:00|01|||100.00|0.00|MXN|1|116.00|I|01|PUE|64000|\"); sb.AppendLine(\"EMISOR|ABC010101XYZ|Empresa Ejemplo SA de CV|601|\"); sb.AppendLine(\"RECEPTOR|XAXX010101000|Publico en General|64000|||616|G03\"); sb.AppendLine(\"CONCEPTOS|1\"); sb.AppendLine(\"\tCONCEPTO|01010101||1.0|ACT|Actividad|Producto de prueba|100.00|100.00||02\"); sb.AppendLine(\"\tIMPUESTOSCONCEPTO|1|0\"); sb.AppendLine(\"\tTRASLADOCONCEPTO|100.00|002|Tasa|0.160000|16.00\"); sb.AppendLine(\"IMPUESTOS|1|0|16.00|\"); sb.AppendLine(\"\tTRASLADO|100.00|002|Tasa|0.160000|16.00\"); return sb.ToString(); } /// \u003csummary\u003e /// Prepara y codifica los datos para la operación timbrarTXT. /// \u003c/summary\u003e public async Task\u003cRespuestaTimbrado\u003e TimbrarTxtAsync(string apiKey, string txtLayout, string keyPemPath, string cerPemPath) { // 1. Codificar el TXT a Base64 var txtBytes = Encoding.UTF8.GetBytes(txtLayout); var txtB64 = Convert.ToBase64String(txtBytes); // 2. Leer el contenido de los archivos PEM var keyPem = await File.ReadAllTextAsync(keyPemPath); var cerPem = await File.ReadAllTextAsync(cerPemPath); // 3. Invocar al servicio web using var client = new ServicioTimbradoWSPortTypeClient(\"ServicioTimbradoWSPort\"); try { // Asumiendo que la operación en el WSDL se llama 'timbrarTXT' var response = await client.timbrarTXTAsync(apiKey, txtB64, keyPem, cerPem); return new RespuestaTimbrado { Code = response.code, Message = response.message, Data = response.data }; } catch (Exception ex) { // Manejo de errores (FaultException, etc.) Console.WriteLine($\"Error al timbrar con TXT: {ex.Message}\"); throw; } } // Ejemplo de uso public async Task EjemploUsoTimbrarTxtAsync() { string apiKey = \"TU_API_KEY_AQUI\"; string txtLayout = GetTxtLayout(); // Carga el layout dinámicamente string keyPemFile = \"ruta/a/tu/llave.key.pem\"; string cerPemFile = \"ruta/a/tu/certificado.cer.pem\"; var resultado = await TimbrarTxtAsync(apiKey, txtLayout, keyPemFile, cerPemFile); if (resultado?.Code == \"200\") { Console.WriteLine(\"¡Timbrado con TXT Exitoso!\"); Console.WriteLine(resultado.Data); } else { Console.WriteLine($\"Error: {resultado?.Code} - {resultado?.Message}\"); } } Herramienta wsimport Java incluye la herramienta wsimport en el JDK para generar las clases cliente a partir de un WSDL.\nEjecuta el siguiente comando en tu terminal para el ambiente de DESARROLLO:\nwsimport -keep -p com.facturaloplus.cliente https://dev.facturaloplus.com/ws/servicio.do?wsdl -keep: Conserva los archivos fuente .java generados.\n-p: Especifica el paquete (package) donde se guardarán las clases.\nImplementación import java.nio.charset.StandardCharsets; import java.nio.file.Files; import java.nio.file.Paths; import java.util.Base64; import java.util.concurrent.CompletableFuture; // ... (Asegúrate de tener las clases generadas por wsimport) public class TimbradoTxtService { // ... (Definición de ExecutorService y Logger) /** * Genera dinámicamente el layout del CFDI en formato TXT. * En una aplicación real, los valores se obtendrían de una base de datos o de la entrada del usuario. */ public static String getTxtLayout() { return String.join(System.lineSeparator(), \"COMPROBANTE|4.0|F|123|2025-07-04T12:00:00|01|||100.00|0.00|MXN|1|116.00|I|01|PUE|64000|\", \"EMISOR|ABC010101XYZ|Empresa Ejemplo SA de CV|601|\", \"RECEPTOR|XAXX010101000|Publico en General|64000|||616|G03\", \"CONCEPTOS|1\", \"\tCONCEPTO|01010101||1.0|ACT|Actividad|Producto de prueba|100.00|100.00||02\", \"\tIMPUESTOSCONCEPTO|1|0\", \"\tTRASLADOCONCEPTO|100.00|002|Tasa|0.160000|16.00\", \"IMPUESTOS|1|0|16.00|\", \"\tTRASLADO|100.00|002|Tasa|0.160000|16.00\" ); } public CompletableFuture\u003cRespuestaTimbrado\u003e timbrarTxtAsync(String apiKey, String txtLayout, String keyPemPath, String cerPemPath) { return CompletableFuture.supplyAsync(() -\u003e { try { // 1. Codificar TXT a Base64 String txtB64 = Base64.getEncoder().encodeToString(txtLayout.getBytes(StandardCharsets.UTF_8)); // 2. Leer archivos PEM String keyPem = new String(Files.readAllBytes(Paths.get(keyPemPath))); String cerPem = new String(Files.readAllBytes(Paths.get(cerPemPath))); // 3. Llamar al servicio ServicioTimbradoWS service = new ServicioTimbradoWS(); ServicioTimbradoWSPortType port = service.getServicioTimbradoWSPort(); // Asumiendo que la operación se llama 'timbrarTXT' Respuesta response = port.timbrarTXT(apiKey, txtB64, keyPem, cerPem); RespuestaTimbrado resultado = new RespuestaTimbrado(); resultado.setCode(response.getCode()); resultado.setMessage(response.getMessage()); resultado.setData(response.getData()); return resultado; } catch (Exception ex) { // Manejo de errores throw new RuntimeException(\"Error al timbrar con TXT\", ex); } }, executor); } // Ejemplo de uso public static void main(String[] args) { TimbradoTxtService service = new TimbradoTxtService(); String apiKey = \"TU_API_KEY_AQUI\"; String keyPem = \"ruta/a/tu/llave.key.pem\"; String cerPem = \"ruta/a/tu/certificado.cer.pem\"; String txtLayout = getTxtLayout(); // Carga el layout dinámicamente service.timbrarTxtAsync(apiKey, txtLayout, keyPem, cerPem) .whenComplete((resultado, ex) -\u003e { if (ex != null) { System.err.println(\"Error: \" + ex.getMessage()); } else if (\"200\".equals(resultado.getCode())) { System.out.println(\"¡Timbrado con TXT Exitoso!\"); System.out.println(resultado.getData()); } else { System.err.println(\"Error: \" + resultado.getCode() + \" - \" + resultado.getMessage()); } service.shutdown(); }).join(); } } Herramienta Zeep Para interactuar con servicios SOAP en Python, la librería zeep es una excelente opción. Proporciona una interfaz limpia y moderna.\nInstala la librería usando pip:\npip install zeep Implementación import asyncio import base64 from zeep.asyncio import AsyncClient # ... (Definición de RespuestaTimbrado y configuración de logging) def get_txt_layout() -\u003e str: \"\"\" Genera dinámicamente el layout del CFDI como un string de texto. En una aplicación real, los valores se obtendrían de una base de datos o de la entrada del usuario. \"\"\" return \"\\n\".join([ \"COMPROBANTE|4.0|F|123|2025-07-04T12:00:00|01|||100.00|0.00|MXN|1|116.00|I|01|PUE|64000|\", \"EMISOR|ABC010101XYZ|Empresa Ejemplo SA de CV|601|\", \"RECEPTOR|XAXX010101000|Publico en General|64000|||616|G03\", \"CONCEPTOS|1\", \"\tCONCEPTO|01010101||1.0|ACT|Actividad|Producto de prueba|100.00|100.00||02\", \"\tIMPUESTOSCONCEPTO|1|0\", \"\tTRASLADOCONCEPTO|100.00|002|Tasa|0.160000|16.00\", \"IMPUESTOS|1|0|16.00|\", \"\tTRASLADO|100.00|002|Tasa|0.160000|16.00\" ]) class TimbradoTxtService: def __init__(self, wsdl_url: str): self.wsdl_url = wsdl_url self.async_client = AsyncClient(self.wsdl_url) async def timbrar_txt_async(self, api_key: str, txt_layout: str, key_pem_path: str, cer_pem_path: str) -\u003e RespuestaTimbrado: try: # 1. Convertir TXT string a Base64 txt_b64 = base64.b64encode(txt_layout.encode('utf-8')).decode('utf-8') # 2. Leer archivos PEM with open(key_pem_path, 'r') as f: key_pem = f.read() with open(cer_pem_path, 'r') as f: cer_pem = f.read() # 3. Llamar al servicio # Asumiendo que la operación se llama 'timbrarTXT' response = await self.async_client.service.timbrarTXT( apikey=api_key, txtB64=txt_b64, keyPEM=key_pem, cerPEM=cer_pem ) return RespuestaTimbrado( code=response.code, message=response.message, data=response.data ) except Exception as e: logging.error(f\"Error al timbrar con TXT: {e}\") raise # Ejemplo de uso async def main(): service = TimbradoTxtService(\"https://dev.facturaloplus.com/ws/servicio.do?wsdl\") api_key = \"TU_API_KEY_AQUI\"; key_pem = \"ruta/a/tu/llave.key.pem\"; cer_pem = \"ruta/a/tu/certificado.cer.pem\"; layout = get_txt_layout(); // Carga el layout dinámicamente resultado = await service.timbrar_txt_async(api_key, layout, key_pem, cer_pem); if resultado.code == \"200\": print(\"¡Timbrado con TXT Exitoso!\"); print(resultado.data); else: print(f\"Error: {resultado.code} - {resultado.message}\"); if __name__ == \"__main__\": asyncio.run(main()); Herramienta SoapClient PHP tiene soporte nativo para SOAP a través de la extensión SOAP. Asegúrate de que la extensión php-soap esté habilitada en tu archivo php.ini.\nImplementación \u003c?php // ... (Definición de la clase RespuestaTimbrado) /** * Genera dinámicamente el layout del CFDI como un string TXT. * En una aplicación real, los valores se obtendrían de una base de datos. */ function getTxtLayout(): string { return implode(\"\\n\", [ \"COMPROBANTE|4.0|F|123|2025-07-04T12:00:00|01|||100.00|0.00|MXN|1|116.00|I|01|PUE|64000|\", \"EMISOR|ABC010101XYZ|Empresa Ejemplo SA de CV|601|\", \"RECEPTOR|XAXX010101000|Publico en General|64000|||616|G03\", \"CONCEPTOS|1\", \"\tCONCEPTO|01010101||1.0|ACT|Actividad|Producto de prueba|100.00|100.00||02\", \"\tIMPUESTOSCONCEPTO|1|0\", \"\tTRASLADOCONCEPTO|100.00|002|Tasa|0.160000|16.00\", \"IMPUESTOS|1|0|16.00|\", \"\tTRASLADO|100.00|002|Tasa|0.160000|16.00\" ]); } class TimbradoTxtService { private string $wsdlUrl; public function __construct(string $wsdlUrl) { $this-\u003ewsdlUrl = $wsdlUrl; } public function timbrarTxt(string $apiKey, string $txtLayout, string $keyPemPath, string $cerPemPath): RespuestaTimbrado { $respuesta = new RespuestaTimbrado(); try { // 1. Codificar TXT a Base64 $txtB64 = base64_encode($txtLayout); // 2. Leer archivos PEM $keyPem = file_get_contents($keyPemPath); $cerPem = file_get_contents($cerPemPath); if ($keyPem === false || $cerPem === false) { throw new Exception(\"No se pudieron leer los archivos .pem\"); } // 3. Llamar al servicio $soapClient = new SoapClient($this-\u003ewsdlUrl, ['trace' =\u003e 1, 'exceptions' =\u003e true]); $params = [ 'apikey' =\u003e $apiKey, 'txtB64' =\u003e $txtB64, 'keyPEM' =\u003e $keyPem, 'cerPEM' =\u003e $cerPem ]; // Asumiendo que la operación se llama 'timbrarTXT' $response = $soapClient-\u003etimbrarTXT($params); $respuesta-\u003ecode = $response-\u003ereturn-\u003ecode ?? null; $respuesta-\u003emessage = $response-\u003ereturn-\u003emessage ?? null; $respuesta-\u003edata = $response-\u003ereturn-\u003edata ?? null; } catch (Exception $e) { $respuesta-\u003ecode = \"CLIENT_ERROR\"; $respuesta-\u003emessage = $e-\u003egetMessage(); } return $respuesta; } } // Ejemplo de uso $service = new TimbradoTxtService(\"https://dev.facturaloplus.com/ws/servicio.do?wsdl\"); $apiKey = \"TU_API_KEY_AQUI\"; $keyPem = \"ruta/a/tu/llave.key.pem\"; $cerPem = \"ruta/a/tu/certificado.cer.pem\"; $txtLayout = getTxtLayout(); // Carga el layout dinámicamente $resultado = $service-\u003etimbrarTxt($apiKey, $txtLayout, $keyPem, $cerPem); header('Content-Type: text/plain'); if ($resultado-\u003ecode === '200') { echo \"¡Timbrado con TXT Exitoso!\\n\"; echo $resultado-\u003edata; } else { echo \"Error: {$resultado-\u003ecode} - {$resultado-\u003emessage}\\n\"; } ?\u003e Respuesta (Response) La estructura de la respuesta SOAP es la misma que la de la operación timbrar. El contenido de la etiqueta data será el XML del CFDI timbrado.\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cSOAP-ENV:Envelope ...\u003e \u003cSOAP-ENV:Body\u003e \u003cns1:timbrarTXTResponse xmlns:ns1=\"urn:ws_api\"\u003e \u003creturn xsi:type=\"tns:RespuestaTimbrado\"\u003e \u003ccode xsi:type=\"xsd:string\"\u003eCÓDIGO\u003c/code\u003e \u003cmessage xsi:type=\"xsd:string\"\u003eMENSAJE\u003c/message\u003e \u003cdata xsi:type=\"xsd:string\"\u003e\u003c![CDATA[CFDI TIMBRADO]]\u003e\u003c/data\u003e \u003c/return\u003e \u003c/ns1:timbrarTXTResponse\u003e \u003c/SOAP-ENV:Body\u003e \u003c/SOAP-ENV:Envelope\u003e Códigos de respuesta Los códigos de respuesta para el timbrado de CFDI son importantes para entender el resultado de la solicitud. A continuación se detallan los códigos más comunes que puedes recibir al realizar una solicitud de timbrado a través de la API.\rCódigo\rDescripción\r200\rSolicitud procesada con éxito\r300\rAPI KEY Inválida o inexistente\r301\rXML mal formado\r302\rEl sello del emisor no es válido\r303\rEl RFC del CSD del emisor no corresponde al RFC del Emisor\r304\rCSD del Emisor ha sido revobado\r305\rLa fecha de emisión no está dentro de la vigencia del CSD del Emisor\r306\rLa llave utilizada para sellar debe ser un CSD\r307\rEl CFDI contiene un timbre previo\r308\rEl CSD del emisor no ha sido firmado por uno de los Certificados de autoridad del SAT\r401\rEl rango de la fecha de generación no debe de ser mayor a 72 horas para la emisión del timbre\r402\rRFC del emisor no se encuentra en el régimen de contribuyentes (Lista de validación de régimen) LCO","timbrartxt#timbrarTXT":""},"title":"timbrarTXT"},"/facturotas.docs/api/timbrado/timbrartxt2/":{"data":{"#":"timbrarTXT2Esta operación extiende la funcionalidad de timbrarTXT, permitiendo no solo generar y timbrar un CFDI a partir de un layout de texto plano (TXT), sino también obtener una representación en formato PDF del comprobante, personalizada con una plantilla y un logotipo.\nDescripción de la Operación Esta operación toma un layout TXT, lo convierte en un CFDI (versión 4.0), lo sella con los certificados proporcionados y lo timbra. Como resultado, devuelve una estructura JSON que contiene tanto el XML del CFDI timbrado como el contenido del PDF generado en formato Base64.\nParámetros de Entrada (Input) Parámetro Tipo de Dato Descripción apikey string Credencial de acceso al servicio (Solicita aquí). txtB64 string Cadena en formato Base64 que contiene el layout TXT con la información del CFDI a generar. Conversor Base 64 keyPEM string Contenido del archivo de la llave privada (.key) en formato PEM. cerPEM string Contenido del archivo del certificado de llave pública (.cer) en formato PEM. plantilla string Identificador numérico de la plantilla a utilizar para la generación del PDF. logob64 string Imagen (logo) de la empresa en formato PNG y codificada en Base64. Conversor Base 64 Parámetros de Salida (Output) - RespuestaTimbrado Atributo Tipo de Dato Descripción code string Código de respuesta de la operación. message string Mensaje detallado de la respuesta. data string JSON string que contiene el XML del CFDI timbrado y el contenido del PDF en Base64. Debe ser decodificado para acceder a sus valores. Estructura del TXT de Entrada El TXT enviado en el parámetro txtB64 debe seguir la siguiente estructura de “pipe” (|). Cada línea representa una sección del CFDI y los campos se separan por |. Los valores vacíos se indican con un | consecutivo. Conversor Base 64\nCOMPROBANTE|4.0|Serie|Folio|Fecha|FormaPago|NoCertificado|CondicionesDePago|SubTotal|Descuento|Moneda|TipoCambio|Total|TipoDeComprobante|Exportacion|MetodoPago|LugarExpedicion|Confirmacion| INFORMACIONGLOBAL|Periodicidad|Meses|Año| CFDIRELACIONADOS|numeroCfdiRelacionados|TipoRelacion| CFDIRELACIONADO|UUID-1|UUID-2|...|UUID-N| EMISOR|Rfc|Nombre|RegimenFiscal|FacAtrAdquirente| RECEPTOR|Rfc|Nombre|DomicilioFiscalReceptor|ResidenciaFiscal|NumRegIdTrib|RegimenFiscalReceptor|UsoCFDI| CONCEPTOS|numeroConceptos| CONCEPTO|ClaveProdServ|NoIdentificacion|Cantidad|ClaveUnidad|Unidad|Descripcion|ValorUnitario|Importe|Descuento|ObjetoImp| IMPUESTOSCONCEPTO|numeroTraslados|numeroRetenciones| TRASLADOCONCEPTO|Base|Impuesto|TipoFactor|TasaOCuota|Importe| RETENCIONCONCEPTO|Base|Impuesto|TipoFactor|TasaOCuota|Importe| ACUENTATERCEROS|RfcACuentaTerceros|NombreACuentaTerceros|RegimenFiscalACuentaTerceros|DomicilioFiscalACuentaTerceros| INFORMACIONADUANERA|numeroNumerosPedimento| NUMEROSPEDIMENTO|pedimento-1|pedimento-2|...|pedimento-N| CUENTAPREDIAL|numeroNumeros| NUMEROS|numero-1|numero-2|...|numero-N| IMPUESTOS|numeroTraslados|numeroRetenciones|TotalImpuestosTrasladados|TotalImpuestosRetenidos| TRASLADO|Base|Impuesto|TipoFactor|TasaOCuota|Importe| RETENCION|Impuesto|Importe| CORREO|correo1|correo2|...|correoN| CAMPOS_EXTRA|numeroCamposExtra| CAMPO_EXTRA|llave|valor|descripcion| Ejemplo de Código C#JavaPythonPHP Herramienta svcutil Descarga e instala la herramienta svcutil\nEjecuta el comando siguiente (DESARROLLO)\nsvcutil.exe https://dev.facturaloplus.com/ws/servicio.do?wsdl /out:ServicioTimbradoClient.cs /config:app.config Esto genera dos archivos: ServicioTimbradoClient.cs y la configuración en app.config\nImplementación // Se requiere la librería System.Text.Json using System.Text.Json; using System.Text; /// \u003csummary\u003e /// Genera dinámicamente el layout del CFDI en formato TXT. /// \u003c/summary\u003e /// \u003creturns\u003eUn string con el TXT del CFDI.\u003c/returns\u003e private static string GetTxtLayout() { var sb = new StringBuilder(); sb.AppendLine(\"COMPROBANTE|4.0|F|123|2025-07-04T12:00:00|01|||100.00|0.00|MXN|1|116.00|I|01|PUE|64000|\"); sb.AppendLine(\"EMISOR|ABC010101XYZ|Empresa Ejemplo SA de CV|601|\"); sb.AppendLine(\"RECEPTOR|XAXX010101000|Publico en General|64000|||616|G03\"); sb.AppendLine(\"CONCEPTOS|1\"); sb.AppendLine(\"\tCONCEPTO|01010101||1.0|ACT|Actividad|Producto de prueba|100.00|100.00||02\"); sb.AppendLine(\"\tIMPUESTOSCONCEPTO|1|0\"); sb.AppendLine(\"\tTRASLADOCONCEPTO|100.00|002|Tasa|0.160000|16.00\"); sb.AppendLine(\"IMPUESTOS|1|0|16.00|\"); sb.AppendLine(\"\tTRASLADO|100.00|002|Tasa|0.160000|16.00\"); return sb.ToString(); } // Clase para deserializar la respuesta en el campo 'data' public class RespuestaData { public string Xml { get; set; } public string Pdf { get; set; } } public async Task\u003cRespuestaTimbrado\u003e TimbrarTxt2Async(string apiKey, string txtLayout, string keyPem, string cerPem, string plantilla, string logoB64) { var txtB64 = Convert.ToBase64String(Encoding.UTF8.GetBytes(txtLayout)); using var client = new ServicioTimbradoWSPortTypeClient(\"ServicioTimbradoWSPort\"); // Asumiendo que la operación se llama 'timbrarTXT2' var response = await client.timbrarTXT2Async(apiKey, txtB64, keyPem, cerPem, plantilla, logoB64); return new RespuestaTimbrado { Code = response.code, Message = response.message, Data = response.data }; } // Ejemplo de uso public async Task EjemploUsoTimbrarTxt2Async() { string apiKey = \"TU_API_KEY_AQUI\"; string txtLayout = GetTxtLayout(); // Generación dinámica string keyPem = File.ReadAllText(\"ruta/a/llave.key.pem\"); string cerPem = File.ReadAllText(\"ruta/a/certificado.cer.pem\"); string plantilla = \"1\"; // ID de la plantilla a usar string logoB64 = Convert.ToBase64String(File.ReadAllBytes(\"ruta/a/logo.png\")); var resultado = await TimbrarTxt2Async(apiKey, txtLayout, keyPem, cerPem, plantilla, logoB64); if (resultado?.Code == \"200\" \u0026\u0026 !string.IsNullOrEmpty(resultado.Data)) { Console.WriteLine(\"¡Timbrado con TXT y PDF Exitoso!\"); // Deserializar el JSON de la respuesta var respuestaData = JsonSerializer.Deserialize\u003cRespuestaData\u003e(resultado.Data); Console.WriteLine(\"--- XML Timbrado ---\"); Console.WriteLine(respuestaData.Xml); // Guardar el PDF var pdfBytes = Convert.FromBase64String(respuestaData.Pdf); File.WriteAllBytes(\"comprobante.pdf\", pdfBytes); Console.WriteLine(\" PDF guardado como comprobante.pdf\"); } else { Console.WriteLine($\"Error: {resultado?.Code} - {resultado?.Message}\"); } } Herramienta wsimport Java incluye la herramienta wsimport en el JDK para generar las clases cliente a partir de un WSDL.\nEjecuta el siguiente comando en tu terminal para el ambiente de DESARROLLO:\nwsimport -keep -p com.facturaloplus.cliente https://dev.facturaloplus.com/ws/servicio.do?wsdl -keep: Conserva los archivos fuente .java generados.\n-p: Especifica el paquete (package) donde se guardarán las clases.\nImplementación // Se recomienda usar una librería como Gson o Jackson para parsear el JSON de respuesta. // import com.google.gson.Gson; /** * Genera dinámicamente el layout del CFDI en formato TXT. */ public static String getTxtLayout() { return String.join(System.lineSeparator(), \"COMPROBANTE|4.0|F|123|2025-07-04T12:00:00|01|||100.00|0.00|MXN|1|116.00|I|01|PUE|64000|\", \"EMISOR|ABC010101XYZ|Empresa Ejemplo SA de CV|601|\", \"RECEPTOR|XAXX010101000|Publico en General|64000|||616|G03\", \"CONCEPTOS|1\", \"\tCONCEPTO|01010101||1.0|ACT|Actividad|Producto de prueba|100.00|100.00||02\", \"\tIMPUESTOSCONCEPTO|1|0\", \"\tTRASLADOCONCEPTO|100.00|002|Tasa|0.160000|16.00\", \"IMPUESTOS|1|0|16.00|\", \"\tTRASLADO|100.00|002|Tasa|0.160000|16.00\" ); } // Clase para mapear el JSON en el campo 'data' class RespuestaData { String xml; String pdf; } public CompletableFuture\u003cRespuestaTimbrado\u003e timbrarTxt2Async(String apiKey, String txtLayout, String keyPem, String cerPem, String plantilla, String logoB64) { return CompletableFuture.supplyAsync(() -\u003e { try { String txtB64 = Base64.getEncoder().encodeToString(txtLayout.getBytes(StandardCharsets.UTF_8)); ServicioTimbradoWSPortType port = new ServicioTimbradoWS().getServicioTimbradoWSPort(); // Asumiendo que la operación se llama 'timbrarTXT2' Respuesta response = port.timbrarTXT2(apiKey, txtB64, keyPem, cerPem, plantilla, logoB64); RespuestaTimbrado resultado = new RespuestaTimbrado(); resultado.setCode(response.getCode()); resultado.setMessage(response.getMessage()); resultado.setData(response.getData()); return resultado; } catch (Exception e) { throw new RuntimeException(\"Error en timbrarTXT2\", e); } }, executor); } // Ejemplo de uso public static void main(String[] args) { // ... (inicialización de service, apiKey, etc.) String txtLayout = getTxtLayout(); // Generación dinámica String plantilla = \"1\"; String logoB64 = Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(\"ruta/a/logo.png\"))); service.timbrarTxt2Async(apiKey, txtLayout, keyPem, cerPem, plantilla, logoB64).whenComplete((resultado, ex) -\u003e { if (ex == null \u0026\u0026 \"200\".equals(resultado.getCode())) { System.out.println(\"¡Timbrado con TXT y PDF Exitoso!\"); // Parsear el JSON de respuesta // Gson gson = new Gson(); // RespuestaData data = gson.fromJson(resultado.getData(), RespuestaData.class); // System.out.println(\"XML: \" + data.xml); // byte[] pdfBytes = Base64.getDecoder().decode(data.pdf); // Files.write(Paths.get(\"comprobante.pdf\"), pdfBytes); System.out.println(\"PDF guardado correctamente.\"); } else { /* ... manejo de error ... */ } service.shutdown(); }).join(); } Herramienta Zeep Para interactuar con servicios SOAP en Python, la librería zeep es una excelente opción. Proporciona una interfaz limpia y moderna.\nInstala la librería usando pip:\npip install zeep Implementación # ... (Definición de RespuestaTimbrado y configuración de logging) import json def get_txt_layout() -\u003e str: \"\"\" Genera dinámicamente el layout del CFDI como un string de texto. \"\"\" return \" \".join([ \"COMPROBANTE|4.0|F|123|2025-07-04T12:00:00|01|||100.00|0.00|MXN|1|116.00|I|01|PUE|64000|\", \"EMISOR|ABC010101XYZ|Empresa Ejemplo SA de CV|601|\", \"RECEPTOR|XAXX010101000|Publico en General|64000|||616|G03\", \"CONCEPTOS|1\", \"\tCONCEPTO|01010101||1.0|ACT|Actividad|Producto de prueba|100.00|100.00||02\", \"\tIMPUESTOSCONCEPTO|1|0\", \"\tTRASLADOCONCEPTO|100.00|002|Tasa|0.160000|16.00\", \"IMPUESTOS|1|0|16.00|\", \"\tTRASLADO|100.00|002|Tasa|0.160000|16.00\" ]) async def timbrar_txt2_async(self, api_key: str, txt_layout: str, key_pem: str, cer_pem: str, plantilla: str, logo_b64: str) -\u003e RespuestaTimbrado: txt_b64 = base64.b64encode(txt_layout.encode('utf-8')).decode('utf-8') # Asumiendo que la operación se llama 'timbrarTXT2' response = await self.async_client.service.timbrarTXT2( apikey=api_key, txtB64=txt_b64, keyPEM=key_pem, cerPEM=cer_pem, plantilla=plantilla, logob64=logo_b64 ) return RespuestaTimbrado(code=response.code, message=response.message, data=response.data) # Ejemplo de uso async def main(): # ... (inicialización de service, apiKey, etc.) layout = get_txt_layout() # Generación dinámica plantilla = \"1\" with open(\"ruta/a/logo.png\", \"rb\") as image_file: logo_b64 = base64.b64encode(image_file.read()).decode('utf-8') resultado = await service.timbrar_txt2_async(api_key, layout, key_pem, cer_pem, plantilla, logo_b64) if resultado.code == \"200\" and resultado.data: print(\"¡Timbrado con TXT y PDF Exitoso!\") # Decodificar el JSON de la respuesta respuesta_data = json.loads(resultado.data) xml_timbrado = respuesta_data.get('xml') pdf_b64 = respuesta_data.get('pdf') print(\"--- XML Timbrado ---\") print(xml_timbrado) # Guardar el PDF with open(\"comprobante.pdf\", \"wb\") as f: f.write(base64.b64decode(pdf_b64)) print(\" PDF guardado como comprobante.pdf\") else: print(f\"Error: {resultado.code} - {resultado.message}\") Herramienta SoapClient PHP tiene soporte nativo para SOAP a través de la extensión SOAP. Asegúrate de que la extensión php-soap esté habilitada en tu archivo php.ini.\nImplementación \u003c?php /** * Genera dinámicamente el layout del CFDI como un string TXT. */ function getTxtLayout(): string { return implode(\" \", [ \"COMPROBANTE|4.0|F|123|2025-07-04T12:00:00|01|||100.00|0.00|MXN|1|116.00|I|01|PUE|64000|\", \"EMISOR|ABC010101XYZ|Empresa Ejemplo SA de CV|601|\", \"RECEPTOR|XAXX010101000|Publico en General|64000|||616|G03\", \"CONCEPTOS|1\", \"\tCONCEPTO|01010101||1.0|ACT|Actividad|Producto de prueba|100.00|100.00||02\", \"\tIMPUESTOSCONCEPTO|1|0\", \"\tTRASLADOCONCEPTO|100.00|002|Tasa|0.160000|16.00\", \"IMPUESTOS|1|0|16.00|\", \"\tTRASLADO|100.00|002|Tasa|0.160000|16.00\" ]); } public function timbrarTxt2(string $apiKey, string $txtLayout, string $keyPem, string $cerPem, string $plantilla, string $logoB64): RespuestaTimbrado { $respuesta = new RespuestaTimbrado(); try { $txtB64 = base64_encode($txtLayout); $soapClient = new SoapClient($this-\u003ewsdlUrl, ['trace' =\u003e 1, 'exceptions' =\u003e true]); $params = [ 'apikey' =\u003e $apiKey, 'txtB64' =\u003e $txtB64, 'keyPEM' =\u003e $keyPem, 'cerPEM' =\u003e $cerPem, 'plantilla' =\u003e $plantilla, 'logob64' =\u003e $logoB64 ]; // Asumiendo que la operación se llama 'timbrarTXT2' $response = $soapClient-\u003etimbrarTXT2($params); $respuesta-\u003ecode = $response-\u003ereturn-\u003ecode ?? null; $respuesta-\u003emessage = $response-\u003ereturn-\u003emessage ?? null; $respuesta-\u003edata = $response-\u003ereturn-\u003edata ?? null; } catch (Exception $e) { /* ... manejo de error ... */ } return $respuesta; } // Ejemplo de uso // ... (inicialización de service, apiKey, etc.) $txtLayout = getTxtLayout(); // Generación dinámica $plantilla = \"1\"; $logoB64 = base64_encode(file_get_contents(\"ruta/a/logo.png\")); $resultado = $service-\u003etimbrarTxt2($apiKey, $txtLayout, $keyPem, $cerPem, $plantilla, $logoB64); if ($resultado-\u003ecode === '200' \u0026\u0026 !empty($resultado-\u003edata)) { echo \"¡Timbrado con TXT y PDF Exitoso! \"; // Decodificar el JSON de respuesta $data = json_decode($resultado-\u003edata, true); $xml = $data['xml']; $pdfB64 = $data['pdf']; echo \"--- XML Timbrado --- \"; echo $xml; // Guardar el PDF file_put_contents(\"comprobante.pdf\", base64_decode($pdfB64)); echo \" PDF guardado como comprobante.pdf \"; } else { echo \"Error: {$resultado-\u003ecode} - {$resultado-\u003emessage} \"; } ?\u003e Respuesta (Response) La estructura de la respuesta SOAP es similar a las anteriores, pero el contenido de la etiqueta data es un JSON que encapsula el XML y el PDF.\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cSOAP-ENV:Envelope ...\u003e \u003cSOAP-ENV:Body\u003e \u003cns1:timbrarTXT2Response xmlns:ns1=\"urn:ws_api\"\u003e \u003creturn xsi:type=\"tns:RespuestaTimbrado\"\u003e \u003ccode xsi:type=\"xsd:string\"\u003e200\u003c/code\u003e \u003cmessage xsi:type=\"xsd:string\"\u003eOK\u003c/message\u003e \u003cdata xsi:type=\"xsd:string\"\u003e\u003c![CDATA[{ \"xml\": \"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48Y2ZkaT...\", \"pdf\": \"JVBERi0xLjQKJdPr6eEKMSAwIG9iago8PC9UeXBlL0NhdGFsb2cvT3V0bGlu...\" }]]\u003e\u003c/data\u003e \u003c/return\u003e \u003c/ns1:timbrarTXT2Response\u003e \u003c/SOAP-ENV:Body\u003e \u003c/SOAP-ENV:Envelope\u003e Códigos de respuesta Los códigos de respuesta para el timbrado de CFDI son importantes para entender el resultado de la solicitud. A continuación se detallan los códigos más comunes que puedes recibir al realizar una solicitud de timbrado a través de la API.\rCódigo\rDescripción\r200\rSolicitud procesada con éxito\r300\rAPI KEY Inválida o inexistente\r301\rXML mal formado\r302\rEl sello del emisor no es válido\r303\rEl RFC del CSD del emisor no corresponde al RFC del Emisor\r304\rCSD del Emisor ha sido revobado\r305\rLa fecha de emisión no está dentro de la vigencia del CSD del Emisor\r306\rLa llave utilizada para sellar debe ser un CSD\r307\rEl CFDI contiene un timbre previo\r308\rEl CSD del emisor no ha sido firmado por uno de los Certificados de autoridad del SAT\r401\rEl rango de la fecha de generación no debe de ser mayor a 72 horas para la emisión del timbre\r402\rRFC del emisor no se encuentra en el régimen de contribuyentes (Lista de validación de régimen) LCO","timbrartxt2#timbrarTXT2":""},"title":"timbrarTXT2"},"/facturotas.docs/guias/":{"data":{"guías#Guías":"GuíasThis section contains step-by-step guides to help you use the External API effectively."},"title":"_index"},"/facturotas.docs/herramientas/convertidorbase64/":{"data":{"":"Esta herramienta te permite codificar y decodificar texto fácilmente utilizando el formato Base64.\nTexto de Entrada Salida en Base64 Copiar al Portapapeles Limpiar "},"title":"Convertidor a Base64"}}