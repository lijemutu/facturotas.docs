{"/facturotas.docs/api/":{"data":{"":"","introducción#Introducción":"Introducción Nuestra API de timbrado se especializa en la emisión e integración de Comprobantes Fiscales Digitales por Internet (CFDI). Sus principales cualidades son:\nCualidades Técnicas Seguridad y Escalabilidad: Utiliza infraestructura de Amazon Web Services (AWS) con servicios EC2 para alta seguridad y escalabilidad, garantizando un 99.5% de disponibilidad y un Plan de Recuperación de Desastres (DRP). Los PACs están autorizados por el SAT y cumplen con ISO 27001, con comunicaciones SSL seguras. Actualizaciones: Mantenimiento constante para tecnologías fiscales, incluyendo CFDI 4.0, Complemento Carta Porte 2.0, Nuevo Esquema Cancelación 2.0, Complemento de Pagos 2.0 y Retenciones 2.0, disponibles desde enero de 2022. Métodos de Integración: Soporta timbrado vía XML, JSON y TXT. También ofrece un Conector Ejecutable en Java para timbrar y cancelar CFDI. Librerías: Proporciona bibliotecas gratuitas con ejemplos en PHP, Java, .Net, COM (VB6, Delphi, FoxPro) para integrar los servicios XML, JSON y TXT. Rendimiento: Capacidad mensual de hasta 130,000,000 de CFDI’s con un tiempo máximo de respuesta de 0.6 segundos. Respaldo y Generación: Respaldo de CFDI’s por al menos 5 años y capacidad de generación de PDF. Integraciones: Soporta métodos SOAP y REST. Cualidades No Técnicas Beneficios al Cliente: Timbres sin vigencia, actualizaciones y cancelaciones gratuitas, y soporte técnico especializado sin costo adicional. Soporte Técnico: Atención personalizada por ingenieros especialistas, con soporte por niveles (básico, técnico, desarrollo, VIP) a través de Skype, e-mail, videollamada, conexión remota y WhatsApp. Herramientas de Gestión: Panel administrativo Multi-RFC sin costo para controlar operaciones, consultar CFDI’s, timbres y cancelaciones, y gestionar subcuentas. Ambiente de Pruebas: Disponibilidad de un ambiente de pruebas con soporte. Asesoría: Asesoría profesional para el proceso de integración. Validador de XML: Servicio adicional que valida CFDI timbrados, confirmando su registro en el SAT y revisando parámetros como redacción y sintaxis. Bóveda Web Service: Descarga automática de CFDI desde el portal del SAT, con respaldo seguro en múltiples centros de datos. Permite cargar FIEL, configurar descargas y generar reportes. Timbrado MultiPAC: Balanceador de carga que redirige el timbrado entre PACs para evitar intermitencias, de forma transparente para el cliente. Todas las solicitudes son seguras vía HTTPS. Endpoints"},"title":"_index"},"/facturotas.docs/api/endpoints_timbrado/":{"data":{"endpoints-timbrado#Endpoints Timbrado":"","timbrar#timbrar":"Endpoints TimbradoEsta sección detalla la operación del servicio de timbrado, permitiendo procesar y obtener el XML timbrado de un Comprobante Fiscal Digital (CFDI).\ntimbrar Descripción de la Operación Esta operación permite timbrar un CFDI en sus versiones 3.3 o 4.0 y retornar el XML timbrado completo del comprobante fiscal.\nParámetros de Entrada (Input) Parámetro Tipo de Dato Descripción apikey string Credencial de acceso al servicio (32 caracteres). xmlCFDI string Contenido del documento XML del CFDI v3.3 o v4.0. Parámetros de Salida (Output) - RespuestaTimbrado Atributo Tipo de Dato Descripción code string Código de respuesta de la operación. message string Mensaje detallado de la respuesta. data string XML del CFDI timbrado en caso de éxito. Ejemplo de Código A continuación se presenta un ejemplo de cómo construir la solicitud y procesar la respuesta utilizando el servicio Web.\nSolicitud (Request) C#JavaPythonPHP Herramienta svcutil Descarga e instala la herramienta svcutil\nEjecuta el comando siguiente (DESARROLLO)\nsvcutil.exe https://dev.facturaloplus.com/ws/servicio.do?wsdl /out:ServicioTimbradoClient.cs /config:app.config Esto genera dos archivos: ServicioTimbradoClient.cs y la configuración en app.config\nImplementación /// Agregar los parámetros necesarios private static string TimbrarCfdi() =\u003e \"\"\" \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003ccfdi:Comprobante xmlns:cfdi=\"http://www.sat.gob.mx/cfd/4\" Version=\"4.0\" Serie=\"F\" Folio=\"123\" Fecha=\"2025-07-02T12:00:00\" SubTotal=\"100.00\" Moneda=\"MXN\" Total=\"116.00\" TipoDeComprobante=\"I\" Exportacion=\"01\" MetodoPago=\"PUE\" FormaPago=\"01\" LugarExpedicion=\"64000\"\u003e \u003ccfdi:Emisor Rfc=\"ABC010101XYZ\" Nombre=\"Empresa Ejemplo\" RegimenFiscal=\"601\"/\u003e \u003ccfdi:Receptor Rfc=\"XAXX010101000\" Nombre=\"Publico en General\" DomicilioFiscalReceptor=\"64000\" RegimenFiscalReceptor=\"616\" UsoCFDI=\"G03\"/\u003e \u003ccfdi:Conceptos\u003e \u003ccfdi:Concepto ClaveProdServ=\"84111506\" Cantidad=\"1\" ClaveUnidad=\"ACT\" Descripcion=\"Servicio de Ejemplo\" ValorUnitario=\"100.00\" Importe=\"100.00\"\u003e \u003ccfdi:Impuestos\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Base=\"100.00\" Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003c/cfdi:Concepto\u003e \u003c/cfdi:Conceptos\u003e \u003ccfdi:Impuestos TotalImpuestosTrasladados=\"16.00\"\u003e \u003ccfdi:Traslados\u003e \u003ccfdi:Traslado Impuesto=\"002\" TipoFactor=\"Tasa\" TasaOCuota=\"0.160000\" Importe=\"16.00\"/\u003e \u003c/cfdi:Traslados\u003e \u003c/cfdi:Impuestos\u003e \u003c/cfdi:Comprobante\u003e \"\"\"; public async Task\u003cRespuestaTimbrado\u003e TimbrarAsync() { using var client = new ServicioTimbradoWSPortTypeClient(\"ServicioTimbradoWSPort\"); try { var response = await client.timbrarAsync(\"APIKEY\", TimbrarCfdi()); return new RespuestaTimbrado { Code = response.code, Message = response.message, Data = response.data }; } catch (FaultException\u003cRespuestaTimbrado\u003e ex) { _logger.LogError(ex, \"Error SOAP: {Code} - {Message}\", ex.Detail.code, ex.Detail.message); throw; } catch (CommunicationException ex) { _logger.LogError(ex, \"Error de comunicación con el servicio\"); throw; } catch (TimeoutException ex) { _logger.LogError(ex, \"Timeout en la comunicación\"); throw; } } Java: YAML is a human-readable data serialization language.\rPython: TOML aims to be a minimal configuration file format that’s easy to read due to obvious semantics.\rPHP: TOML aims to be a minimal configuration file format that’s easy to read due to obvious semantics."},"title":"endpoints_timbrado"},"/facturotas.docs/api/schemas/":{"data":{"schemas#Schemas":"SchemasDetailed information about the data structures used in the API."},"title":"schemas"},"/facturotas.docs/guias/":{"data":{"guías#Guías":"GuíasThis section contains step-by-step guides to help you use the External API effectively.\nGetting Started Authentication "},"title":"_index"},"/facturotas.docs/guias/authentication/":{"data":{"authentication#Authentication":"AuthenticationUnderstand how to authenticate with the External API using API keys or OAuth."},"title":"authentication"},"/facturotas.docs/guias/getting-started/":{"data":{"getting-started#Getting Started":"Getting StartedLearn how to make your first API call and set up your environment."},"title":"getting-started"}}